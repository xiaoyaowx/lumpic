/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/openid-client";
exports.ids = ["vendor-chunks/openid-client"];
exports.modules = {

/***/ "(rsc)/./node_modules/openid-client/lib/client.js":
/*!**************************************************!*\
  !*** ./node_modules/openid-client/lib/client.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { inspect } = __webpack_require__(/*! util */ \"util\");\nconst stdhttp = __webpack_require__(/*! http */ \"http\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst { strict: assert } = __webpack_require__(/*! assert */ \"assert\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst { URL, URLSearchParams } = __webpack_require__(/*! url */ \"url\");\nconst jose = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js\");\nconst tokenHash = __webpack_require__(/*! oidc-token-hash */ \"(rsc)/./node_modules/oidc-token-hash/lib/index.js\");\nconst isKeyObject = __webpack_require__(/*! ./helpers/is_key_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_key_object.js\");\nconst decodeJWT = __webpack_require__(/*! ./helpers/decode_jwt */ \"(rsc)/./node_modules/openid-client/lib/helpers/decode_jwt.js\");\nconst base64url = __webpack_require__(/*! ./helpers/base64url */ \"(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\");\nconst defaults = __webpack_require__(/*! ./helpers/defaults */ \"(rsc)/./node_modules/openid-client/lib/helpers/defaults.js\");\nconst parseWwwAuthenticate = __webpack_require__(/*! ./helpers/www_authenticate_parser */ \"(rsc)/./node_modules/openid-client/lib/helpers/www_authenticate_parser.js\");\nconst { assertSigningAlgValuesSupport, assertIssuerConfiguration } = __webpack_require__(/*! ./helpers/assert */ \"(rsc)/./node_modules/openid-client/lib/helpers/assert.js\");\nconst pick = __webpack_require__(/*! ./helpers/pick */ \"(rsc)/./node_modules/openid-client/lib/helpers/pick.js\");\nconst isPlainObject = __webpack_require__(/*! ./helpers/is_plain_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\");\nconst processResponse = __webpack_require__(/*! ./helpers/process_response */ \"(rsc)/./node_modules/openid-client/lib/helpers/process_response.js\");\nconst TokenSet = __webpack_require__(/*! ./token_set */ \"(rsc)/./node_modules/openid-client/lib/token_set.js\");\nconst { OPError, RPError } = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst now = __webpack_require__(/*! ./helpers/unix_timestamp */ \"(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\");\nconst { random } = __webpack_require__(/*! ./helpers/generators */ \"(rsc)/./node_modules/openid-client/lib/helpers/generators.js\");\nconst request = __webpack_require__(/*! ./helpers/request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nconst { CLOCK_TOLERANCE } = __webpack_require__(/*! ./helpers/consts */ \"(rsc)/./node_modules/openid-client/lib/helpers/consts.js\");\nconst { keystores } = __webpack_require__(/*! ./helpers/weak_cache */ \"(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js\");\nconst KeyStore = __webpack_require__(/*! ./helpers/keystore */ \"(rsc)/./node_modules/openid-client/lib/helpers/keystore.js\");\nconst clone = __webpack_require__(/*! ./helpers/deep_clone */ \"(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\");\nconst { authenticatedPost, resolveResponseType, resolveRedirectUri } = __webpack_require__(/*! ./helpers/client */ \"(rsc)/./node_modules/openid-client/lib/helpers/client.js\");\nconst { queryKeyStore } = __webpack_require__(/*! ./helpers/issuer */ \"(rsc)/./node_modules/openid-client/lib/helpers/issuer.js\");\nconst DeviceFlowHandle = __webpack_require__(/*! ./device_flow_handle */ \"(rsc)/./node_modules/openid-client/lib/device_flow_handle.js\");\nconst [major, minor] = process.version.slice(1).split(\".\").map((str)=>parseInt(str, 10));\nconst rsaPssParams = major >= 17 || major === 16 && minor >= 9;\nconst retryAttempt = Symbol();\nconst skipNonceCheck = Symbol();\nconst skipMaxAgeCheck = Symbol();\nfunction pickCb(input) {\n    return pick(input, \"access_token\", \"code\", \"error_description\", \"error_uri\", \"error\", \"expires_in\", \"id_token\", \"iss\", \"response\", \"session_state\", \"state\", \"token_type\");\n}\nfunction authorizationHeaderValue(token, tokenType = \"Bearer\") {\n    return `${tokenType} ${token}`;\n}\nfunction getSearchParams(input) {\n    const parsed = url.parse(input);\n    if (!parsed.search) return {};\n    return querystring.parse(parsed.search.substring(1));\n}\nfunction verifyPresence(payload, jwt, prop) {\n    if (payload[prop] === undefined) {\n        throw new RPError({\n            message: `missing required JWT property ${prop}`,\n            jwt\n        });\n    }\n}\nfunction authorizationParams(params) {\n    const authParams = {\n        client_id: this.client_id,\n        scope: \"openid\",\n        response_type: resolveResponseType.call(this),\n        redirect_uri: resolveRedirectUri.call(this),\n        ...params\n    };\n    Object.entries(authParams).forEach(([key, value])=>{\n        if (value === null || value === undefined) {\n            delete authParams[key];\n        } else if (key === \"claims\" && typeof value === \"object\") {\n            authParams[key] = JSON.stringify(value);\n        } else if (key === \"resource\" && Array.isArray(value)) {\n            authParams[key] = value;\n        } else if (typeof value !== \"string\") {\n            authParams[key] = String(value);\n        }\n    });\n    return authParams;\n}\nfunction getKeystore(jwks) {\n    if (!isPlainObject(jwks) || !Array.isArray(jwks.keys) || jwks.keys.some((k)=>!isPlainObject(k) || !(\"kty\" in k))) {\n        throw new TypeError(\"jwks must be a JSON Web Key Set formatted object\");\n    }\n    return KeyStore.fromJWKS(jwks, {\n        onlyPrivate: true\n    });\n}\n// if an OP doesnt support client_secret_basic but supports client_secret_post, use it instead\n// this is in place to take care of most common pitfalls when first using discovered Issuers without\n// the support for default values defined by Discovery 1.0\nfunction checkBasicSupport(client, properties) {\n    try {\n        const supported = client.issuer.token_endpoint_auth_methods_supported;\n        if (!supported.includes(properties.token_endpoint_auth_method)) {\n            if (supported.includes(\"client_secret_post\")) {\n                properties.token_endpoint_auth_method = \"client_secret_post\";\n            }\n        }\n    } catch (err) {}\n}\nfunction handleCommonMistakes(client, metadata, properties) {\n    if (!metadata.token_endpoint_auth_method) {\n        // if no explicit value was provided\n        checkBasicSupport(client, properties);\n    }\n    // :fp: c'mon people... RTFM\n    if (metadata.redirect_uri) {\n        if (metadata.redirect_uris) {\n            throw new TypeError(\"provide a redirect_uri or redirect_uris, not both\");\n        }\n        properties.redirect_uris = [\n            metadata.redirect_uri\n        ];\n        delete properties.redirect_uri;\n    }\n    if (metadata.response_type) {\n        if (metadata.response_types) {\n            throw new TypeError(\"provide a response_type or response_types, not both\");\n        }\n        properties.response_types = [\n            metadata.response_type\n        ];\n        delete properties.response_type;\n    }\n}\nfunction getDefaultsForEndpoint(endpoint, issuer, properties) {\n    if (!issuer[`${endpoint}_endpoint`]) return;\n    const tokenEndpointAuthMethod = properties.token_endpoint_auth_method;\n    const tokenEndpointAuthSigningAlg = properties.token_endpoint_auth_signing_alg;\n    const eam = `${endpoint}_endpoint_auth_method`;\n    const easa = `${endpoint}_endpoint_auth_signing_alg`;\n    if (properties[eam] === undefined && properties[easa] === undefined) {\n        if (tokenEndpointAuthMethod !== undefined) {\n            properties[eam] = tokenEndpointAuthMethod;\n        }\n        if (tokenEndpointAuthSigningAlg !== undefined) {\n            properties[easa] = tokenEndpointAuthSigningAlg;\n        }\n    }\n}\nclass BaseClient {\n    #metadata;\n    #issuer;\n    #aadIssValidation;\n    #additionalAuthorizedParties;\n    constructor(issuer, aadIssValidation, metadata = {}, jwks, options){\n        this.#metadata = new Map();\n        this.#issuer = issuer;\n        this.#aadIssValidation = aadIssValidation;\n        if (typeof metadata.client_id !== \"string\" || !metadata.client_id) {\n            throw new TypeError(\"client_id is required\");\n        }\n        const properties = {\n            grant_types: [\n                \"authorization_code\"\n            ],\n            id_token_signed_response_alg: \"RS256\",\n            authorization_signed_response_alg: \"RS256\",\n            response_types: [\n                \"code\"\n            ],\n            token_endpoint_auth_method: \"client_secret_basic\",\n            ...this.fapi1() ? {\n                grant_types: [\n                    \"authorization_code\",\n                    \"implicit\"\n                ],\n                id_token_signed_response_alg: \"PS256\",\n                authorization_signed_response_alg: \"PS256\",\n                response_types: [\n                    \"code id_token\"\n                ],\n                tls_client_certificate_bound_access_tokens: true,\n                token_endpoint_auth_method: undefined\n            } : undefined,\n            ...this.fapi2() ? {\n                id_token_signed_response_alg: \"PS256\",\n                authorization_signed_response_alg: \"PS256\",\n                token_endpoint_auth_method: undefined\n            } : undefined,\n            ...metadata\n        };\n        if (this.fapi()) {\n            switch(properties.token_endpoint_auth_method){\n                case \"self_signed_tls_client_auth\":\n                case \"tls_client_auth\":\n                    break;\n                case \"private_key_jwt\":\n                    if (!jwks) {\n                        throw new TypeError(\"jwks is required\");\n                    }\n                    break;\n                case undefined:\n                    throw new TypeError(\"token_endpoint_auth_method is required\");\n                default:\n                    throw new TypeError(\"invalid or unsupported token_endpoint_auth_method\");\n            }\n        }\n        if (this.fapi2()) {\n            if (properties.tls_client_certificate_bound_access_tokens && properties.dpop_bound_access_tokens) {\n                throw new TypeError(\"either tls_client_certificate_bound_access_tokens or dpop_bound_access_tokens must be set to true\");\n            }\n            if (!properties.tls_client_certificate_bound_access_tokens && !properties.dpop_bound_access_tokens) {\n                throw new TypeError(\"either tls_client_certificate_bound_access_tokens or dpop_bound_access_tokens must be set to true\");\n            }\n        }\n        handleCommonMistakes(this, metadata, properties);\n        assertSigningAlgValuesSupport(\"token\", this.issuer, properties);\n        [\n            \"introspection\",\n            \"revocation\"\n        ].forEach((endpoint)=>{\n            getDefaultsForEndpoint(endpoint, this.issuer, properties);\n            assertSigningAlgValuesSupport(endpoint, this.issuer, properties);\n        });\n        Object.entries(properties).forEach(([key, value])=>{\n            this.#metadata.set(key, value);\n            if (!this[key]) {\n                Object.defineProperty(this, key, {\n                    get () {\n                        return this.#metadata.get(key);\n                    },\n                    enumerable: true\n                });\n            }\n        });\n        if (jwks !== undefined) {\n            const keystore = getKeystore.call(this, jwks);\n            keystores.set(this, keystore);\n        }\n        if (options != null && options.additionalAuthorizedParties) {\n            this.#additionalAuthorizedParties = clone(options.additionalAuthorizedParties);\n        }\n        this[CLOCK_TOLERANCE] = 0;\n    }\n    authorizationUrl(params = {}) {\n        if (!isPlainObject(params)) {\n            throw new TypeError(\"params must be a plain object\");\n        }\n        assertIssuerConfiguration(this.issuer, \"authorization_endpoint\");\n        const target = new URL(this.issuer.authorization_endpoint);\n        for (const [name, value] of Object.entries(authorizationParams.call(this, params))){\n            if (Array.isArray(value)) {\n                target.searchParams.delete(name);\n                for (const member of value){\n                    target.searchParams.append(name, member);\n                }\n            } else {\n                target.searchParams.set(name, value);\n            }\n        }\n        // TODO: is the replace needed?\n        return target.href.replace(/\\+/g, \"%20\");\n    }\n    authorizationPost(params = {}) {\n        if (!isPlainObject(params)) {\n            throw new TypeError(\"params must be a plain object\");\n        }\n        const inputs = authorizationParams.call(this, params);\n        const formInputs = Object.keys(inputs).map((name)=>`<input type=\"hidden\" name=\"${name}\" value=\"${inputs[name]}\"/>`).join(\"\\n\");\n        return `<!DOCTYPE html>\n<head>\n<title>Requesting Authorization</title>\n</head>\n<body onload=\"javascript:document.forms[0].submit()\">\n<form method=\"post\" action=\"${this.issuer.authorization_endpoint}\">\n  ${formInputs}\n</form>\n</body>\n</html>`;\n    }\n    endSessionUrl(params = {}) {\n        assertIssuerConfiguration(this.issuer, \"end_session_endpoint\");\n        const { 0: postLogout, length } = this.post_logout_redirect_uris || [];\n        const { post_logout_redirect_uri = length === 1 ? postLogout : undefined } = params;\n        let id_token_hint;\n        ({ id_token_hint, ...params } = params);\n        if (id_token_hint instanceof TokenSet) {\n            if (!id_token_hint.id_token) {\n                throw new TypeError(\"id_token not present in TokenSet\");\n            }\n            id_token_hint = id_token_hint.id_token;\n        }\n        const target = url.parse(this.issuer.end_session_endpoint);\n        const query = defaults(getSearchParams(this.issuer.end_session_endpoint), params, {\n            post_logout_redirect_uri,\n            client_id: this.client_id\n        }, {\n            id_token_hint\n        });\n        Object.entries(query).forEach(([key, value])=>{\n            if (value === null || value === undefined) {\n                delete query[key];\n            }\n        });\n        target.search = null;\n        target.query = query;\n        return url.format(target);\n    }\n    callbackParams(input) {\n        const isIncomingMessage = input instanceof stdhttp.IncomingMessage || input && input.method && input.url;\n        const isString = typeof input === \"string\";\n        if (!isString && !isIncomingMessage) {\n            throw new TypeError(\"#callbackParams only accepts string urls, http.IncomingMessage or a lookalike\");\n        }\n        if (isIncomingMessage) {\n            switch(input.method){\n                case \"GET\":\n                    return pickCb(getSearchParams(input.url));\n                case \"POST\":\n                    if (input.body === undefined) {\n                        throw new TypeError(\"incoming message body missing, include a body parser prior to this method call\");\n                    }\n                    switch(typeof input.body){\n                        case \"object\":\n                        case \"string\":\n                            if (Buffer.isBuffer(input.body)) {\n                                return pickCb(querystring.parse(input.body.toString(\"utf-8\")));\n                            }\n                            if (typeof input.body === \"string\") {\n                                return pickCb(querystring.parse(input.body));\n                            }\n                            return pickCb(input.body);\n                        default:\n                            throw new TypeError(\"invalid IncomingMessage body object\");\n                    }\n                default:\n                    throw new TypeError(\"invalid IncomingMessage method\");\n            }\n        } else {\n            return pickCb(getSearchParams(input));\n        }\n    }\n    async callback(redirectUri, parameters, checks = {}, { exchangeBody, clientAssertionPayload, DPoP } = {}) {\n        let params = pickCb(parameters);\n        if (checks.jarm && !(\"response\" in parameters)) {\n            throw new RPError({\n                message: \"expected a JARM response\",\n                checks,\n                params\n            });\n        } else if (\"response\" in parameters) {\n            const decrypted = await this.decryptJARM(params.response);\n            params = await this.validateJARM(decrypted);\n        }\n        if (this.default_max_age && !checks.max_age) {\n            checks.max_age = this.default_max_age;\n        }\n        if (params.state && !checks.state) {\n            throw new TypeError(\"checks.state argument is missing\");\n        }\n        if (!params.state && checks.state) {\n            throw new RPError({\n                message: \"state missing from the response\",\n                checks,\n                params\n            });\n        }\n        if (checks.state !== params.state) {\n            throw new RPError({\n                printf: [\n                    \"state mismatch, expected %s, got: %s\",\n                    checks.state,\n                    params.state\n                ],\n                checks,\n                params\n            });\n        }\n        if (\"iss\" in params) {\n            assertIssuerConfiguration(this.issuer, \"issuer\");\n            if (params.iss !== this.issuer.issuer) {\n                throw new RPError({\n                    printf: [\n                        \"iss mismatch, expected %s, got: %s\",\n                        this.issuer.issuer,\n                        params.iss\n                    ],\n                    params\n                });\n            }\n        } else if (this.issuer.authorization_response_iss_parameter_supported && !(\"id_token\" in params) && !(\"response\" in parameters)) {\n            throw new RPError({\n                message: \"iss missing from the response\",\n                params\n            });\n        }\n        if (params.error) {\n            throw new OPError(params);\n        }\n        const RESPONSE_TYPE_REQUIRED_PARAMS = {\n            code: [\n                \"code\"\n            ],\n            id_token: [\n                \"id_token\"\n            ],\n            token: [\n                \"access_token\",\n                \"token_type\"\n            ]\n        };\n        if (checks.response_type) {\n            for (const type of checks.response_type.split(\" \")){\n                if (type === \"none\") {\n                    if (params.code || params.id_token || params.access_token) {\n                        throw new RPError({\n                            message: 'unexpected params encountered for \"none\" response',\n                            checks,\n                            params\n                        });\n                    }\n                } else {\n                    for (const param of RESPONSE_TYPE_REQUIRED_PARAMS[type]){\n                        if (!params[param]) {\n                            throw new RPError({\n                                message: `${param} missing from response`,\n                                checks,\n                                params\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if (params.id_token) {\n            const tokenset = new TokenSet(params);\n            await this.decryptIdToken(tokenset);\n            await this.validateIdToken(tokenset, checks.nonce, \"authorization\", checks.max_age, checks.state);\n            if (!params.code) {\n                return tokenset;\n            }\n        }\n        if (params.code) {\n            const tokenset = await this.grant({\n                ...exchangeBody,\n                grant_type: \"authorization_code\",\n                code: params.code,\n                redirect_uri: redirectUri,\n                code_verifier: checks.code_verifier\n            }, {\n                clientAssertionPayload,\n                DPoP\n            });\n            await this.decryptIdToken(tokenset);\n            await this.validateIdToken(tokenset, checks.nonce, \"token\", checks.max_age);\n            if (params.session_state) {\n                tokenset.session_state = params.session_state;\n            }\n            return tokenset;\n        }\n        return new TokenSet(params);\n    }\n    async oauthCallback(redirectUri, parameters, checks = {}, { exchangeBody, clientAssertionPayload, DPoP } = {}) {\n        let params = pickCb(parameters);\n        if (checks.jarm && !(\"response\" in parameters)) {\n            throw new RPError({\n                message: \"expected a JARM response\",\n                checks,\n                params\n            });\n        } else if (\"response\" in parameters) {\n            const decrypted = await this.decryptJARM(params.response);\n            params = await this.validateJARM(decrypted);\n        }\n        if (params.state && !checks.state) {\n            throw new TypeError(\"checks.state argument is missing\");\n        }\n        if (!params.state && checks.state) {\n            throw new RPError({\n                message: \"state missing from the response\",\n                checks,\n                params\n            });\n        }\n        if (checks.state !== params.state) {\n            throw new RPError({\n                printf: [\n                    \"state mismatch, expected %s, got: %s\",\n                    checks.state,\n                    params.state\n                ],\n                checks,\n                params\n            });\n        }\n        if (\"iss\" in params) {\n            assertIssuerConfiguration(this.issuer, \"issuer\");\n            if (params.iss !== this.issuer.issuer) {\n                throw new RPError({\n                    printf: [\n                        \"iss mismatch, expected %s, got: %s\",\n                        this.issuer.issuer,\n                        params.iss\n                    ],\n                    params\n                });\n            }\n        } else if (this.issuer.authorization_response_iss_parameter_supported && !(\"id_token\" in params) && !(\"response\" in parameters)) {\n            throw new RPError({\n                message: \"iss missing from the response\",\n                params\n            });\n        }\n        if (params.error) {\n            throw new OPError(params);\n        }\n        if (typeof params.id_token === \"string\" && params.id_token.length) {\n            throw new RPError({\n                message: \"id_token detected in the response, you must use client.callback() instead of client.oauthCallback()\",\n                params\n            });\n        }\n        delete params.id_token;\n        const RESPONSE_TYPE_REQUIRED_PARAMS = {\n            code: [\n                \"code\"\n            ],\n            token: [\n                \"access_token\",\n                \"token_type\"\n            ]\n        };\n        if (checks.response_type) {\n            for (const type of checks.response_type.split(\" \")){\n                if (type === \"none\") {\n                    if (params.code || params.id_token || params.access_token) {\n                        throw new RPError({\n                            message: 'unexpected params encountered for \"none\" response',\n                            checks,\n                            params\n                        });\n                    }\n                }\n                if (RESPONSE_TYPE_REQUIRED_PARAMS[type]) {\n                    for (const param of RESPONSE_TYPE_REQUIRED_PARAMS[type]){\n                        if (!params[param]) {\n                            throw new RPError({\n                                message: `${param} missing from response`,\n                                checks,\n                                params\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if (params.code) {\n            const tokenset = await this.grant({\n                ...exchangeBody,\n                grant_type: \"authorization_code\",\n                code: params.code,\n                redirect_uri: redirectUri,\n                code_verifier: checks.code_verifier\n            }, {\n                clientAssertionPayload,\n                DPoP\n            });\n            if (typeof tokenset.id_token === \"string\" && tokenset.id_token.length) {\n                throw new RPError({\n                    message: \"id_token detected in the response, you must use client.callback() instead of client.oauthCallback()\",\n                    params\n                });\n            }\n            delete tokenset.id_token;\n            return tokenset;\n        }\n        return new TokenSet(params);\n    }\n    async decryptIdToken(token) {\n        if (!this.id_token_encrypted_response_alg) {\n            return token;\n        }\n        let idToken = token;\n        if (idToken instanceof TokenSet) {\n            if (!idToken.id_token) {\n                throw new TypeError(\"id_token not present in TokenSet\");\n            }\n            idToken = idToken.id_token;\n        }\n        const expectedAlg = this.id_token_encrypted_response_alg;\n        const expectedEnc = this.id_token_encrypted_response_enc;\n        const result = await this.decryptJWE(idToken, expectedAlg, expectedEnc);\n        if (token instanceof TokenSet) {\n            token.id_token = result;\n            return token;\n        }\n        return result;\n    }\n    async validateJWTUserinfo(body) {\n        const expectedAlg = this.userinfo_signed_response_alg;\n        return this.validateJWT(body, expectedAlg, []);\n    }\n    async decryptJARM(response) {\n        if (!this.authorization_encrypted_response_alg) {\n            return response;\n        }\n        const expectedAlg = this.authorization_encrypted_response_alg;\n        const expectedEnc = this.authorization_encrypted_response_enc;\n        return this.decryptJWE(response, expectedAlg, expectedEnc);\n    }\n    async decryptJWTUserinfo(body) {\n        if (!this.userinfo_encrypted_response_alg) {\n            return body;\n        }\n        const expectedAlg = this.userinfo_encrypted_response_alg;\n        const expectedEnc = this.userinfo_encrypted_response_enc;\n        return this.decryptJWE(body, expectedAlg, expectedEnc);\n    }\n    async decryptJWE(jwe, expectedAlg, expectedEnc = \"A128CBC-HS256\") {\n        const header = JSON.parse(base64url.decode(jwe.split(\".\")[0]));\n        if (header.alg !== expectedAlg) {\n            throw new RPError({\n                printf: [\n                    \"unexpected JWE alg received, expected %s, got: %s\",\n                    expectedAlg,\n                    header.alg\n                ],\n                jwt: jwe\n            });\n        }\n        if (header.enc !== expectedEnc) {\n            throw new RPError({\n                printf: [\n                    \"unexpected JWE enc received, expected %s, got: %s\",\n                    expectedEnc,\n                    header.enc\n                ],\n                jwt: jwe\n            });\n        }\n        const getPlaintext = (result)=>new TextDecoder().decode(result.plaintext);\n        let plaintext;\n        if (expectedAlg.match(/^(?:RSA|ECDH)/)) {\n            const keystore = await keystores.get(this);\n            const protectedHeader = jose.decodeProtectedHeader(jwe);\n            for (const key of keystore.all({\n                ...protectedHeader,\n                use: \"enc\"\n            })){\n                plaintext = await jose.compactDecrypt(jwe, await key.keyObject(protectedHeader.alg)).then(getPlaintext, ()=>{});\n                if (plaintext) break;\n            }\n        } else {\n            plaintext = await jose.compactDecrypt(jwe, this.secretForAlg(expectedAlg === \"dir\" ? expectedEnc : expectedAlg)).then(getPlaintext, ()=>{});\n        }\n        if (!plaintext) {\n            throw new RPError({\n                message: \"failed to decrypt JWE\",\n                jwt: jwe\n            });\n        }\n        return plaintext;\n    }\n    async validateIdToken(tokenSet, nonce, returnedBy, maxAge, state) {\n        let idToken = tokenSet;\n        const expectedAlg = this.id_token_signed_response_alg;\n        const isTokenSet = idToken instanceof TokenSet;\n        if (isTokenSet) {\n            if (!idToken.id_token) {\n                throw new TypeError(\"id_token not present in TokenSet\");\n            }\n            idToken = idToken.id_token;\n        }\n        idToken = String(idToken);\n        const timestamp = now();\n        const { protected: header, payload, key } = await this.validateJWT(idToken, expectedAlg);\n        if (typeof maxAge === \"number\" || maxAge !== skipMaxAgeCheck && this.require_auth_time) {\n            if (!payload.auth_time) {\n                throw new RPError({\n                    message: \"missing required JWT property auth_time\",\n                    jwt: idToken\n                });\n            }\n            if (typeof payload.auth_time !== \"number\") {\n                throw new RPError({\n                    message: \"JWT auth_time claim must be a JSON numeric value\",\n                    jwt: idToken\n                });\n            }\n        }\n        if (typeof maxAge === \"number\" && payload.auth_time + maxAge < timestamp - this[CLOCK_TOLERANCE]) {\n            throw new RPError({\n                printf: [\n                    \"too much time has elapsed since the last End-User authentication, max_age %i, auth_time: %i, now %i\",\n                    maxAge,\n                    payload.auth_time,\n                    timestamp - this[CLOCK_TOLERANCE]\n                ],\n                now: timestamp,\n                tolerance: this[CLOCK_TOLERANCE],\n                auth_time: payload.auth_time,\n                jwt: idToken\n            });\n        }\n        if (nonce !== skipNonceCheck && (payload.nonce || nonce !== undefined) && payload.nonce !== nonce) {\n            throw new RPError({\n                printf: [\n                    \"nonce mismatch, expected %s, got: %s\",\n                    nonce,\n                    payload.nonce\n                ],\n                jwt: idToken\n            });\n        }\n        if (returnedBy === \"authorization\") {\n            if (!payload.at_hash && tokenSet.access_token) {\n                throw new RPError({\n                    message: \"missing required property at_hash\",\n                    jwt: idToken\n                });\n            }\n            if (!payload.c_hash && tokenSet.code) {\n                throw new RPError({\n                    message: \"missing required property c_hash\",\n                    jwt: idToken\n                });\n            }\n            if (this.fapi1()) {\n                if (!payload.s_hash && (tokenSet.state || state)) {\n                    throw new RPError({\n                        message: \"missing required property s_hash\",\n                        jwt: idToken\n                    });\n                }\n            }\n            if (payload.s_hash) {\n                if (!state) {\n                    throw new TypeError('cannot verify s_hash, \"checks.state\" property not provided');\n                }\n                try {\n                    tokenHash.validate({\n                        claim: \"s_hash\",\n                        source: \"state\"\n                    }, payload.s_hash, state, header.alg, key.jwk && key.jwk.crv);\n                } catch (err) {\n                    throw new RPError({\n                        message: err.message,\n                        jwt: idToken\n                    });\n                }\n            }\n        }\n        if (this.fapi() && payload.iat < timestamp - 3600) {\n            throw new RPError({\n                printf: [\n                    \"JWT issued too far in the past, now %i, iat %i\",\n                    timestamp,\n                    payload.iat\n                ],\n                now: timestamp,\n                tolerance: this[CLOCK_TOLERANCE],\n                iat: payload.iat,\n                jwt: idToken\n            });\n        }\n        if (tokenSet.access_token && payload.at_hash !== undefined) {\n            try {\n                tokenHash.validate({\n                    claim: \"at_hash\",\n                    source: \"access_token\"\n                }, payload.at_hash, tokenSet.access_token, header.alg, key.jwk && key.jwk.crv);\n            } catch (err) {\n                throw new RPError({\n                    message: err.message,\n                    jwt: idToken\n                });\n            }\n        }\n        if (tokenSet.code && payload.c_hash !== undefined) {\n            try {\n                tokenHash.validate({\n                    claim: \"c_hash\",\n                    source: \"code\"\n                }, payload.c_hash, tokenSet.code, header.alg, key.jwk && key.jwk.crv);\n            } catch (err) {\n                throw new RPError({\n                    message: err.message,\n                    jwt: idToken\n                });\n            }\n        }\n        return tokenSet;\n    }\n    async validateJWT(jwt, expectedAlg, required = [\n        \"iss\",\n        \"sub\",\n        \"aud\",\n        \"exp\",\n        \"iat\"\n    ]) {\n        const isSelfIssued = this.issuer.issuer === \"https://self-issued.me\";\n        const timestamp = now();\n        let header;\n        let payload;\n        try {\n            ({ header, payload } = decodeJWT(jwt, {\n                complete: true\n            }));\n        } catch (err) {\n            throw new RPError({\n                printf: [\n                    \"failed to decode JWT (%s: %s)\",\n                    err.name,\n                    err.message\n                ],\n                jwt\n            });\n        }\n        if (header.alg !== expectedAlg) {\n            throw new RPError({\n                printf: [\n                    \"unexpected JWT alg received, expected %s, got: %s\",\n                    expectedAlg,\n                    header.alg\n                ],\n                jwt\n            });\n        }\n        if (isSelfIssued) {\n            required = [\n                ...required,\n                \"sub_jwk\"\n            ];\n        }\n        required.forEach(verifyPresence.bind(undefined, payload, jwt));\n        if (payload.iss !== undefined) {\n            let expectedIss = this.issuer.issuer;\n            if (this.#aadIssValidation) {\n                expectedIss = this.issuer.issuer.replace(\"{tenantid}\", payload.tid);\n            }\n            if (payload.iss !== expectedIss) {\n                throw new RPError({\n                    printf: [\n                        \"unexpected iss value, expected %s, got: %s\",\n                        expectedIss,\n                        payload.iss\n                    ],\n                    jwt\n                });\n            }\n        }\n        if (payload.iat !== undefined) {\n            if (typeof payload.iat !== \"number\") {\n                throw new RPError({\n                    message: \"JWT iat claim must be a JSON numeric value\",\n                    jwt\n                });\n            }\n        }\n        if (payload.nbf !== undefined) {\n            if (typeof payload.nbf !== \"number\") {\n                throw new RPError({\n                    message: \"JWT nbf claim must be a JSON numeric value\",\n                    jwt\n                });\n            }\n            if (payload.nbf > timestamp + this[CLOCK_TOLERANCE]) {\n                throw new RPError({\n                    printf: [\n                        \"JWT not active yet, now %i, nbf %i\",\n                        timestamp + this[CLOCK_TOLERANCE],\n                        payload.nbf\n                    ],\n                    now: timestamp,\n                    tolerance: this[CLOCK_TOLERANCE],\n                    nbf: payload.nbf,\n                    jwt\n                });\n            }\n        }\n        if (payload.exp !== undefined) {\n            if (typeof payload.exp !== \"number\") {\n                throw new RPError({\n                    message: \"JWT exp claim must be a JSON numeric value\",\n                    jwt\n                });\n            }\n            if (timestamp - this[CLOCK_TOLERANCE] >= payload.exp) {\n                throw new RPError({\n                    printf: [\n                        \"JWT expired, now %i, exp %i\",\n                        timestamp - this[CLOCK_TOLERANCE],\n                        payload.exp\n                    ],\n                    now: timestamp,\n                    tolerance: this[CLOCK_TOLERANCE],\n                    exp: payload.exp,\n                    jwt\n                });\n            }\n        }\n        if (payload.aud !== undefined) {\n            if (Array.isArray(payload.aud)) {\n                if (payload.aud.length > 1 && !payload.azp) {\n                    throw new RPError({\n                        message: \"missing required JWT property azp\",\n                        jwt\n                    });\n                }\n                if (!payload.aud.includes(this.client_id)) {\n                    throw new RPError({\n                        printf: [\n                            \"aud is missing the client_id, expected %s to be included in %j\",\n                            this.client_id,\n                            payload.aud\n                        ],\n                        jwt\n                    });\n                }\n            } else if (payload.aud !== this.client_id) {\n                throw new RPError({\n                    printf: [\n                        \"aud mismatch, expected %s, got: %s\",\n                        this.client_id,\n                        payload.aud\n                    ],\n                    jwt\n                });\n            }\n        }\n        if (payload.azp !== undefined) {\n            let additionalAuthorizedParties = this.#additionalAuthorizedParties;\n            if (typeof additionalAuthorizedParties === \"string\") {\n                additionalAuthorizedParties = [\n                    this.client_id,\n                    additionalAuthorizedParties\n                ];\n            } else if (Array.isArray(additionalAuthorizedParties)) {\n                additionalAuthorizedParties = [\n                    this.client_id,\n                    ...additionalAuthorizedParties\n                ];\n            } else {\n                additionalAuthorizedParties = [\n                    this.client_id\n                ];\n            }\n            if (!additionalAuthorizedParties.includes(payload.azp)) {\n                throw new RPError({\n                    printf: [\n                        \"azp mismatch, got: %s\",\n                        payload.azp\n                    ],\n                    jwt\n                });\n            }\n        }\n        let keys;\n        if (isSelfIssued) {\n            try {\n                assert(isPlainObject(payload.sub_jwk));\n                const key = await jose.importJWK(payload.sub_jwk, header.alg);\n                assert.equal(key.type, \"public\");\n                keys = [\n                    {\n                        keyObject () {\n                            return key;\n                        }\n                    }\n                ];\n            } catch (err) {\n                throw new RPError({\n                    message: \"failed to use sub_jwk claim as an asymmetric JSON Web Key\",\n                    jwt\n                });\n            }\n            if (await jose.calculateJwkThumbprint(payload.sub_jwk) !== payload.sub) {\n                throw new RPError({\n                    message: \"failed to match the subject with sub_jwk\",\n                    jwt\n                });\n            }\n        } else if (header.alg.startsWith(\"HS\")) {\n            keys = [\n                this.secretForAlg(header.alg)\n            ];\n        } else if (header.alg !== \"none\") {\n            keys = await queryKeyStore.call(this.issuer, {\n                ...header,\n                use: \"sig\"\n            });\n        }\n        if (!keys && header.alg === \"none\") {\n            return {\n                protected: header,\n                payload\n            };\n        }\n        for (const key of keys){\n            const verified = await jose.compactVerify(jwt, key instanceof Uint8Array ? key : await key.keyObject(header.alg)).catch(()=>{});\n            if (verified) {\n                return {\n                    payload,\n                    protected: verified.protectedHeader,\n                    key\n                };\n            }\n        }\n        throw new RPError({\n            message: \"failed to validate JWT signature\",\n            jwt\n        });\n    }\n    async refresh(refreshToken, { exchangeBody, clientAssertionPayload, DPoP } = {}) {\n        let token = refreshToken;\n        if (token instanceof TokenSet) {\n            if (!token.refresh_token) {\n                throw new TypeError(\"refresh_token not present in TokenSet\");\n            }\n            token = token.refresh_token;\n        }\n        const tokenset = await this.grant({\n            ...exchangeBody,\n            grant_type: \"refresh_token\",\n            refresh_token: String(token)\n        }, {\n            clientAssertionPayload,\n            DPoP\n        });\n        if (tokenset.id_token) {\n            await this.decryptIdToken(tokenset);\n            await this.validateIdToken(tokenset, skipNonceCheck, \"token\", skipMaxAgeCheck);\n            if (refreshToken instanceof TokenSet && refreshToken.id_token) {\n                const expectedSub = refreshToken.claims().sub;\n                const actualSub = tokenset.claims().sub;\n                if (actualSub !== expectedSub) {\n                    throw new RPError({\n                        printf: [\n                            \"sub mismatch, expected %s, got: %s\",\n                            expectedSub,\n                            actualSub\n                        ],\n                        jwt: tokenset.id_token\n                    });\n                }\n            }\n        }\n        return tokenset;\n    }\n    async requestResource(resourceUrl, accessToken, { method, headers, body, DPoP, tokenType = DPoP ? \"DPoP\" : accessToken instanceof TokenSet ? accessToken.token_type : \"Bearer\" } = {}, retry) {\n        if (accessToken instanceof TokenSet) {\n            if (!accessToken.access_token) {\n                throw new TypeError(\"access_token not present in TokenSet\");\n            }\n            accessToken = accessToken.access_token;\n        }\n        if (!accessToken) {\n            throw new TypeError(\"no access token provided\");\n        } else if (typeof accessToken !== \"string\") {\n            throw new TypeError(\"invalid access token provided\");\n        }\n        const requestOpts = {\n            headers: {\n                Authorization: authorizationHeaderValue(accessToken, tokenType),\n                ...headers\n            },\n            body\n        };\n        const mTLS = !!this.tls_client_certificate_bound_access_tokens;\n        const response = await request.call(this, {\n            ...requestOpts,\n            responseType: \"buffer\",\n            method,\n            url: resourceUrl\n        }, {\n            accessToken,\n            mTLS,\n            DPoP\n        });\n        const wwwAuthenticate = response.headers[\"www-authenticate\"];\n        if (retry !== retryAttempt && wwwAuthenticate && wwwAuthenticate.toLowerCase().startsWith(\"dpop \") && parseWwwAuthenticate(wwwAuthenticate).error === \"use_dpop_nonce\") {\n            return this.requestResource(resourceUrl, accessToken, {\n                method,\n                headers,\n                body,\n                DPoP,\n                tokenType\n            });\n        }\n        return response;\n    }\n    async userinfo(accessToken, { method = \"GET\", via = \"header\", tokenType, params, DPoP } = {}) {\n        assertIssuerConfiguration(this.issuer, \"userinfo_endpoint\");\n        const options = {\n            tokenType,\n            method: String(method).toUpperCase(),\n            DPoP\n        };\n        if (options.method !== \"GET\" && options.method !== \"POST\") {\n            throw new TypeError(\"#userinfo() method can only be POST or a GET\");\n        }\n        if (via === \"body\" && options.method !== \"POST\") {\n            throw new TypeError(\"can only send body on POST\");\n        }\n        const jwt = !!(this.userinfo_signed_response_alg || this.userinfo_encrypted_response_alg);\n        if (jwt) {\n            options.headers = {\n                Accept: \"application/jwt\"\n            };\n        } else {\n            options.headers = {\n                Accept: \"application/json\"\n            };\n        }\n        const mTLS = !!this.tls_client_certificate_bound_access_tokens;\n        let targetUrl;\n        if (mTLS && this.issuer.mtls_endpoint_aliases) {\n            targetUrl = this.issuer.mtls_endpoint_aliases.userinfo_endpoint;\n        }\n        targetUrl = new URL(targetUrl || this.issuer.userinfo_endpoint);\n        if (via === \"body\") {\n            options.headers.Authorization = undefined;\n            options.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n            options.body = new URLSearchParams();\n            options.body.append(\"access_token\", accessToken instanceof TokenSet ? accessToken.access_token : accessToken);\n        }\n        // handle additional parameters, GET via querystring, POST via urlencoded body\n        if (params) {\n            if (options.method === \"GET\") {\n                Object.entries(params).forEach(([key, value])=>{\n                    targetUrl.searchParams.append(key, value);\n                });\n            } else if (options.body) {\n                // POST && via body\n                Object.entries(params).forEach(([key, value])=>{\n                    options.body.append(key, value);\n                });\n            } else {\n                // POST && via header\n                options.body = new URLSearchParams();\n                options.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n                Object.entries(params).forEach(([key, value])=>{\n                    options.body.append(key, value);\n                });\n            }\n        }\n        if (options.body) {\n            options.body = options.body.toString();\n        }\n        const response = await this.requestResource(targetUrl, accessToken, options);\n        let parsed = processResponse(response, {\n            bearer: true\n        });\n        if (jwt) {\n            if (!/^application\\/jwt/.test(response.headers[\"content-type\"])) {\n                throw new RPError({\n                    message: \"expected application/jwt response from the userinfo_endpoint\",\n                    response\n                });\n            }\n            const body = response.body.toString();\n            const userinfo = await this.decryptJWTUserinfo(body);\n            if (!this.userinfo_signed_response_alg) {\n                try {\n                    parsed = JSON.parse(userinfo);\n                    assert(isPlainObject(parsed));\n                } catch (err) {\n                    throw new RPError({\n                        message: \"failed to parse userinfo JWE payload as JSON\",\n                        jwt: userinfo\n                    });\n                }\n            } else {\n                ({ payload: parsed } = await this.validateJWTUserinfo(userinfo));\n            }\n        } else {\n            try {\n                parsed = JSON.parse(response.body);\n            } catch (err) {\n                Object.defineProperty(err, \"response\", {\n                    value: response\n                });\n                throw err;\n            }\n        }\n        if (accessToken instanceof TokenSet && accessToken.id_token) {\n            const expectedSub = accessToken.claims().sub;\n            if (parsed.sub !== expectedSub) {\n                throw new RPError({\n                    printf: [\n                        \"userinfo sub mismatch, expected %s, got: %s\",\n                        expectedSub,\n                        parsed.sub\n                    ],\n                    body: parsed,\n                    jwt: accessToken.id_token\n                });\n            }\n        }\n        return parsed;\n    }\n    encryptionSecret(len) {\n        const hash = len <= 256 ? \"sha256\" : len <= 384 ? \"sha384\" : len <= 512 ? \"sha512\" : false;\n        if (!hash) {\n            throw new Error(\"unsupported symmetric encryption key derivation\");\n        }\n        return crypto.createHash(hash).update(this.client_secret).digest().slice(0, len / 8);\n    }\n    secretForAlg(alg) {\n        if (!this.client_secret) {\n            throw new TypeError(\"client_secret is required\");\n        }\n        if (/^A(\\d{3})(?:GCM)?KW$/.test(alg)) {\n            return this.encryptionSecret(parseInt(RegExp.$1, 10));\n        }\n        if (/^A(\\d{3})(?:GCM|CBC-HS(\\d{3}))$/.test(alg)) {\n            return this.encryptionSecret(parseInt(RegExp.$2 || RegExp.$1, 10));\n        }\n        return new TextEncoder().encode(this.client_secret);\n    }\n    async grant(body, { clientAssertionPayload, DPoP } = {}, retry) {\n        assertIssuerConfiguration(this.issuer, \"token_endpoint\");\n        const response = await authenticatedPost.call(this, \"token\", {\n            form: body,\n            responseType: \"json\"\n        }, {\n            clientAssertionPayload,\n            DPoP\n        });\n        let responseBody;\n        try {\n            responseBody = processResponse(response);\n        } catch (err) {\n            if (retry !== retryAttempt && err instanceof OPError && err.error === \"use_dpop_nonce\") {\n                return this.grant(body, {\n                    clientAssertionPayload,\n                    DPoP\n                }, retryAttempt);\n            }\n            throw err;\n        }\n        return new TokenSet(responseBody);\n    }\n    async deviceAuthorization(params = {}, { exchangeBody, clientAssertionPayload, DPoP } = {}) {\n        assertIssuerConfiguration(this.issuer, \"device_authorization_endpoint\");\n        assertIssuerConfiguration(this.issuer, \"token_endpoint\");\n        const body = authorizationParams.call(this, {\n            client_id: this.client_id,\n            redirect_uri: null,\n            response_type: null,\n            ...params\n        });\n        const response = await authenticatedPost.call(this, \"device_authorization\", {\n            responseType: \"json\",\n            form: body\n        }, {\n            clientAssertionPayload,\n            endpointAuthMethod: \"token\"\n        });\n        const responseBody = processResponse(response);\n        return new DeviceFlowHandle({\n            client: this,\n            exchangeBody,\n            clientAssertionPayload,\n            response: responseBody,\n            maxAge: params.max_age,\n            DPoP\n        });\n    }\n    async revoke(token, hint, { revokeBody, clientAssertionPayload } = {}) {\n        assertIssuerConfiguration(this.issuer, \"revocation_endpoint\");\n        if (hint !== undefined && typeof hint !== \"string\") {\n            throw new TypeError(\"hint must be a string\");\n        }\n        const form = {\n            ...revokeBody,\n            token\n        };\n        if (hint) {\n            form.token_type_hint = hint;\n        }\n        const response = await authenticatedPost.call(this, \"revocation\", {\n            form\n        }, {\n            clientAssertionPayload\n        });\n        processResponse(response, {\n            body: false\n        });\n    }\n    async introspect(token, hint, { introspectBody, clientAssertionPayload } = {}) {\n        assertIssuerConfiguration(this.issuer, \"introspection_endpoint\");\n        if (hint !== undefined && typeof hint !== \"string\") {\n            throw new TypeError(\"hint must be a string\");\n        }\n        const form = {\n            ...introspectBody,\n            token\n        };\n        if (hint) {\n            form.token_type_hint = hint;\n        }\n        const response = await authenticatedPost.call(this, \"introspection\", {\n            form,\n            responseType: \"json\"\n        }, {\n            clientAssertionPayload\n        });\n        const responseBody = processResponse(response);\n        return responseBody;\n    }\n    static async register(metadata, options = {}) {\n        const { initialAccessToken, jwks, ...clientOptions } = options;\n        assertIssuerConfiguration(this.issuer, \"registration_endpoint\");\n        if (jwks !== undefined && !(metadata.jwks || metadata.jwks_uri)) {\n            const keystore = await getKeystore.call(this, jwks);\n            metadata.jwks = keystore.toJWKS();\n        }\n        const response = await request.call(this, {\n            headers: {\n                Accept: \"application/json\",\n                ...initialAccessToken ? {\n                    Authorization: authorizationHeaderValue(initialAccessToken)\n                } : undefined\n            },\n            responseType: \"json\",\n            json: metadata,\n            url: this.issuer.registration_endpoint,\n            method: \"POST\"\n        });\n        const responseBody = processResponse(response, {\n            statusCode: 201,\n            bearer: true\n        });\n        return new this(responseBody, jwks, clientOptions);\n    }\n    get metadata() {\n        return clone(Object.fromEntries(this.#metadata.entries()));\n    }\n    static async fromUri(registrationClientUri, registrationAccessToken, jwks, clientOptions) {\n        const response = await request.call(this, {\n            method: \"GET\",\n            url: registrationClientUri,\n            responseType: \"json\",\n            headers: {\n                Authorization: authorizationHeaderValue(registrationAccessToken),\n                Accept: \"application/json\"\n            }\n        });\n        const responseBody = processResponse(response, {\n            bearer: true\n        });\n        return new this(responseBody, jwks, clientOptions);\n    }\n    async requestObject(requestObject = {}, { sign: signingAlgorithm = this.request_object_signing_alg || \"none\", encrypt: { alg: eKeyManagement = this.request_object_encryption_alg, enc: eContentEncryption = this.request_object_encryption_enc || \"A128CBC-HS256\" } = {} } = {}) {\n        if (!isPlainObject(requestObject)) {\n            throw new TypeError(\"requestObject must be a plain object\");\n        }\n        let signed;\n        let key;\n        const unix = now();\n        const header = {\n            alg: signingAlgorithm,\n            typ: \"oauth-authz-req+jwt\"\n        };\n        const payload = JSON.stringify(defaults({}, requestObject, {\n            iss: this.client_id,\n            aud: this.issuer.issuer,\n            client_id: this.client_id,\n            jti: random(),\n            iat: unix,\n            exp: unix + 300,\n            ...this.fapi() ? {\n                nbf: unix\n            } : undefined\n        }));\n        if (signingAlgorithm === \"none\") {\n            signed = [\n                base64url.encode(JSON.stringify(header)),\n                base64url.encode(payload),\n                \"\"\n            ].join(\".\");\n        } else {\n            const symmetric = signingAlgorithm.startsWith(\"HS\");\n            if (symmetric) {\n                key = this.secretForAlg(signingAlgorithm);\n            } else {\n                const keystore = await keystores.get(this);\n                if (!keystore) {\n                    throw new TypeError(`no keystore present for client, cannot sign using alg ${signingAlgorithm}`);\n                }\n                key = keystore.get({\n                    alg: signingAlgorithm,\n                    use: \"sig\"\n                });\n                if (!key) {\n                    throw new TypeError(`no key to sign with found for alg ${signingAlgorithm}`);\n                }\n            }\n            signed = await new jose.CompactSign(new TextEncoder().encode(payload)).setProtectedHeader({\n                ...header,\n                kid: symmetric ? undefined : key.jwk.kid\n            }).sign(symmetric ? key : await key.keyObject(signingAlgorithm));\n        }\n        if (!eKeyManagement) {\n            return signed;\n        }\n        const fields = {\n            alg: eKeyManagement,\n            enc: eContentEncryption,\n            cty: \"oauth-authz-req+jwt\"\n        };\n        if (fields.alg.match(/^(RSA|ECDH)/)) {\n            [key] = await queryKeyStore.call(this.issuer, {\n                alg: fields.alg,\n                use: \"enc\"\n            }, {\n                allowMulti: true\n            });\n        } else {\n            key = this.secretForAlg(fields.alg === \"dir\" ? fields.enc : fields.alg);\n        }\n        return new jose.CompactEncrypt(new TextEncoder().encode(signed)).setProtectedHeader({\n            ...fields,\n            kid: key instanceof Uint8Array ? undefined : key.jwk.kid\n        }).encrypt(key instanceof Uint8Array ? key : await key.keyObject(fields.alg));\n    }\n    async pushedAuthorizationRequest(params = {}, { clientAssertionPayload } = {}) {\n        assertIssuerConfiguration(this.issuer, \"pushed_authorization_request_endpoint\");\n        const body = {\n            ...\"request\" in params ? params : authorizationParams.call(this, params),\n            client_id: this.client_id\n        };\n        const response = await authenticatedPost.call(this, \"pushed_authorization_request\", {\n            responseType: \"json\",\n            form: body\n        }, {\n            clientAssertionPayload,\n            endpointAuthMethod: \"token\"\n        });\n        const responseBody = processResponse(response, {\n            statusCode: 201\n        });\n        if (!(\"expires_in\" in responseBody)) {\n            throw new RPError({\n                message: \"expected expires_in in Pushed Authorization Successful Response\",\n                response\n            });\n        }\n        if (typeof responseBody.expires_in !== \"number\") {\n            throw new RPError({\n                message: \"invalid expires_in value in Pushed Authorization Successful Response\",\n                response\n            });\n        }\n        if (!(\"request_uri\" in responseBody)) {\n            throw new RPError({\n                message: \"expected request_uri in Pushed Authorization Successful Response\",\n                response\n            });\n        }\n        if (typeof responseBody.request_uri !== \"string\") {\n            throw new RPError({\n                message: \"invalid request_uri value in Pushed Authorization Successful Response\",\n                response\n            });\n        }\n        return responseBody;\n    }\n    get issuer() {\n        return this.#issuer;\n    }\n    /* istanbul ignore next */ [inspect.custom]() {\n        return `${this.constructor.name} ${inspect(this.metadata, {\n            depth: Infinity,\n            colors: process.stdout.isTTY,\n            compact: false,\n            sorted: true\n        })}`;\n    }\n    fapi() {\n        return this.fapi1() || this.fapi2();\n    }\n    fapi1() {\n        return this.constructor.name === \"FAPI1Client\";\n    }\n    fapi2() {\n        return this.constructor.name === \"FAPI2Client\";\n    }\n    async validateJARM(response) {\n        const expectedAlg = this.authorization_signed_response_alg;\n        const { payload } = await this.validateJWT(response, expectedAlg, [\n            \"iss\",\n            \"exp\",\n            \"aud\"\n        ]);\n        return pickCb(payload);\n    }\n    /**\n   * @name dpopProof\n   * @api private\n   */ async dpopProof(payload, privateKeyInput, accessToken) {\n        if (!isPlainObject(payload)) {\n            throw new TypeError(\"payload must be a plain object\");\n        }\n        let privateKey;\n        if (isKeyObject(privateKeyInput)) {\n            privateKey = privateKeyInput;\n        } else if (privateKeyInput[Symbol.toStringTag] === \"CryptoKey\") {\n            privateKey = privateKeyInput;\n        } else if (jose.cryptoRuntime === \"node:crypto\") {\n            privateKey = crypto.createPrivateKey(privateKeyInput);\n        } else {\n            throw new TypeError(\"unrecognized crypto runtime\");\n        }\n        if (privateKey.type !== \"private\") {\n            throw new TypeError('\"DPoP\" option must be a private key');\n        }\n        let alg = determineDPoPAlgorithm.call(this, privateKey, privateKeyInput);\n        if (!alg) {\n            throw new TypeError(\"could not determine DPoP JWS Algorithm\");\n        }\n        return new jose.SignJWT({\n            ath: accessToken ? base64url.encode(crypto.createHash(\"sha256\").update(accessToken).digest()) : undefined,\n            ...payload\n        }).setProtectedHeader({\n            alg,\n            typ: \"dpop+jwt\",\n            jwk: await getJwk(privateKey, privateKeyInput)\n        }).setIssuedAt().setJti(random()).sign(privateKey);\n    }\n}\nfunction determineDPoPAlgorithmFromCryptoKey(cryptoKey) {\n    switch(cryptoKey.algorithm.name){\n        case \"Ed25519\":\n        case \"Ed448\":\n            return \"EdDSA\";\n        case \"ECDSA\":\n            {\n                switch(cryptoKey.algorithm.namedCurve){\n                    case \"P-256\":\n                        return \"ES256\";\n                    case \"P-384\":\n                        return \"ES384\";\n                    case \"P-521\":\n                        return \"ES512\";\n                    default:\n                        break;\n                }\n                break;\n            }\n        case \"RSASSA-PKCS1-v1_5\":\n            return `RS${cryptoKey.algorithm.hash.name.slice(4)}`;\n        case \"RSA-PSS\":\n            return `PS${cryptoKey.algorithm.hash.name.slice(4)}`;\n        default:\n            throw new TypeError(\"unsupported DPoP private key\");\n    }\n}\nlet determineDPoPAlgorithm;\nif (jose.cryptoRuntime === \"node:crypto\") {\n    determineDPoPAlgorithm = function(privateKey, privateKeyInput) {\n        if (privateKeyInput[Symbol.toStringTag] === \"CryptoKey\") {\n            return determineDPoPAlgorithmFromCryptoKey(privateKey);\n        }\n        switch(privateKey.asymmetricKeyType){\n            case \"ed25519\":\n            case \"ed448\":\n                return \"EdDSA\";\n            case \"ec\":\n                return determineEcAlgorithm(privateKey, privateKeyInput);\n            case \"rsa\":\n            case rsaPssParams && \"rsa-pss\":\n                return determineRsaAlgorithm(privateKey, privateKeyInput, this.issuer.dpop_signing_alg_values_supported);\n            default:\n                throw new TypeError(\"unsupported DPoP private key\");\n        }\n    };\n    const RSPS = /^(?:RS|PS)(?:256|384|512)$/;\n    function determineRsaAlgorithm(privateKey, privateKeyInput, valuesSupported) {\n        if (typeof privateKeyInput === \"object\" && privateKeyInput.format === \"jwk\" && privateKeyInput.key && privateKeyInput.key.alg) {\n            return privateKeyInput.key.alg;\n        }\n        if (Array.isArray(valuesSupported)) {\n            let candidates = valuesSupported.filter(RegExp.prototype.test.bind(RSPS));\n            if (privateKey.asymmetricKeyType === \"rsa-pss\") {\n                candidates = candidates.filter((value)=>value.startsWith(\"PS\"));\n            }\n            return [\n                \"PS256\",\n                \"PS384\",\n                \"PS512\",\n                \"RS256\",\n                \"RS384\",\n                \"RS384\"\n            ].find((preferred)=>candidates.includes(preferred));\n        }\n        return \"PS256\";\n    }\n    const p256 = Buffer.from([\n        42,\n        134,\n        72,\n        206,\n        61,\n        3,\n        1,\n        7\n    ]);\n    const p384 = Buffer.from([\n        43,\n        129,\n        4,\n        0,\n        34\n    ]);\n    const p521 = Buffer.from([\n        43,\n        129,\n        4,\n        0,\n        35\n    ]);\n    const secp256k1 = Buffer.from([\n        43,\n        129,\n        4,\n        0,\n        10\n    ]);\n    function determineEcAlgorithm(privateKey, privateKeyInput) {\n        // If input was a JWK\n        switch(typeof privateKeyInput === \"object\" && typeof privateKeyInput.key === \"object\" && privateKeyInput.key.crv){\n            case \"P-256\":\n                return \"ES256\";\n            case \"secp256k1\":\n                return \"ES256K\";\n            case \"P-384\":\n                return \"ES384\";\n            case \"P-512\":\n                return \"ES512\";\n            default:\n                break;\n        }\n        const buf = privateKey.export({\n            format: \"der\",\n            type: \"pkcs8\"\n        });\n        const i = buf[1] < 128 ? 17 : 18;\n        const len = buf[i];\n        const curveOid = buf.slice(i + 1, i + 1 + len);\n        if (curveOid.equals(p256)) {\n            return \"ES256\";\n        }\n        if (curveOid.equals(p384)) {\n            return \"ES384\";\n        }\n        if (curveOid.equals(p521)) {\n            return \"ES512\";\n        }\n        if (curveOid.equals(secp256k1)) {\n            return \"ES256K\";\n        }\n        throw new TypeError(\"unsupported DPoP private key curve\");\n    }\n} else {\n    determineDPoPAlgorithm = determineDPoPAlgorithmFromCryptoKey;\n}\nconst jwkCache = new WeakMap();\nasync function getJwk(keyObject, privateKeyInput) {\n    if (jose.cryptoRuntime === \"node:crypto\" && typeof privateKeyInput === \"object\" && typeof privateKeyInput.key === \"object\" && privateKeyInput.format === \"jwk\") {\n        return pick(privateKeyInput.key, \"kty\", \"crv\", \"x\", \"y\", \"e\", \"n\");\n    }\n    if (jwkCache.has(privateKeyInput)) {\n        return jwkCache.get(privateKeyInput);\n    }\n    const jwk = pick(await jose.exportJWK(keyObject), \"kty\", \"crv\", \"x\", \"y\", \"e\", \"n\");\n    if (isKeyObject(privateKeyInput) || jose.cryptoRuntime === \"WebCryptoAPI\") {\n        jwkCache.set(privateKeyInput, jwk);\n    }\n    return jwk;\n}\nmodule.exports = (issuer, aadIssValidation = false)=>class Client extends BaseClient {\n        constructor(...args){\n            super(issuer, aadIssValidation, ...args);\n        }\n        static get issuer() {\n            return issuer;\n        }\n    };\nmodule.exports.BaseClient = BaseClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/device_flow_handle.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/device_flow_handle.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { inspect } = __webpack_require__(/*! util */ \"util\");\nconst { RPError, OPError } = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst now = __webpack_require__(/*! ./helpers/unix_timestamp */ \"(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\");\nclass DeviceFlowHandle {\n    #aborted;\n    #client;\n    #clientAssertionPayload;\n    #DPoP;\n    #exchangeBody;\n    #expires_at;\n    #interval;\n    #maxAge;\n    #response;\n    constructor({ client, exchangeBody, clientAssertionPayload, response, maxAge, DPoP }){\n        [\n            \"verification_uri\",\n            \"user_code\",\n            \"device_code\"\n        ].forEach((prop)=>{\n            if (typeof response[prop] !== \"string\" || !response[prop]) {\n                throw new RPError(`expected ${prop} string to be returned by Device Authorization Response, got %j`, response[prop]);\n            }\n        });\n        if (!Number.isSafeInteger(response.expires_in)) {\n            throw new RPError(\"expected expires_in number to be returned by Device Authorization Response, got %j\", response.expires_in);\n        }\n        this.#expires_at = now() + response.expires_in;\n        this.#client = client;\n        this.#DPoP = DPoP;\n        this.#maxAge = maxAge;\n        this.#exchangeBody = exchangeBody;\n        this.#clientAssertionPayload = clientAssertionPayload;\n        this.#response = response;\n        this.#interval = response.interval * 1000 || 5000;\n    }\n    abort() {\n        this.#aborted = true;\n    }\n    async poll({ signal } = {}) {\n        if (signal && signal.aborted || this.#aborted) {\n            throw new RPError(\"polling aborted\");\n        }\n        if (this.expired()) {\n            throw new RPError(\"the device code %j has expired and the device authorization session has concluded\", this.device_code);\n        }\n        await new Promise((resolve)=>setTimeout(resolve, this.#interval));\n        let tokenset;\n        try {\n            tokenset = await this.#client.grant({\n                ...this.#exchangeBody,\n                grant_type: \"urn:ietf:params:oauth:grant-type:device_code\",\n                device_code: this.device_code\n            }, {\n                clientAssertionPayload: this.#clientAssertionPayload,\n                DPoP: this.#DPoP\n            });\n        } catch (err) {\n            switch(err instanceof OPError && err.error){\n                case \"slow_down\":\n                    this.#interval += 5000;\n                case \"authorization_pending\":\n                    return this.poll({\n                        signal\n                    });\n                default:\n                    throw err;\n            }\n        }\n        if (\"id_token\" in tokenset) {\n            await this.#client.decryptIdToken(tokenset);\n            await this.#client.validateIdToken(tokenset, undefined, \"token\", this.#maxAge);\n        }\n        return tokenset;\n    }\n    get device_code() {\n        return this.#response.device_code;\n    }\n    get user_code() {\n        return this.#response.user_code;\n    }\n    get verification_uri() {\n        return this.#response.verification_uri;\n    }\n    get verification_uri_complete() {\n        return this.#response.verification_uri_complete;\n    }\n    get expires_in() {\n        return Math.max.apply(null, [\n            this.#expires_at - now(),\n            0\n        ]);\n    }\n    expired() {\n        return this.expires_in === 0;\n    }\n    /* istanbul ignore next */ [inspect.custom]() {\n        return `${this.constructor.name} ${inspect(this.#response, {\n            depth: Infinity,\n            colors: process.stdout.isTTY,\n            compact: false,\n            sorted: true\n        })}`;\n    }\n}\nmodule.exports = DeviceFlowHandle;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/device_flow_handle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/errors.js":
/*!**************************************************!*\
  !*** ./node_modules/openid-client/lib/errors.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { format } = __webpack_require__(/*! util */ \"util\");\nclass OPError extends Error {\n    constructor({ error_description, error, error_uri, session_state, state, scope }, response){\n        super(!error_description ? error : `${error} (${error_description})`);\n        Object.assign(this, {\n            error\n        }, error_description && {\n            error_description\n        }, error_uri && {\n            error_uri\n        }, state && {\n            state\n        }, scope && {\n            scope\n        }, session_state && {\n            session_state\n        });\n        if (response) {\n            Object.defineProperty(this, \"response\", {\n                value: response\n            });\n        }\n        this.name = this.constructor.name;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\nclass RPError extends Error {\n    constructor(...args){\n        if (typeof args[0] === \"string\") {\n            super(format(...args));\n        } else {\n            const { message, printf, response, ...rest } = args[0];\n            if (printf) {\n                super(format(...printf));\n            } else {\n                super(message);\n            }\n            Object.assign(this, rest);\n            if (response) {\n                Object.defineProperty(this, \"response\", {\n                    value: response\n                });\n            }\n        }\n        this.name = this.constructor.name;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\nmodule.exports = {\n    OPError,\n    RPError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRUEsTUFBTSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRTNCLE1BQU1DLGdCQUFnQkM7SUFDcEJDLFlBQVksRUFBRUMsaUJBQWlCLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxhQUFhLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFLEVBQUVDLFFBQVEsQ0FBRTtRQUMxRixLQUFLLENBQUMsQ0FBQ04sb0JBQW9CQyxRQUFRLENBQUMsRUFBRUEsTUFBTSxFQUFFLEVBQUVELGtCQUFrQixDQUFDLENBQUM7UUFFcEVPLE9BQU9DLE1BQU0sQ0FDWCxJQUFJLEVBQ0o7WUFBRVA7UUFBTSxHQUNSRCxxQkFBcUI7WUFBRUE7UUFBa0IsR0FDekNFLGFBQWE7WUFBRUE7UUFBVSxHQUN6QkUsU0FBUztZQUFFQTtRQUFNLEdBQ2pCQyxTQUFTO1lBQUVBO1FBQU0sR0FDakJGLGlCQUFpQjtZQUFFQTtRQUFjO1FBR25DLElBQUlHLFVBQVU7WUFDWkMsT0FBT0UsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO2dCQUN0Q0MsT0FBT0o7WUFDVDtRQUNGO1FBRUEsSUFBSSxDQUFDSyxJQUFJLEdBQUcsSUFBSSxDQUFDWixXQUFXLENBQUNZLElBQUk7UUFDakNiLE1BQU1jLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNiLFdBQVc7SUFDaEQ7QUFDRjtBQUVBLE1BQU1jLGdCQUFnQmY7SUFDcEJDLFlBQVksR0FBR2UsSUFBSSxDQUFFO1FBQ25CLElBQUksT0FBT0EsSUFBSSxDQUFDLEVBQUUsS0FBSyxVQUFVO1lBQy9CLEtBQUssQ0FBQ25CLFVBQVVtQjtRQUNsQixPQUFPO1lBQ0wsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRVYsUUFBUSxFQUFFLEdBQUdXLE1BQU0sR0FBR0gsSUFBSSxDQUFDLEVBQUU7WUFDdEQsSUFBSUUsUUFBUTtnQkFDVixLQUFLLENBQUNyQixVQUFVcUI7WUFDbEIsT0FBTztnQkFDTCxLQUFLLENBQUNEO1lBQ1I7WUFDQVIsT0FBT0MsTUFBTSxDQUFDLElBQUksRUFBRVM7WUFDcEIsSUFBSVgsVUFBVTtnQkFDWkMsT0FBT0UsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO29CQUN0Q0MsT0FBT0o7Z0JBQ1Q7WUFDRjtRQUNGO1FBRUEsSUFBSSxDQUFDSyxJQUFJLEdBQUcsSUFBSSxDQUFDWixXQUFXLENBQUNZLElBQUk7UUFDakNiLE1BQU1jLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNiLFdBQVc7SUFDaEQ7QUFDRjtBQUVBbUIsT0FBT0MsT0FBTyxHQUFHO0lBQ2Z0QjtJQUNBZ0I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvZXJyb3JzLmpzP2E3NDEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBmb3JtYXQgfSA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY2xhc3MgT1BFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoeyBlcnJvcl9kZXNjcmlwdGlvbiwgZXJyb3IsIGVycm9yX3VyaSwgc2Vzc2lvbl9zdGF0ZSwgc3RhdGUsIHNjb3BlIH0sIHJlc3BvbnNlKSB7XG4gICAgc3VwZXIoIWVycm9yX2Rlc2NyaXB0aW9uID8gZXJyb3IgOiBgJHtlcnJvcn0gKCR7ZXJyb3JfZGVzY3JpcHRpb259KWApO1xuXG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgIHRoaXMsXG4gICAgICB7IGVycm9yIH0sXG4gICAgICBlcnJvcl9kZXNjcmlwdGlvbiAmJiB7IGVycm9yX2Rlc2NyaXB0aW9uIH0sXG4gICAgICBlcnJvcl91cmkgJiYgeyBlcnJvcl91cmkgfSxcbiAgICAgIHN0YXRlICYmIHsgc3RhdGUgfSxcbiAgICAgIHNjb3BlICYmIHsgc2NvcGUgfSxcbiAgICAgIHNlc3Npb25fc3RhdGUgJiYgeyBzZXNzaW9uX3N0YXRlIH0sXG4gICAgKTtcblxuICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdyZXNwb25zZScsIHtcbiAgICAgICAgdmFsdWU6IHJlc3BvbnNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG59XG5cbmNsYXNzIFJQRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdXBlcihmb3JtYXQoLi4uYXJncykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IG1lc3NhZ2UsIHByaW50ZiwgcmVzcG9uc2UsIC4uLnJlc3QgfSA9IGFyZ3NbMF07XG4gICAgICBpZiAocHJpbnRmKSB7XG4gICAgICAgIHN1cGVyKGZvcm1hdCguLi5wcmludGYpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCByZXN0KTtcbiAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Jlc3BvbnNlJywge1xuICAgICAgICAgIHZhbHVlOiByZXNwb25zZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBPUEVycm9yLFxuICBSUEVycm9yLFxufTtcbiJdLCJuYW1lcyI6WyJmb3JtYXQiLCJyZXF1aXJlIiwiT1BFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvcl9kZXNjcmlwdGlvbiIsImVycm9yIiwiZXJyb3JfdXJpIiwic2Vzc2lvbl9zdGF0ZSIsInN0YXRlIiwic2NvcGUiLCJyZXNwb25zZSIsIk9iamVjdCIsImFzc2lnbiIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJuYW1lIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJSUEVycm9yIiwiYXJncyIsIm1lc3NhZ2UiLCJwcmludGYiLCJyZXN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/assert.js":
/*!**********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/assert.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("function assertSigningAlgValuesSupport(endpoint, issuer, properties) {\n    if (!issuer[`${endpoint}_endpoint`]) return;\n    const eam = `${endpoint}_endpoint_auth_method`;\n    const easa = `${endpoint}_endpoint_auth_signing_alg`;\n    const easavs = `${endpoint}_endpoint_auth_signing_alg_values_supported`;\n    if (properties[eam] && properties[eam].endsWith(\"_jwt\") && !properties[easa] && !issuer[easavs]) {\n        throw new TypeError(`${easavs} must be configured on the issuer if ${easa} is not defined on a client`);\n    }\n}\nfunction assertIssuerConfiguration(issuer, endpoint) {\n    if (!issuer[endpoint]) {\n        throw new TypeError(`${endpoint} must be configured on the issuer`);\n    }\n}\nmodule.exports = {\n    assertSigningAlgValuesSupport,\n    assertIssuerConfiguration\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvYXNzZXJ0LmpzP2FkMjIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYXNzZXJ0U2lnbmluZ0FsZ1ZhbHVlc1N1cHBvcnQoZW5kcG9pbnQsIGlzc3VlciwgcHJvcGVydGllcykge1xuICBpZiAoIWlzc3VlcltgJHtlbmRwb2ludH1fZW5kcG9pbnRgXSkgcmV0dXJuO1xuXG4gIGNvbnN0IGVhbSA9IGAke2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX21ldGhvZGA7XG4gIGNvbnN0IGVhc2EgPSBgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ2A7XG4gIGNvbnN0IGVhc2F2cyA9IGAke2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWRgO1xuXG4gIGlmIChwcm9wZXJ0aWVzW2VhbV0gJiYgcHJvcGVydGllc1tlYW1dLmVuZHNXaXRoKCdfand0JykgJiYgIXByb3BlcnRpZXNbZWFzYV0gJiYgIWlzc3VlcltlYXNhdnNdKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGAke2Vhc2F2c30gbXVzdCBiZSBjb25maWd1cmVkIG9uIHRoZSBpc3N1ZXIgaWYgJHtlYXNhfSBpcyBub3QgZGVmaW5lZCBvbiBhIGNsaWVudGAsXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uKGlzc3VlciwgZW5kcG9pbnQpIHtcbiAgaWYgKCFpc3N1ZXJbZW5kcG9pbnRdKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtlbmRwb2ludH0gbXVzdCBiZSBjb25maWd1cmVkIG9uIHRoZSBpc3N1ZXJgKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0U2lnbmluZ0FsZ1ZhbHVlc1N1cHBvcnQsXG4gIGFzc2VydElzc3VlckNvbmZpZ3VyYXRpb24sXG59O1xuIl0sIm5hbWVzIjpbImFzc2VydFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0IiwiZW5kcG9pbnQiLCJpc3N1ZXIiLCJwcm9wZXJ0aWVzIiwiZWFtIiwiZWFzYSIsImVhc2F2cyIsImVuZHNXaXRoIiwiVHlwZUVycm9yIiwiYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLDhCQUE4QkMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLFVBQVU7SUFDakUsSUFBSSxDQUFDRCxNQUFNLENBQUMsQ0FBQyxFQUFFRCxTQUFTLFNBQVMsQ0FBQyxDQUFDLEVBQUU7SUFFckMsTUFBTUcsTUFBTSxDQUFDLEVBQUVILFNBQVMscUJBQXFCLENBQUM7SUFDOUMsTUFBTUksT0FBTyxDQUFDLEVBQUVKLFNBQVMsMEJBQTBCLENBQUM7SUFDcEQsTUFBTUssU0FBUyxDQUFDLEVBQUVMLFNBQVMsMkNBQTJDLENBQUM7SUFFdkUsSUFBSUUsVUFBVSxDQUFDQyxJQUFJLElBQUlELFVBQVUsQ0FBQ0MsSUFBSSxDQUFDRyxRQUFRLENBQUMsV0FBVyxDQUFDSixVQUFVLENBQUNFLEtBQUssSUFBSSxDQUFDSCxNQUFNLENBQUNJLE9BQU8sRUFBRTtRQUMvRixNQUFNLElBQUlFLFVBQ1IsQ0FBQyxFQUFFRixPQUFPLHFDQUFxQyxFQUFFRCxLQUFLLDJCQUEyQixDQUFDO0lBRXRGO0FBQ0Y7QUFFQSxTQUFTSSwwQkFBMEJQLE1BQU0sRUFBRUQsUUFBUTtJQUNqRCxJQUFJLENBQUNDLE1BQU0sQ0FBQ0QsU0FBUyxFQUFFO1FBQ3JCLE1BQU0sSUFBSU8sVUFBVSxDQUFDLEVBQUVQLFNBQVMsaUNBQWlDLENBQUM7SUFDcEU7QUFDRjtBQUVBUyxPQUFPQyxPQUFPLEdBQUc7SUFDZlg7SUFDQVM7QUFDRiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2Fzc2VydC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/assert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/base64url.js":
/*!*************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/base64url.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("let encode;\nif (Buffer.isEncoding(\"base64url\")) {\n    encode = (input, encoding = \"utf8\")=>Buffer.from(input, encoding).toString(\"base64url\");\n} else {\n    const fromBase64 = (base64)=>base64.replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    encode = (input, encoding = \"utf8\")=>fromBase64(Buffer.from(input, encoding).toString(\"base64\"));\n}\nconst decode = (input)=>Buffer.from(input, \"base64\");\nmodule.exports.decode = decode;\nmodule.exports.encode = encode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9iYXNlNjR1cmwuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUE7QUFDSixJQUFJQyxPQUFPQyxVQUFVLENBQUMsY0FBYztJQUNsQ0YsU0FBUyxDQUFDRyxPQUFPQyxXQUFXLE1BQU0sR0FBS0gsT0FBT0ksSUFBSSxDQUFDRixPQUFPQyxVQUFVRSxRQUFRLENBQUM7QUFDL0UsT0FBTztJQUNMLE1BQU1DLGFBQWEsQ0FBQ0MsU0FBV0EsT0FBT0MsT0FBTyxDQUFDLE1BQU0sSUFBSUEsT0FBTyxDQUFDLE9BQU8sS0FBS0EsT0FBTyxDQUFDLE9BQU87SUFDM0ZULFNBQVMsQ0FBQ0csT0FBT0MsV0FBVyxNQUFNLEdBQ2hDRyxXQUFXTixPQUFPSSxJQUFJLENBQUNGLE9BQU9DLFVBQVVFLFFBQVEsQ0FBQztBQUNyRDtBQUVBLE1BQU1JLFNBQVMsQ0FBQ1AsUUFBVUYsT0FBT0ksSUFBSSxDQUFDRixPQUFPO0FBRTdDUSxxQkFBcUIsR0FBR0Q7QUFDeEJDLHFCQUFxQixHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9iYXNlNjR1cmwuanM/M2I1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZW5jb2RlO1xuaWYgKEJ1ZmZlci5pc0VuY29kaW5nKCdiYXNlNjR1cmwnKSkge1xuICBlbmNvZGUgPSAoaW5wdXQsIGVuY29kaW5nID0gJ3V0ZjgnKSA9PiBCdWZmZXIuZnJvbShpbnB1dCwgZW5jb2RpbmcpLnRvU3RyaW5nKCdiYXNlNjR1cmwnKTtcbn0gZWxzZSB7XG4gIGNvbnN0IGZyb21CYXNlNjQgPSAoYmFzZTY0KSA9PiBiYXNlNjQucmVwbGFjZSgvPS9nLCAnJykucmVwbGFjZSgvXFwrL2csICctJykucmVwbGFjZSgvXFwvL2csICdfJyk7XG4gIGVuY29kZSA9IChpbnB1dCwgZW5jb2RpbmcgPSAndXRmOCcpID0+XG4gICAgZnJvbUJhc2U2NChCdWZmZXIuZnJvbShpbnB1dCwgZW5jb2RpbmcpLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG59XG5cbmNvbnN0IGRlY29kZSA9IChpbnB1dCkgPT4gQnVmZmVyLmZyb20oaW5wdXQsICdiYXNlNjQnKTtcblxubW9kdWxlLmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xubW9kdWxlLmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuIl0sIm5hbWVzIjpbImVuY29kZSIsIkJ1ZmZlciIsImlzRW5jb2RpbmciLCJpbnB1dCIsImVuY29kaW5nIiwiZnJvbSIsInRvU3RyaW5nIiwiZnJvbUJhc2U2NCIsImJhc2U2NCIsInJlcGxhY2UiLCJkZWNvZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/client.js":
/*!**********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/client.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const jose = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js\");\nconst { RPError } = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst { assertIssuerConfiguration } = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/openid-client/lib/helpers/assert.js\");\nconst { random } = __webpack_require__(/*! ./generators */ \"(rsc)/./node_modules/openid-client/lib/helpers/generators.js\");\nconst now = __webpack_require__(/*! ./unix_timestamp */ \"(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\");\nconst request = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nconst { keystores } = __webpack_require__(/*! ./weak_cache */ \"(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js\");\nconst merge = __webpack_require__(/*! ./merge */ \"(rsc)/./node_modules/openid-client/lib/helpers/merge.js\");\n// TODO: in v6.x additionally encode the `- _ . ! ~ * ' ( )` characters\n// https://github.com/panva/node-openid-client/commit/5a2ea80ef5e59ec0c03dbd97d82f551e24a9d348\nconst formUrlEncode = (value)=>encodeURIComponent(value).replace(/%20/g, \"+\");\nasync function clientAssertion(endpoint, payload) {\n    let alg = this[`${endpoint}_endpoint_auth_signing_alg`];\n    if (!alg) {\n        assertIssuerConfiguration(this.issuer, `${endpoint}_endpoint_auth_signing_alg_values_supported`);\n    }\n    if (this[`${endpoint}_endpoint_auth_method`] === \"client_secret_jwt\") {\n        if (!alg) {\n            const supported = this.issuer[`${endpoint}_endpoint_auth_signing_alg_values_supported`];\n            alg = Array.isArray(supported) && supported.find((signAlg)=>/^HS(?:256|384|512)/.test(signAlg));\n        }\n        if (!alg) {\n            throw new RPError(`failed to determine a JWS Algorithm to use for ${this[`${endpoint}_endpoint_auth_method`]} Client Assertion`);\n        }\n        return new jose.CompactSign(Buffer.from(JSON.stringify(payload))).setProtectedHeader({\n            alg\n        }).sign(this.secretForAlg(alg));\n    }\n    const keystore = await keystores.get(this);\n    if (!keystore) {\n        throw new TypeError(\"no client jwks provided for signing a client assertion with\");\n    }\n    if (!alg) {\n        const supported = this.issuer[`${endpoint}_endpoint_auth_signing_alg_values_supported`];\n        alg = Array.isArray(supported) && supported.find((signAlg)=>keystore.get({\n                alg: signAlg,\n                use: \"sig\"\n            }));\n    }\n    if (!alg) {\n        throw new RPError(`failed to determine a JWS Algorithm to use for ${this[`${endpoint}_endpoint_auth_method`]} Client Assertion`);\n    }\n    const key = keystore.get({\n        alg,\n        use: \"sig\"\n    });\n    if (!key) {\n        throw new RPError(`no key found in client jwks to sign a client assertion with using alg ${alg}`);\n    }\n    return new jose.CompactSign(Buffer.from(JSON.stringify(payload))).setProtectedHeader({\n        alg,\n        kid: key.jwk && key.jwk.kid\n    }).sign(await key.keyObject(alg));\n}\nasync function authFor(endpoint, { clientAssertionPayload } = {}) {\n    const authMethod = this[`${endpoint}_endpoint_auth_method`];\n    switch(authMethod){\n        case \"self_signed_tls_client_auth\":\n        case \"tls_client_auth\":\n        case \"none\":\n            return {\n                form: {\n                    client_id: this.client_id\n                }\n            };\n        case \"client_secret_post\":\n            if (typeof this.client_secret !== \"string\") {\n                throw new TypeError(\"client_secret_post client authentication method requires a client_secret\");\n            }\n            return {\n                form: {\n                    client_id: this.client_id,\n                    client_secret: this.client_secret\n                }\n            };\n        case \"private_key_jwt\":\n        case \"client_secret_jwt\":\n            {\n                const timestamp = now();\n                const assertion = await clientAssertion.call(this, endpoint, {\n                    iat: timestamp,\n                    exp: timestamp + 60,\n                    jti: random(),\n                    iss: this.client_id,\n                    sub: this.client_id,\n                    aud: this.issuer.issuer,\n                    ...clientAssertionPayload\n                });\n                return {\n                    form: {\n                        client_id: this.client_id,\n                        client_assertion: assertion,\n                        client_assertion_type: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"\n                    }\n                };\n            }\n        case \"client_secret_basic\":\n            {\n                // This is correct behaviour, see https://tools.ietf.org/html/rfc6749#section-2.3.1 and the\n                // related appendix. (also https://github.com/panva/node-openid-client/pull/91)\n                // > The client identifier is encoded using the\n                // > \"application/x-www-form-urlencoded\" encoding algorithm per\n                // > Appendix B, and the encoded value is used as the username; the client\n                // > password is encoded using the same algorithm and used as the\n                // > password.\n                if (typeof this.client_secret !== \"string\") {\n                    throw new TypeError(\"client_secret_basic client authentication method requires a client_secret\");\n                }\n                const encoded = `${formUrlEncode(this.client_id)}:${formUrlEncode(this.client_secret)}`;\n                const value = Buffer.from(encoded).toString(\"base64\");\n                return {\n                    headers: {\n                        Authorization: `Basic ${value}`\n                    }\n                };\n            }\n        default:\n            {\n                throw new TypeError(`missing, or unsupported, ${endpoint}_endpoint_auth_method`);\n            }\n    }\n}\nfunction resolveResponseType() {\n    const { length, 0: value } = this.response_types;\n    if (length === 1) {\n        return value;\n    }\n    return undefined;\n}\nfunction resolveRedirectUri() {\n    const { length, 0: value } = this.redirect_uris || [];\n    if (length === 1) {\n        return value;\n    }\n    return undefined;\n}\nasync function authenticatedPost(endpoint, opts, { clientAssertionPayload, endpointAuthMethod = endpoint, DPoP } = {}) {\n    const auth = await authFor.call(this, endpointAuthMethod, {\n        clientAssertionPayload\n    });\n    const requestOpts = merge(opts, auth);\n    const mTLS = this[`${endpointAuthMethod}_endpoint_auth_method`].includes(\"tls_client_auth\") || endpoint === \"token\" && this.tls_client_certificate_bound_access_tokens;\n    let targetUrl;\n    if (mTLS && this.issuer.mtls_endpoint_aliases) {\n        targetUrl = this.issuer.mtls_endpoint_aliases[`${endpoint}_endpoint`];\n    }\n    targetUrl = targetUrl || this.issuer[`${endpoint}_endpoint`];\n    if (\"form\" in requestOpts) {\n        for (const [key, value] of Object.entries(requestOpts.form)){\n            if (typeof value === \"undefined\") {\n                delete requestOpts.form[key];\n            }\n        }\n    }\n    return request.call(this, {\n        ...requestOpts,\n        method: \"POST\",\n        url: targetUrl,\n        headers: {\n            ...endpoint !== \"revocation\" ? {\n                Accept: \"application/json\"\n            } : undefined,\n            ...requestOpts.headers\n        }\n    }, {\n        mTLS,\n        DPoP\n    });\n}\nmodule.exports = {\n    resolveResponseType,\n    resolveRedirectUri,\n    authFor,\n    authenticatedPost\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/consts.js":
/*!**********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/consts.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("const HTTP_OPTIONS = Symbol();\nconst CLOCK_TOLERANCE = Symbol();\nmodule.exports = {\n    CLOCK_TOLERANCE,\n    HTTP_OPTIONS\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvY29uc3RzLmpzP2UwNTMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSFRUUF9PUFRJT05TID0gU3ltYm9sKCk7XG5jb25zdCBDTE9DS19UT0xFUkFOQ0UgPSBTeW1ib2woKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENMT0NLX1RPTEVSQU5DRSxcbiAgSFRUUF9PUFRJT05TLFxufTtcbiJdLCJuYW1lcyI6WyJIVFRQX09QVElPTlMiLCJTeW1ib2wiLCJDTE9DS19UT0xFUkFOQ0UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxlQUFlQztBQUNyQixNQUFNQyxrQkFBa0JEO0FBRXhCRSxPQUFPQyxPQUFPLEdBQUc7SUFDZkY7SUFDQUY7QUFDRiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2NvbnN0cy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/consts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/decode_jwt.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/decode_jwt.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const base64url = __webpack_require__(/*! ./base64url */ \"(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\");\nmodule.exports = (token)=>{\n    if (typeof token !== \"string\" || !token) {\n        throw new TypeError(\"JWT must be a string\");\n    }\n    const { 0: header, 1: payload, 2: signature, length } = token.split(\".\");\n    if (length === 5) {\n        throw new TypeError(\"encrypted JWTs cannot be decoded\");\n    }\n    if (length !== 3) {\n        throw new Error(\"JWTs must have three components\");\n    }\n    try {\n        return {\n            header: JSON.parse(base64url.decode(header)),\n            payload: JSON.parse(base64url.decode(payload)),\n            signature\n        };\n    } catch (err) {\n        throw new Error(\"JWT is malformed\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9kZWNvZGVfand0LmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBRTFCQyxPQUFPQyxPQUFPLEdBQUcsQ0FBQ0M7SUFDaEIsSUFBSSxPQUFPQSxVQUFVLFlBQVksQ0FBQ0EsT0FBTztRQUN2QyxNQUFNLElBQUlDLFVBQVU7SUFDdEI7SUFFQSxNQUFNLEVBQUUsR0FBR0MsTUFBTSxFQUFFLEdBQUdDLE9BQU8sRUFBRSxHQUFHQyxTQUFTLEVBQUVDLE1BQU0sRUFBRSxHQUFHTCxNQUFNTSxLQUFLLENBQUM7SUFFcEUsSUFBSUQsV0FBVyxHQUFHO1FBQ2hCLE1BQU0sSUFBSUosVUFBVTtJQUN0QjtJQUVBLElBQUlJLFdBQVcsR0FBRztRQUNoQixNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFFQSxJQUFJO1FBQ0YsT0FBTztZQUNMTCxRQUFRTSxLQUFLQyxLQUFLLENBQUNiLFVBQVVjLE1BQU0sQ0FBQ1I7WUFDcENDLFNBQVNLLEtBQUtDLEtBQUssQ0FBQ2IsVUFBVWMsTUFBTSxDQUFDUDtZQUNyQ0M7UUFDRjtJQUNGLEVBQUUsT0FBT08sS0FBSztRQUNaLE1BQU0sSUFBSUosTUFBTTtJQUNsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2RlY29kZV9qd3QuanM/NTYwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiYXNlNjR1cmwgPSByZXF1aXJlKCcuL2Jhc2U2NHVybCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh0b2tlbikgPT4ge1xuICBpZiAodHlwZW9mIHRva2VuICE9PSAnc3RyaW5nJyB8fCAhdG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKV1QgbXVzdCBiZSBhIHN0cmluZycpO1xuICB9XG5cbiAgY29uc3QgeyAwOiBoZWFkZXIsIDE6IHBheWxvYWQsIDI6IHNpZ25hdHVyZSwgbGVuZ3RoIH0gPSB0b2tlbi5zcGxpdCgnLicpO1xuXG4gIGlmIChsZW5ndGggPT09IDUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNyeXB0ZWQgSldUcyBjYW5ub3QgYmUgZGVjb2RlZCcpO1xuICB9XG5cbiAgaWYgKGxlbmd0aCAhPT0gMykge1xuICAgIHRocm93IG5ldyBFcnJvcignSldUcyBtdXN0IGhhdmUgdGhyZWUgY29tcG9uZW50cycpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVhZGVyOiBKU09OLnBhcnNlKGJhc2U2NHVybC5kZWNvZGUoaGVhZGVyKSksXG4gICAgICBwYXlsb2FkOiBKU09OLnBhcnNlKGJhc2U2NHVybC5kZWNvZGUocGF5bG9hZCkpLFxuICAgICAgc2lnbmF0dXJlLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcignSldUIGlzIG1hbGZvcm1lZCcpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImJhc2U2NHVybCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwidG9rZW4iLCJUeXBlRXJyb3IiLCJoZWFkZXIiLCJwYXlsb2FkIiwic2lnbmF0dXJlIiwibGVuZ3RoIiwic3BsaXQiLCJFcnJvciIsIkpTT04iLCJwYXJzZSIsImRlY29kZSIsImVyciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/decode_jwt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/deep_clone.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("module.exports = globalThis.structuredClone || ((obj)=>JSON.parse(JSON.stringify(obj)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvZGVlcF9jbG9uZS5qcz84ZTRiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsVGhpcy5zdHJ1Y3R1cmVkQ2xvbmUgfHwgKChvYmopID0+IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSkpO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJnbG9iYWxUaGlzIiwic3RydWN0dXJlZENsb25lIiwib2JqIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5Il0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHQyxXQUFXQyxlQUFlLElBQUssQ0FBQSxDQUFDQyxNQUFRQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLFNBQVMsQ0FBQ0gsS0FBSSIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9oZWxwZXJzL2RlZXBfY2xvbmUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/defaults.js":
/*!************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/defaults.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const isPlainObject = __webpack_require__(/*! ./is_plain_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\");\nfunction defaults(deep, target, ...sources) {\n    for (const source of sources){\n        if (!isPlainObject(source)) {\n            continue;\n        }\n        for (const [key, value] of Object.entries(source)){\n            /* istanbul ignore if */ if (key === \"__proto__\" || key === \"constructor\") {\n                continue;\n            }\n            if (typeof target[key] === \"undefined\" && typeof value !== \"undefined\") {\n                target[key] = value;\n            }\n            if (deep && isPlainObject(target[key]) && isPlainObject(value)) {\n                defaults(true, target[key], value);\n            }\n        }\n    }\n    return target;\n}\nmodule.exports = defaults.bind(undefined, false);\nmodule.exports.deep = defaults.bind(undefined, true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9kZWZhdWx0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBRTlCLFNBQVNDLFNBQVNDLElBQUksRUFBRUMsTUFBTSxFQUFFLEdBQUdDLE9BQU87SUFDeEMsS0FBSyxNQUFNQyxVQUFVRCxRQUFTO1FBQzVCLElBQUksQ0FBQ0wsY0FBY00sU0FBUztZQUMxQjtRQUNGO1FBQ0EsS0FBSyxNQUFNLENBQUNDLEtBQUtDLE1BQU0sSUFBSUMsT0FBT0MsT0FBTyxDQUFDSixRQUFTO1lBQ2pELHNCQUFzQixHQUN0QixJQUFJQyxRQUFRLGVBQWVBLFFBQVEsZUFBZTtnQkFDaEQ7WUFDRjtZQUNBLElBQUksT0FBT0gsTUFBTSxDQUFDRyxJQUFJLEtBQUssZUFBZSxPQUFPQyxVQUFVLGFBQWE7Z0JBQ3RFSixNQUFNLENBQUNHLElBQUksR0FBR0M7WUFDaEI7WUFFQSxJQUFJTCxRQUFRSCxjQUFjSSxNQUFNLENBQUNHLElBQUksS0FBS1AsY0FBY1EsUUFBUTtnQkFDOUROLFNBQVMsTUFBTUUsTUFBTSxDQUFDRyxJQUFJLEVBQUVDO1lBQzlCO1FBQ0Y7SUFDRjtJQUVBLE9BQU9KO0FBQ1Q7QUFFQU8sT0FBT0MsT0FBTyxHQUFHVixTQUFTVyxJQUFJLENBQUNDLFdBQVc7QUFDMUNILG1CQUFtQixHQUFHVCxTQUFTVyxJQUFJLENBQUNDLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvZGVmYXVsdHMuanM/MGNiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi9pc19wbGFpbl9vYmplY3QnKTtcblxuZnVuY3Rpb24gZGVmYXVsdHMoZGVlcCwgdGFyZ2V0LCAuLi5zb3VyY2VzKSB7XG4gIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNvdXJjZSkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVlcCAmJiBpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBkZWZhdWx0cyh0cnVlLCB0YXJnZXRba2V5XSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHMuYmluZCh1bmRlZmluZWQsIGZhbHNlKTtcbm1vZHVsZS5leHBvcnRzLmRlZXAgPSBkZWZhdWx0cy5iaW5kKHVuZGVmaW5lZCwgdHJ1ZSk7XG4iXSwibmFtZXMiOlsiaXNQbGFpbk9iamVjdCIsInJlcXVpcmUiLCJkZWZhdWx0cyIsImRlZXAiLCJ0YXJnZXQiLCJzb3VyY2VzIiwic291cmNlIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/defaults.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/generators.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/generators.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { createHash, randomBytes } = __webpack_require__(/*! crypto */ \"crypto\");\nconst base64url = __webpack_require__(/*! ./base64url */ \"(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\");\nconst random = (bytes = 32)=>base64url.encode(randomBytes(bytes));\nmodule.exports = {\n    random,\n    state: random,\n    nonce: random,\n    codeVerifier: random,\n    codeChallenge: (codeVerifier)=>base64url.encode(createHash(\"sha256\").update(codeVerifier).digest())\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9nZW5lcmF0b3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRUEsVUFBVSxFQUFFQyxXQUFXLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFNUMsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUM7QUFFMUIsTUFBTUUsU0FBUyxDQUFDQyxRQUFRLEVBQUUsR0FBS0YsVUFBVUcsTUFBTSxDQUFDTCxZQUFZSTtBQUU1REUsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZKO0lBQ0FLLE9BQU9MO0lBQ1BNLE9BQU9OO0lBQ1BPLGNBQWNQO0lBQ2RRLGVBQWUsQ0FBQ0QsZUFDZFIsVUFBVUcsTUFBTSxDQUFDTixXQUFXLFVBQVVhLE1BQU0sQ0FBQ0YsY0FBY0csTUFBTTtBQUNyRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9nZW5lcmF0b3JzLmpzPzgyZjgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBjcmVhdGVIYXNoLCByYW5kb21CeXRlcyB9ID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbmNvbnN0IGJhc2U2NHVybCA9IHJlcXVpcmUoJy4vYmFzZTY0dXJsJyk7XG5cbmNvbnN0IHJhbmRvbSA9IChieXRlcyA9IDMyKSA9PiBiYXNlNjR1cmwuZW5jb2RlKHJhbmRvbUJ5dGVzKGJ5dGVzKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByYW5kb20sXG4gIHN0YXRlOiByYW5kb20sXG4gIG5vbmNlOiByYW5kb20sXG4gIGNvZGVWZXJpZmllcjogcmFuZG9tLFxuICBjb2RlQ2hhbGxlbmdlOiAoY29kZVZlcmlmaWVyKSA9PlxuICAgIGJhc2U2NHVybC5lbmNvZGUoY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGNvZGVWZXJpZmllcikuZGlnZXN0KCkpLFxufTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVIYXNoIiwicmFuZG9tQnl0ZXMiLCJyZXF1aXJlIiwiYmFzZTY0dXJsIiwicmFuZG9tIiwiYnl0ZXMiLCJlbmNvZGUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3RhdGUiLCJub25jZSIsImNvZGVWZXJpZmllciIsImNvZGVDaGFsbGVuZ2UiLCJ1cGRhdGUiLCJkaWdlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/generators.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/is_key_object.js":
/*!*****************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/is_key_object.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! util */ \"util\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nmodule.exports = util.types.isKeyObject || ((obj)=>obj && obj instanceof crypto.KeyObject);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9pc19rZXlfb2JqZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDO0FBRXZCRSxPQUFPQyxPQUFPLEdBQUdKLEtBQUtLLEtBQUssQ0FBQ0MsV0FBVyxJQUFLLEVBQUNDLE1BQVFBLE9BQU9BLGVBQWVMLE9BQU9NLFNBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvaXNfa2V5X29iamVjdC5qcz9hMDBiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1dGlsLnR5cGVzLmlzS2V5T2JqZWN0IHx8ICgob2JqKSA9PiBvYmogJiYgb2JqIGluc3RhbmNlb2YgY3J5cHRvLktleU9iamVjdCk7XG4iXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJjcnlwdG8iLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZXMiLCJpc0tleU9iamVjdCIsIm9iaiIsIktleU9iamVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/is_key_object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js":
/*!*******************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/is_plain_object.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("module.exports = (a)=>!!a && a.constructor === Object;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvaXNfcGxhaW5fb2JqZWN0LmpzP2UzZTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoYSkgPT4gISFhICYmIGEuY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYSIsImNvbnN0cnVjdG9yIiwiT2JqZWN0Il0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHLENBQUNDLElBQU0sQ0FBQyxDQUFDQSxLQUFLQSxFQUFFQyxXQUFXLEtBQUtDIiwiZmlsZSI6Iihyc2MpLy4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvaXNfcGxhaW5fb2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/issuer.js":
/*!**********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/issuer.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const objectHash = __webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\");\nconst LRU = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/lru-cache/index.js\");\nconst { RPError } = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst { assertIssuerConfiguration } = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/openid-client/lib/helpers/assert.js\");\nconst KeyStore = __webpack_require__(/*! ./keystore */ \"(rsc)/./node_modules/openid-client/lib/helpers/keystore.js\");\nconst { keystores } = __webpack_require__(/*! ./weak_cache */ \"(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js\");\nconst processResponse = __webpack_require__(/*! ./process_response */ \"(rsc)/./node_modules/openid-client/lib/helpers/process_response.js\");\nconst request = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nconst inFlight = new WeakMap();\nconst caches = new WeakMap();\nconst lrus = (ctx)=>{\n    if (!caches.has(ctx)) {\n        caches.set(ctx, new LRU({\n            max: 100\n        }));\n    }\n    return caches.get(ctx);\n};\nasync function getKeyStore(reload = false) {\n    assertIssuerConfiguration(this, \"jwks_uri\");\n    const keystore = keystores.get(this);\n    const cache = lrus(this);\n    if (reload || !keystore) {\n        if (inFlight.has(this)) {\n            return inFlight.get(this);\n        }\n        cache.reset();\n        inFlight.set(this, (async ()=>{\n            const response = await request.call(this, {\n                method: \"GET\",\n                responseType: \"json\",\n                url: this.jwks_uri,\n                headers: {\n                    Accept: \"application/json, application/jwk-set+json\"\n                }\n            }).finally(()=>{\n                inFlight.delete(this);\n            });\n            const jwks = processResponse(response);\n            const joseKeyStore = KeyStore.fromJWKS(jwks, {\n                onlyPublic: true\n            });\n            cache.set(\"throttle\", true, 60 * 1000);\n            keystores.set(this, joseKeyStore);\n            return joseKeyStore;\n        })());\n        return inFlight.get(this);\n    }\n    return keystore;\n}\nasync function queryKeyStore({ kid, kty, alg, use }, { allowMulti = false } = {}) {\n    const cache = lrus(this);\n    const def = {\n        kid,\n        kty,\n        alg,\n        use\n    };\n    const defHash = objectHash(def, {\n        algorithm: \"sha256\",\n        ignoreUnknown: true,\n        unorderedArrays: true,\n        unorderedSets: true,\n        respectType: false\n    });\n    // refresh keystore on every unknown key but also only upto once every minute\n    const freshJwksUri = cache.get(defHash) || cache.get(\"throttle\");\n    const keystore = await getKeyStore.call(this, !freshJwksUri);\n    const keys = keystore.all(def);\n    delete def.use;\n    if (keys.length === 0) {\n        throw new RPError({\n            printf: [\n                \"no valid key found in issuer's jwks_uri for key parameters %j\",\n                def\n            ],\n            jwks: keystore\n        });\n    }\n    if (!allowMulti && keys.length > 1 && !kid) {\n        throw new RPError({\n            printf: [\n                \"multiple matching keys found in issuer's jwks_uri for key parameters %j, kid must be provided in this case\",\n                def\n            ],\n            jwks: keystore\n        });\n    }\n    cache.set(defHash, true);\n    return keys;\n}\nmodule.exports.queryKeyStore = queryKeyStore;\nmodule.exports.keystore = getKeyStore;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9pc3N1ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDM0IsTUFBTUMsTUFBTUQsbUJBQU9BLENBQUM7QUFFcEIsTUFBTSxFQUFFRSxPQUFPLEVBQUUsR0FBR0YsbUJBQU9BLENBQUM7QUFFNUIsTUFBTSxFQUFFRyx5QkFBeUIsRUFBRSxHQUFHSCxtQkFBT0EsQ0FBQztBQUM5QyxNQUFNSSxXQUFXSixtQkFBT0EsQ0FBQztBQUN6QixNQUFNLEVBQUVLLFNBQVMsRUFBRSxHQUFHTCxtQkFBT0EsQ0FBQztBQUM5QixNQUFNTSxrQkFBa0JOLG1CQUFPQSxDQUFDO0FBQ2hDLE1BQU1PLFVBQVVQLG1CQUFPQSxDQUFDO0FBRXhCLE1BQU1RLFdBQVcsSUFBSUM7QUFDckIsTUFBTUMsU0FBUyxJQUFJRDtBQUNuQixNQUFNRSxPQUFPLENBQUNDO0lBQ1osSUFBSSxDQUFDRixPQUFPRyxHQUFHLENBQUNELE1BQU07UUFDcEJGLE9BQU9JLEdBQUcsQ0FBQ0YsS0FBSyxJQUFJWCxJQUFJO1lBQUVjLEtBQUs7UUFBSTtJQUNyQztJQUNBLE9BQU9MLE9BQU9NLEdBQUcsQ0FBQ0o7QUFDcEI7QUFFQSxlQUFlSyxZQUFZQyxTQUFTLEtBQUs7SUFDdkNmLDBCQUEwQixJQUFJLEVBQUU7SUFFaEMsTUFBTWdCLFdBQVdkLFVBQVVXLEdBQUcsQ0FBQyxJQUFJO0lBQ25DLE1BQU1JLFFBQVFULEtBQUssSUFBSTtJQUV2QixJQUFJTyxVQUFVLENBQUNDLFVBQVU7UUFDdkIsSUFBSVgsU0FBU0ssR0FBRyxDQUFDLElBQUksR0FBRztZQUN0QixPQUFPTCxTQUFTUSxHQUFHLENBQUMsSUFBSTtRQUMxQjtRQUNBSSxNQUFNQyxLQUFLO1FBQ1hiLFNBQVNNLEdBQUcsQ0FDVixJQUFJLEVBQ0osQ0FBQztZQUNDLE1BQU1RLFdBQVcsTUFBTWYsUUFDcEJnQixJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNWQyxRQUFRO2dCQUNSQyxjQUFjO2dCQUNkQyxLQUFLLElBQUksQ0FBQ0MsUUFBUTtnQkFDbEJDLFNBQVM7b0JBQ1BDLFFBQVE7Z0JBQ1Y7WUFDRixHQUNDQyxPQUFPLENBQUM7Z0JBQ1B0QixTQUFTdUIsTUFBTSxDQUFDLElBQUk7WUFDdEI7WUFDRixNQUFNQyxPQUFPMUIsZ0JBQWdCZ0I7WUFFN0IsTUFBTVcsZUFBZTdCLFNBQVM4QixRQUFRLENBQUNGLE1BQU07Z0JBQUVHLFlBQVk7WUFBSztZQUNoRWYsTUFBTU4sR0FBRyxDQUFDLFlBQVksTUFBTSxLQUFLO1lBQ2pDVCxVQUFVUyxHQUFHLENBQUMsSUFBSSxFQUFFbUI7WUFFcEIsT0FBT0E7UUFDVDtRQUdGLE9BQU96QixTQUFTUSxHQUFHLENBQUMsSUFBSTtJQUMxQjtJQUVBLE9BQU9HO0FBQ1Q7QUFFQSxlQUFlaUIsY0FBYyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUUsRUFBRSxFQUFFQyxhQUFhLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5RSxNQUFNckIsUUFBUVQsS0FBSyxJQUFJO0lBRXZCLE1BQU0rQixNQUFNO1FBQ1ZMO1FBQ0FDO1FBQ0FDO1FBQ0FDO0lBQ0Y7SUFFQSxNQUFNRyxVQUFVNUMsV0FBVzJDLEtBQUs7UUFDOUJFLFdBQVc7UUFDWEMsZUFBZTtRQUNmQyxpQkFBaUI7UUFDakJDLGVBQWU7UUFDZkMsYUFBYTtJQUNmO0lBRUEsNkVBQTZFO0lBQzdFLE1BQU1DLGVBQWU3QixNQUFNSixHQUFHLENBQUMyQixZQUFZdkIsTUFBTUosR0FBRyxDQUFDO0lBRXJELE1BQU1HLFdBQVcsTUFBTUYsWUFBWU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDMEI7SUFDL0MsTUFBTUMsT0FBTy9CLFNBQVNnQyxHQUFHLENBQUNUO0lBRTFCLE9BQU9BLElBQUlGLEdBQUc7SUFDZCxJQUFJVSxLQUFLRSxNQUFNLEtBQUssR0FBRztRQUNyQixNQUFNLElBQUlsRCxRQUFRO1lBQ2hCbUQsUUFBUTtnQkFBQztnQkFBaUVYO2FBQUk7WUFDOUVWLE1BQU1iO1FBQ1I7SUFDRjtJQUVBLElBQUksQ0FBQ3NCLGNBQWNTLEtBQUtFLE1BQU0sR0FBRyxLQUFLLENBQUNmLEtBQUs7UUFDMUMsTUFBTSxJQUFJbkMsUUFBUTtZQUNoQm1ELFFBQVE7Z0JBQ047Z0JBQ0FYO2FBQ0Q7WUFDRFYsTUFBTWI7UUFDUjtJQUNGO0lBRUFDLE1BQU1OLEdBQUcsQ0FBQzZCLFNBQVM7SUFFbkIsT0FBT087QUFDVDtBQUVBSSw0QkFBNEIsR0FBR2xCO0FBQy9Ca0IsdUJBQXVCLEdBQUdyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9pc3N1ZXIuanM/NGE3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBvYmplY3RIYXNoID0gcmVxdWlyZSgnb2JqZWN0LWhhc2gnKTtcbmNvbnN0IExSVSA9IHJlcXVpcmUoJ2xydS1jYWNoZScpO1xuXG5jb25zdCB7IFJQRXJyb3IgfSA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xuXG5jb25zdCB7IGFzc2VydElzc3VlckNvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4vYXNzZXJ0Jyk7XG5jb25zdCBLZXlTdG9yZSA9IHJlcXVpcmUoJy4va2V5c3RvcmUnKTtcbmNvbnN0IHsga2V5c3RvcmVzIH0gPSByZXF1aXJlKCcuL3dlYWtfY2FjaGUnKTtcbmNvbnN0IHByb2Nlc3NSZXNwb25zZSA9IHJlcXVpcmUoJy4vcHJvY2Vzc19yZXNwb25zZScpO1xuY29uc3QgcmVxdWVzdCA9IHJlcXVpcmUoJy4vcmVxdWVzdCcpO1xuXG5jb25zdCBpbkZsaWdodCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBjYWNoZXMgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgbHJ1cyA9IChjdHgpID0+IHtcbiAgaWYgKCFjYWNoZXMuaGFzKGN0eCkpIHtcbiAgICBjYWNoZXMuc2V0KGN0eCwgbmV3IExSVSh7IG1heDogMTAwIH0pKTtcbiAgfVxuICByZXR1cm4gY2FjaGVzLmdldChjdHgpO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0S2V5U3RvcmUocmVsb2FkID0gZmFsc2UpIHtcbiAgYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbih0aGlzLCAnandrc191cmknKTtcblxuICBjb25zdCBrZXlzdG9yZSA9IGtleXN0b3Jlcy5nZXQodGhpcyk7XG4gIGNvbnN0IGNhY2hlID0gbHJ1cyh0aGlzKTtcblxuICBpZiAocmVsb2FkIHx8ICFrZXlzdG9yZSkge1xuICAgIGlmIChpbkZsaWdodC5oYXModGhpcykpIHtcbiAgICAgIHJldHVybiBpbkZsaWdodC5nZXQodGhpcyk7XG4gICAgfVxuICAgIGNhY2hlLnJlc2V0KCk7XG4gICAgaW5GbGlnaHQuc2V0KFxuICAgICAgdGhpcyxcbiAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdFxuICAgICAgICAgIC5jYWxsKHRoaXMsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgIHVybDogdGhpcy5qd2tzX3VyaSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbiwgYXBwbGljYXRpb24vandrLXNldCtqc29uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICBpbkZsaWdodC5kZWxldGUodGhpcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGp3a3MgPSBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UpO1xuXG4gICAgICAgIGNvbnN0IGpvc2VLZXlTdG9yZSA9IEtleVN0b3JlLmZyb21KV0tTKGp3a3MsIHsgb25seVB1YmxpYzogdHJ1ZSB9KTtcbiAgICAgICAgY2FjaGUuc2V0KCd0aHJvdHRsZScsIHRydWUsIDYwICogMTAwMCk7XG4gICAgICAgIGtleXN0b3Jlcy5zZXQodGhpcywgam9zZUtleVN0b3JlKTtcblxuICAgICAgICByZXR1cm4gam9zZUtleVN0b3JlO1xuICAgICAgfSkoKSxcbiAgICApO1xuXG4gICAgcmV0dXJuIGluRmxpZ2h0LmdldCh0aGlzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzdG9yZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcXVlcnlLZXlTdG9yZSh7IGtpZCwga3R5LCBhbGcsIHVzZSB9LCB7IGFsbG93TXVsdGkgPSBmYWxzZSB9ID0ge30pIHtcbiAgY29uc3QgY2FjaGUgPSBscnVzKHRoaXMpO1xuXG4gIGNvbnN0IGRlZiA9IHtcbiAgICBraWQsXG4gICAga3R5LFxuICAgIGFsZyxcbiAgICB1c2UsXG4gIH07XG5cbiAgY29uc3QgZGVmSGFzaCA9IG9iamVjdEhhc2goZGVmLCB7XG4gICAgYWxnb3JpdGhtOiAnc2hhMjU2JyxcbiAgICBpZ25vcmVVbmtub3duOiB0cnVlLFxuICAgIHVub3JkZXJlZEFycmF5czogdHJ1ZSxcbiAgICB1bm9yZGVyZWRTZXRzOiB0cnVlLFxuICAgIHJlc3BlY3RUeXBlOiBmYWxzZSxcbiAgfSk7XG5cbiAgLy8gcmVmcmVzaCBrZXlzdG9yZSBvbiBldmVyeSB1bmtub3duIGtleSBidXQgYWxzbyBvbmx5IHVwdG8gb25jZSBldmVyeSBtaW51dGVcbiAgY29uc3QgZnJlc2hKd2tzVXJpID0gY2FjaGUuZ2V0KGRlZkhhc2gpIHx8IGNhY2hlLmdldCgndGhyb3R0bGUnKTtcblxuICBjb25zdCBrZXlzdG9yZSA9IGF3YWl0IGdldEtleVN0b3JlLmNhbGwodGhpcywgIWZyZXNoSndrc1VyaSk7XG4gIGNvbnN0IGtleXMgPSBrZXlzdG9yZS5hbGwoZGVmKTtcblxuICBkZWxldGUgZGVmLnVzZTtcbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJQRXJyb3Ioe1xuICAgICAgcHJpbnRmOiBbXCJubyB2YWxpZCBrZXkgZm91bmQgaW4gaXNzdWVyJ3Mgandrc191cmkgZm9yIGtleSBwYXJhbWV0ZXJzICVqXCIsIGRlZl0sXG4gICAgICBqd2tzOiBrZXlzdG9yZSxcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghYWxsb3dNdWx0aSAmJiBrZXlzLmxlbmd0aCA+IDEgJiYgIWtpZCkge1xuICAgIHRocm93IG5ldyBSUEVycm9yKHtcbiAgICAgIHByaW50ZjogW1xuICAgICAgICBcIm11bHRpcGxlIG1hdGNoaW5nIGtleXMgZm91bmQgaW4gaXNzdWVyJ3Mgandrc191cmkgZm9yIGtleSBwYXJhbWV0ZXJzICVqLCBraWQgbXVzdCBiZSBwcm92aWRlZCBpbiB0aGlzIGNhc2VcIixcbiAgICAgICAgZGVmLFxuICAgICAgXSxcbiAgICAgIGp3a3M6IGtleXN0b3JlLFxuICAgIH0pO1xuICB9XG5cbiAgY2FjaGUuc2V0KGRlZkhhc2gsIHRydWUpO1xuXG4gIHJldHVybiBrZXlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5xdWVyeUtleVN0b3JlID0gcXVlcnlLZXlTdG9yZTtcbm1vZHVsZS5leHBvcnRzLmtleXN0b3JlID0gZ2V0S2V5U3RvcmU7XG4iXSwibmFtZXMiOlsib2JqZWN0SGFzaCIsInJlcXVpcmUiLCJMUlUiLCJSUEVycm9yIiwiYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbiIsIktleVN0b3JlIiwia2V5c3RvcmVzIiwicHJvY2Vzc1Jlc3BvbnNlIiwicmVxdWVzdCIsImluRmxpZ2h0IiwiV2Vha01hcCIsImNhY2hlcyIsImxydXMiLCJjdHgiLCJoYXMiLCJzZXQiLCJtYXgiLCJnZXQiLCJnZXRLZXlTdG9yZSIsInJlbG9hZCIsImtleXN0b3JlIiwiY2FjaGUiLCJyZXNldCIsInJlc3BvbnNlIiwiY2FsbCIsIm1ldGhvZCIsInJlc3BvbnNlVHlwZSIsInVybCIsImp3a3NfdXJpIiwiaGVhZGVycyIsIkFjY2VwdCIsImZpbmFsbHkiLCJkZWxldGUiLCJqd2tzIiwiam9zZUtleVN0b3JlIiwiZnJvbUpXS1MiLCJvbmx5UHVibGljIiwicXVlcnlLZXlTdG9yZSIsImtpZCIsImt0eSIsImFsZyIsInVzZSIsImFsbG93TXVsdGkiLCJkZWYiLCJkZWZIYXNoIiwiYWxnb3JpdGhtIiwiaWdub3JlVW5rbm93biIsInVub3JkZXJlZEFycmF5cyIsInVub3JkZXJlZFNldHMiLCJyZXNwZWN0VHlwZSIsImZyZXNoSndrc1VyaSIsImtleXMiLCJhbGwiLCJsZW5ndGgiLCJwcmludGYiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/issuer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/keystore.js":
/*!************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/keystore.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const jose = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js\");\nconst clone = __webpack_require__(/*! ./deep_clone */ \"(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\");\nconst isPlainObject = __webpack_require__(/*! ./is_plain_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\");\nconst internal = Symbol();\nconst keyscore = (key, { alg, use })=>{\n    let score = 0;\n    if (alg && key.alg) {\n        score++;\n    }\n    if (use && key.use) {\n        score++;\n    }\n    return score;\n};\nfunction getKtyFromAlg(alg) {\n    switch(typeof alg === \"string\" && alg.slice(0, 2)){\n        case \"RS\":\n        case \"PS\":\n            return \"RSA\";\n        case \"ES\":\n            return \"EC\";\n        case \"Ed\":\n            return \"OKP\";\n        default:\n            return undefined;\n    }\n}\nfunction getAlgorithms(use, alg, kty, crv) {\n    // Ed25519, Ed448, and secp256k1 always have \"alg\"\n    // OKP always has \"use\"\n    if (alg) {\n        return new Set([\n            alg\n        ]);\n    }\n    switch(kty){\n        case \"EC\":\n            {\n                let algs = [];\n                if (use === \"enc\" || use === undefined) {\n                    algs = algs.concat([\n                        \"ECDH-ES\",\n                        \"ECDH-ES+A128KW\",\n                        \"ECDH-ES+A192KW\",\n                        \"ECDH-ES+A256KW\"\n                    ]);\n                }\n                if (use === \"sig\" || use === undefined) {\n                    switch(crv){\n                        case \"P-256\":\n                        case \"P-384\":\n                            algs = algs.concat([\n                                `ES${crv.slice(-3)}`\n                            ]);\n                            break;\n                        case \"P-521\":\n                            algs = algs.concat([\n                                \"ES512\"\n                            ]);\n                            break;\n                        case \"secp256k1\":\n                            if (jose.cryptoRuntime === \"node:crypto\") {\n                                algs = algs.concat([\n                                    \"ES256K\"\n                                ]);\n                            }\n                            break;\n                    }\n                }\n                return new Set(algs);\n            }\n        case \"OKP\":\n            {\n                return new Set([\n                    \"ECDH-ES\",\n                    \"ECDH-ES+A128KW\",\n                    \"ECDH-ES+A192KW\",\n                    \"ECDH-ES+A256KW\"\n                ]);\n            }\n        case \"RSA\":\n            {\n                let algs = [];\n                if (use === \"enc\" || use === undefined) {\n                    algs = algs.concat([\n                        \"RSA-OAEP\",\n                        \"RSA-OAEP-256\",\n                        \"RSA-OAEP-384\",\n                        \"RSA-OAEP-512\"\n                    ]);\n                    if (jose.cryptoRuntime === \"node:crypto\") {\n                        algs = algs.concat([\n                            \"RSA1_5\"\n                        ]);\n                    }\n                }\n                if (use === \"sig\" || use === undefined) {\n                    algs = algs.concat([\n                        \"PS256\",\n                        \"PS384\",\n                        \"PS512\",\n                        \"RS256\",\n                        \"RS384\",\n                        \"RS512\"\n                    ]);\n                }\n                return new Set(algs);\n            }\n        default:\n            throw new Error(\"unreachable\");\n    }\n}\nmodule.exports = class KeyStore {\n    #keys;\n    constructor(i, keys){\n        if (i !== internal) throw new Error(\"invalid constructor call\");\n        this.#keys = keys;\n    }\n    toJWKS() {\n        return {\n            keys: this.map(({ jwk: { d, p, q, dp, dq, qi, ...jwk } })=>jwk)\n        };\n    }\n    all({ alg, kid, use } = {}) {\n        if (!use || !alg) {\n            throw new Error();\n        }\n        const kty = getKtyFromAlg(alg);\n        const search = {\n            alg,\n            use\n        };\n        return this.filter((key)=>{\n            let candidate = true;\n            if (candidate && kty !== undefined && key.jwk.kty !== kty) {\n                candidate = false;\n            }\n            if (candidate && kid !== undefined && key.jwk.kid !== kid) {\n                candidate = false;\n            }\n            if (candidate && use !== undefined && key.jwk.use !== undefined && key.jwk.use !== use) {\n                candidate = false;\n            }\n            if (candidate && key.jwk.alg && key.jwk.alg !== alg) {\n                candidate = false;\n            } else if (!key.algorithms.has(alg)) {\n                candidate = false;\n            }\n            return candidate;\n        }).sort((first, second)=>keyscore(second, search) - keyscore(first, search));\n    }\n    get(...args) {\n        return this.all(...args)[0];\n    }\n    static async fromJWKS(jwks, { onlyPublic = false, onlyPrivate = false } = {}) {\n        if (!isPlainObject(jwks) || !Array.isArray(jwks.keys) || jwks.keys.some((k)=>!isPlainObject(k) || !(\"kty\" in k))) {\n            throw new TypeError(\"jwks must be a JSON Web Key Set formatted object\");\n        }\n        const keys = [];\n        for (let jwk of jwks.keys){\n            jwk = clone(jwk);\n            const { kty, kid, crv } = jwk;\n            let { alg, use } = jwk;\n            if (typeof kty !== \"string\" || !kty) {\n                continue;\n            }\n            if (use !== undefined && use !== \"sig\" && use !== \"enc\") {\n                continue;\n            }\n            if (typeof alg !== \"string\" && alg !== undefined) {\n                continue;\n            }\n            if (typeof kid !== \"string\" && kid !== undefined) {\n                continue;\n            }\n            if (kty === \"EC\" && use === \"sig\") {\n                switch(crv){\n                    case \"P-256\":\n                        alg = \"ES256\";\n                        break;\n                    case \"P-384\":\n                        alg = \"ES384\";\n                        break;\n                    case \"P-521\":\n                        alg = \"ES512\";\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (crv === \"secp256k1\") {\n                use = \"sig\";\n                alg = \"ES256K\";\n            }\n            if (kty === \"OKP\") {\n                switch(crv){\n                    case \"Ed25519\":\n                    case \"Ed448\":\n                        use = \"sig\";\n                        alg = \"EdDSA\";\n                        break;\n                    case \"X25519\":\n                    case \"X448\":\n                        use = \"enc\";\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (alg && !use) {\n                switch(true){\n                    case alg.startsWith(\"ECDH\"):\n                        use = \"enc\";\n                        break;\n                    case alg.startsWith(\"RSA\"):\n                        use = \"enc\";\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (onlyPrivate && (jwk.kty === \"oct\" || !jwk.d)) {\n                throw new Error(\"jwks must only contain private keys\");\n            }\n            if (onlyPublic && (jwk.d || jwk.k)) {\n                continue;\n            }\n            keys.push({\n                jwk: {\n                    ...jwk,\n                    alg,\n                    use\n                },\n                async keyObject (alg) {\n                    if (this[alg]) {\n                        return this[alg];\n                    }\n                    const keyObject = await jose.importJWK(this.jwk, alg);\n                    this[alg] = keyObject;\n                    return keyObject;\n                },\n                get algorithms () {\n                    Object.defineProperty(this, \"algorithms\", {\n                        value: getAlgorithms(this.jwk.use, this.jwk.alg, this.jwk.kty, this.jwk.crv),\n                        enumerable: true,\n                        configurable: false\n                    });\n                    return this.algorithms;\n                }\n            });\n        }\n        return new this(internal, keys);\n    }\n    filter(...args) {\n        return this.#keys.filter(...args);\n    }\n    find(...args) {\n        return this.#keys.find(...args);\n    }\n    every(...args) {\n        return this.#keys.every(...args);\n    }\n    some(...args) {\n        return this.#keys.some(...args);\n    }\n    map(...args) {\n        return this.#keys.map(...args);\n    }\n    forEach(...args) {\n        return this.#keys.forEach(...args);\n    }\n    reduce(...args) {\n        return this.#keys.reduce(...args);\n    }\n    sort(...args) {\n        return this.#keys.sort(...args);\n    }\n    *[Symbol.iterator]() {\n        for (const key of this.#keys){\n            yield key;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/keystore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/merge.js":
/*!*********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/merge.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const isPlainObject = __webpack_require__(/*! ./is_plain_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\");\nfunction merge(target, ...sources) {\n    for (const source of sources){\n        if (!isPlainObject(source)) {\n            continue;\n        }\n        for (const [key, value] of Object.entries(source)){\n            /* istanbul ignore if */ if (key === \"__proto__\" || key === \"constructor\") {\n                continue;\n            }\n            if (isPlainObject(target[key]) && isPlainObject(value)) {\n                target[key] = merge(target[key], value);\n            } else if (typeof value !== \"undefined\") {\n                target[key] = value;\n            }\n        }\n    }\n    return target;\n}\nmodule.exports = merge;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9tZXJnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBRTlCLFNBQVNDLE1BQU1DLE1BQU0sRUFBRSxHQUFHQyxPQUFPO0lBQy9CLEtBQUssTUFBTUMsVUFBVUQsUUFBUztRQUM1QixJQUFJLENBQUNKLGNBQWNLLFNBQVM7WUFDMUI7UUFDRjtRQUNBLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ0osUUFBUztZQUNqRCxzQkFBc0IsR0FDdEIsSUFBSUMsUUFBUSxlQUFlQSxRQUFRLGVBQWU7Z0JBQ2hEO1lBQ0Y7WUFDQSxJQUFJTixjQUFjRyxNQUFNLENBQUNHLElBQUksS0FBS04sY0FBY08sUUFBUTtnQkFDdERKLE1BQU0sQ0FBQ0csSUFBSSxHQUFHSixNQUFNQyxNQUFNLENBQUNHLElBQUksRUFBRUM7WUFDbkMsT0FBTyxJQUFJLE9BQU9BLFVBQVUsYUFBYTtnQkFDdkNKLE1BQU0sQ0FBQ0csSUFBSSxHQUFHQztZQUNoQjtRQUNGO0lBQ0Y7SUFFQSxPQUFPSjtBQUNUO0FBRUFPLE9BQU9DLE9BQU8sR0FBR1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvbWVyZ2UuanM/YTU4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi9pc19wbGFpbl9vYmplY3QnKTtcblxuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCAuLi5zb3VyY2VzKSB7XG4gIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNvdXJjZSkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gbWVyZ2UodGFyZ2V0W2tleV0sIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2U7XG4iXSwibmFtZXMiOlsiaXNQbGFpbk9iamVjdCIsInJlcXVpcmUiLCJtZXJnZSIsInRhcmdldCIsInNvdXJjZXMiLCJzb3VyY2UiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/merge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/pick.js":
/*!********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/pick.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function pick(object, ...paths) {\n    const obj = {};\n    for (const path of paths){\n        if (object[path] !== undefined) {\n            obj[path] = object[path];\n        }\n    }\n    return obj;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvcGljay5qcz82ODY3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGljayhvYmplY3QsIC4uLnBhdGhzKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBmb3IgKGNvbnN0IHBhdGggb2YgcGF0aHMpIHtcbiAgICBpZiAob2JqZWN0W3BhdGhdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9ialtwYXRoXSA9IG9iamVjdFtwYXRoXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBpY2siLCJvYmplY3QiLCJwYXRocyIsIm9iaiIsInBhdGgiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsS0FBS0MsTUFBTSxFQUFFLEdBQUdDLEtBQUs7SUFDN0MsTUFBTUMsTUFBTSxDQUFDO0lBQ2IsS0FBSyxNQUFNQyxRQUFRRixNQUFPO1FBQ3hCLElBQUlELE1BQU0sQ0FBQ0csS0FBSyxLQUFLQyxXQUFXO1lBQzlCRixHQUFHLENBQUNDLEtBQUssR0FBR0gsTUFBTSxDQUFDRyxLQUFLO1FBQzFCO0lBQ0Y7SUFDQSxPQUFPRDtBQUNUIiwiZmlsZSI6Iihyc2MpLy4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvcGljay5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/pick.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/process_response.js":
/*!********************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/process_response.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { STATUS_CODES } = __webpack_require__(/*! http */ \"http\");\nconst { format } = __webpack_require__(/*! util */ \"util\");\nconst { OPError } = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst parseWwwAuthenticate = __webpack_require__(/*! ./www_authenticate_parser */ \"(rsc)/./node_modules/openid-client/lib/helpers/www_authenticate_parser.js\");\nconst throwAuthenticateErrors = (response)=>{\n    const params = parseWwwAuthenticate(response.headers[\"www-authenticate\"]);\n    if (params.error) {\n        throw new OPError(params, response);\n    }\n};\nconst isStandardBodyError = (response)=>{\n    let result = false;\n    try {\n        let jsonbody;\n        if (typeof response.body !== \"object\" || Buffer.isBuffer(response.body)) {\n            jsonbody = JSON.parse(response.body);\n        } else {\n            jsonbody = response.body;\n        }\n        result = typeof jsonbody.error === \"string\" && jsonbody.error.length;\n        if (result) Object.defineProperty(response, \"body\", {\n            value: jsonbody,\n            configurable: true\n        });\n    } catch (err) {}\n    return result;\n};\nfunction processResponse(response, { statusCode = 200, body = true, bearer = false } = {}) {\n    if (response.statusCode !== statusCode) {\n        if (bearer) {\n            throwAuthenticateErrors(response);\n        }\n        if (isStandardBodyError(response)) {\n            throw new OPError(response.body, response);\n        }\n        throw new OPError({\n            error: format(\"expected %i %s, got: %i %s\", statusCode, STATUS_CODES[statusCode], response.statusCode, STATUS_CODES[response.statusCode])\n        }, response);\n    }\n    if (body && !response.body) {\n        throw new OPError({\n            error: format(\"expected %i %s with body but no body was returned\", statusCode, STATUS_CODES[statusCode])\n        }, response);\n    }\n    return response.body;\n}\nmodule.exports = processResponse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9wcm9jZXNzX3Jlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRUEsWUFBWSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ2pDLE1BQU0sRUFBRUMsTUFBTSxFQUFFLEdBQUdELG1CQUFPQSxDQUFDO0FBRTNCLE1BQU0sRUFBRUUsT0FBTyxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBQzVCLE1BQU1HLHVCQUF1QkgsbUJBQU9BLENBQUM7QUFFckMsTUFBTUksMEJBQTBCLENBQUNDO0lBQy9CLE1BQU1DLFNBQVNILHFCQUFxQkUsU0FBU0UsT0FBTyxDQUFDLG1CQUFtQjtJQUV4RSxJQUFJRCxPQUFPRSxLQUFLLEVBQUU7UUFDaEIsTUFBTSxJQUFJTixRQUFRSSxRQUFRRDtJQUM1QjtBQUNGO0FBRUEsTUFBTUksc0JBQXNCLENBQUNKO0lBQzNCLElBQUlLLFNBQVM7SUFDYixJQUFJO1FBQ0YsSUFBSUM7UUFDSixJQUFJLE9BQU9OLFNBQVNPLElBQUksS0FBSyxZQUFZQyxPQUFPQyxRQUFRLENBQUNULFNBQVNPLElBQUksR0FBRztZQUN2RUQsV0FBV0ksS0FBS0MsS0FBSyxDQUFDWCxTQUFTTyxJQUFJO1FBQ3JDLE9BQU87WUFDTEQsV0FBV04sU0FBU08sSUFBSTtRQUMxQjtRQUNBRixTQUFTLE9BQU9DLFNBQVNILEtBQUssS0FBSyxZQUFZRyxTQUFTSCxLQUFLLENBQUNTLE1BQU07UUFDcEUsSUFBSVAsUUFBUVEsT0FBT0MsY0FBYyxDQUFDZCxVQUFVLFFBQVE7WUFBRWUsT0FBT1Q7WUFBVVUsY0FBYztRQUFLO0lBQzVGLEVBQUUsT0FBT0MsS0FBSyxDQUFDO0lBRWYsT0FBT1o7QUFDVDtBQUVBLFNBQVNhLGdCQUFnQmxCLFFBQVEsRUFBRSxFQUFFbUIsYUFBYSxHQUFHLEVBQUVaLE9BQU8sSUFBSSxFQUFFYSxTQUFTLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN2RixJQUFJcEIsU0FBU21CLFVBQVUsS0FBS0EsWUFBWTtRQUN0QyxJQUFJQyxRQUFRO1lBQ1ZyQix3QkFBd0JDO1FBQzFCO1FBRUEsSUFBSUksb0JBQW9CSixXQUFXO1lBQ2pDLE1BQU0sSUFBSUgsUUFBUUcsU0FBU08sSUFBSSxFQUFFUDtRQUNuQztRQUVBLE1BQU0sSUFBSUgsUUFDUjtZQUNFTSxPQUFPUCxPQUNMLDhCQUNBdUIsWUFDQXpCLFlBQVksQ0FBQ3lCLFdBQVcsRUFDeEJuQixTQUFTbUIsVUFBVSxFQUNuQnpCLFlBQVksQ0FBQ00sU0FBU21CLFVBQVUsQ0FBQztRQUVyQyxHQUNBbkI7SUFFSjtJQUVBLElBQUlPLFFBQVEsQ0FBQ1AsU0FBU08sSUFBSSxFQUFFO1FBQzFCLE1BQU0sSUFBSVYsUUFDUjtZQUNFTSxPQUFPUCxPQUNMLHFEQUNBdUIsWUFDQXpCLFlBQVksQ0FBQ3lCLFdBQVc7UUFFNUIsR0FDQW5CO0lBRUo7SUFFQSxPQUFPQSxTQUFTTyxJQUFJO0FBQ3RCO0FBRUFjLE9BQU9DLE9BQU8sR0FBR0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvcHJvY2Vzc19yZXNwb25zZS5qcz83ZGU3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgU1RBVFVTX0NPREVTIH0gPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCB7IGZvcm1hdCB9ID0gcmVxdWlyZSgndXRpbCcpO1xuXG5jb25zdCB7IE9QRXJyb3IgfSA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xuY29uc3QgcGFyc2VXd3dBdXRoZW50aWNhdGUgPSByZXF1aXJlKCcuL3d3d19hdXRoZW50aWNhdGVfcGFyc2VyJyk7XG5cbmNvbnN0IHRocm93QXV0aGVudGljYXRlRXJyb3JzID0gKHJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IHBhcnNlV3d3QXV0aGVudGljYXRlKHJlc3BvbnNlLmhlYWRlcnNbJ3d3dy1hdXRoZW50aWNhdGUnXSk7XG5cbiAgaWYgKHBhcmFtcy5lcnJvcikge1xuICAgIHRocm93IG5ldyBPUEVycm9yKHBhcmFtcywgcmVzcG9uc2UpO1xuICB9XG59O1xuXG5jb25zdCBpc1N0YW5kYXJkQm9keUVycm9yID0gKHJlc3BvbnNlKSA9PiB7XG4gIGxldCByZXN1bHQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBsZXQganNvbmJvZHk7XG4gICAgaWYgKHR5cGVvZiByZXNwb25zZS5ib2R5ICE9PSAnb2JqZWN0JyB8fCBCdWZmZXIuaXNCdWZmZXIocmVzcG9uc2UuYm9keSkpIHtcbiAgICAgIGpzb25ib2R5ID0gSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAganNvbmJvZHkgPSByZXNwb25zZS5ib2R5O1xuICAgIH1cbiAgICByZXN1bHQgPSB0eXBlb2YganNvbmJvZHkuZXJyb3IgPT09ICdzdHJpbmcnICYmIGpzb25ib2R5LmVycm9yLmxlbmd0aDtcbiAgICBpZiAocmVzdWx0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcG9uc2UsICdib2R5JywgeyB2YWx1ZToganNvbmJvZHksIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7fVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5mdW5jdGlvbiBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UsIHsgc3RhdHVzQ29kZSA9IDIwMCwgYm9keSA9IHRydWUsIGJlYXJlciA9IGZhbHNlIH0gPSB7fSkge1xuICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gc3RhdHVzQ29kZSkge1xuICAgIGlmIChiZWFyZXIpIHtcbiAgICAgIHRocm93QXV0aGVudGljYXRlRXJyb3JzKHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNTdGFuZGFyZEJvZHlFcnJvcihyZXNwb25zZSkpIHtcbiAgICAgIHRocm93IG5ldyBPUEVycm9yKHJlc3BvbnNlLmJvZHksIHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgT1BFcnJvcihcbiAgICAgIHtcbiAgICAgICAgZXJyb3I6IGZvcm1hdChcbiAgICAgICAgICAnZXhwZWN0ZWQgJWkgJXMsIGdvdDogJWkgJXMnLFxuICAgICAgICAgIHN0YXR1c0NvZGUsXG4gICAgICAgICAgU1RBVFVTX0NPREVTW3N0YXR1c0NvZGVdLFxuICAgICAgICAgIHJlc3BvbnNlLnN0YXR1c0NvZGUsXG4gICAgICAgICAgU1RBVFVTX0NPREVTW3Jlc3BvbnNlLnN0YXR1c0NvZGVdLFxuICAgICAgICApLFxuICAgICAgfSxcbiAgICAgIHJlc3BvbnNlLFxuICAgICk7XG4gIH1cblxuICBpZiAoYm9keSAmJiAhcmVzcG9uc2UuYm9keSkge1xuICAgIHRocm93IG5ldyBPUEVycm9yKFxuICAgICAge1xuICAgICAgICBlcnJvcjogZm9ybWF0KFxuICAgICAgICAgICdleHBlY3RlZCAlaSAlcyB3aXRoIGJvZHkgYnV0IG5vIGJvZHkgd2FzIHJldHVybmVkJyxcbiAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgIFNUQVRVU19DT0RFU1tzdGF0dXNDb2RlXSxcbiAgICAgICAgKSxcbiAgICAgIH0sXG4gICAgICByZXNwb25zZSxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlLmJvZHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1Jlc3BvbnNlO1xuIl0sIm5hbWVzIjpbIlNUQVRVU19DT0RFUyIsInJlcXVpcmUiLCJmb3JtYXQiLCJPUEVycm9yIiwicGFyc2VXd3dBdXRoZW50aWNhdGUiLCJ0aHJvd0F1dGhlbnRpY2F0ZUVycm9ycyIsInJlc3BvbnNlIiwicGFyYW1zIiwiaGVhZGVycyIsImVycm9yIiwiaXNTdGFuZGFyZEJvZHlFcnJvciIsInJlc3VsdCIsImpzb25ib2R5IiwiYm9keSIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiSlNPTiIsInBhcnNlIiwibGVuZ3RoIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsImVyciIsInByb2Nlc3NSZXNwb25zZSIsInN0YXR1c0NvZGUiLCJiZWFyZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/process_response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/request.js":
/*!***********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/request.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const assert = __webpack_require__(/*! assert */ \"assert\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst { once } = __webpack_require__(/*! events */ \"events\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\nconst LRU = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/lru-cache/index.js\");\nconst pkg = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/openid-client/package.json\");\nconst { RPError } = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst pick = __webpack_require__(/*! ./pick */ \"(rsc)/./node_modules/openid-client/lib/helpers/pick.js\");\nconst { deep: defaultsDeep } = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/openid-client/lib/helpers/defaults.js\");\nconst { HTTP_OPTIONS } = __webpack_require__(/*! ./consts */ \"(rsc)/./node_modules/openid-client/lib/helpers/consts.js\");\nlet DEFAULT_HTTP_OPTIONS;\nconst NQCHAR = /^[\\x21\\x23-\\x5B\\x5D-\\x7E]+$/;\nconst allowed = [\n    \"agent\",\n    \"ca\",\n    \"cert\",\n    \"crl\",\n    \"headers\",\n    \"key\",\n    \"lookup\",\n    \"passphrase\",\n    \"pfx\",\n    \"timeout\"\n];\nconst setDefaults = (props, options)=>{\n    DEFAULT_HTTP_OPTIONS = defaultsDeep({}, props.length ? pick(options, ...props) : options, DEFAULT_HTTP_OPTIONS);\n};\nsetDefaults([], {\n    headers: {\n        \"User-Agent\": `${pkg.name}/${pkg.version} (${pkg.homepage})`,\n        \"Accept-Encoding\": \"identity\"\n    },\n    timeout: 3500\n});\nfunction send(req, body, contentType) {\n    if (contentType) {\n        req.removeHeader(\"content-type\");\n        req.setHeader(\"content-type\", contentType);\n    }\n    if (body) {\n        req.removeHeader(\"content-length\");\n        req.setHeader(\"content-length\", Buffer.byteLength(body));\n        req.write(body);\n    }\n    req.end();\n}\nconst nonces = new LRU({\n    max: 100\n});\nmodule.exports = async function request(options, { accessToken, mTLS = false, DPoP } = {}) {\n    let url;\n    try {\n        url = new URL(options.url);\n        delete options.url;\n        assert(/^(https?:)$/.test(url.protocol));\n    } catch (err) {\n        throw new TypeError(\"only valid absolute URLs can be requested\");\n    }\n    const optsFn = this[HTTP_OPTIONS];\n    let opts = options;\n    const nonceKey = `${url.origin}${url.pathname}`;\n    if (DPoP && \"dpopProof\" in this) {\n        opts.headers = opts.headers || {};\n        opts.headers.DPoP = await this.dpopProof({\n            htu: `${url.origin}${url.pathname}`,\n            htm: options.method || \"GET\",\n            nonce: nonces.get(nonceKey)\n        }, DPoP, accessToken);\n    }\n    let userOptions;\n    if (optsFn) {\n        userOptions = pick(optsFn.call(this, url, defaultsDeep({}, opts, DEFAULT_HTTP_OPTIONS)), ...allowed);\n    }\n    opts = defaultsDeep({}, userOptions, opts, DEFAULT_HTTP_OPTIONS);\n    if (mTLS && !opts.pfx && !(opts.key && opts.cert)) {\n        throw new TypeError(\"mutual-TLS certificate and key not set\");\n    }\n    if (opts.searchParams) {\n        for (const [key, value] of Object.entries(opts.searchParams)){\n            url.searchParams.delete(key);\n            url.searchParams.set(key, value);\n        }\n    }\n    let responseType;\n    let form;\n    let json;\n    let body;\n    ({ form, responseType, json, body, ...opts } = opts);\n    for (const [key, value] of Object.entries(opts.headers || {})){\n        if (value === undefined) {\n            delete opts.headers[key];\n        }\n    }\n    let response;\n    const req = (url.protocol === \"https:\" ? https.request : http.request)(url.href, opts);\n    return (async ()=>{\n        if (json) {\n            send(req, JSON.stringify(json), \"application/json\");\n        } else if (form) {\n            send(req, querystring.stringify(form), \"application/x-www-form-urlencoded\");\n        } else if (body) {\n            send(req, body);\n        } else {\n            send(req);\n        }\n        [response] = await Promise.race([\n            once(req, \"response\"),\n            once(req, \"timeout\")\n        ]);\n        // timeout reached\n        if (!response) {\n            req.destroy();\n            throw new RPError(`outgoing request timed out after ${opts.timeout}ms`);\n        }\n        const parts = [];\n        for await (const part of response){\n            parts.push(part);\n        }\n        if (parts.length) {\n            switch(responseType){\n                case \"json\":\n                    {\n                        Object.defineProperty(response, \"body\", {\n                            get () {\n                                let value = Buffer.concat(parts);\n                                try {\n                                    value = JSON.parse(value);\n                                } catch (err) {\n                                    Object.defineProperty(err, \"response\", {\n                                        value: response\n                                    });\n                                    throw err;\n                                } finally{\n                                    Object.defineProperty(response, \"body\", {\n                                        value,\n                                        configurable: true\n                                    });\n                                }\n                                return value;\n                            },\n                            configurable: true\n                        });\n                        break;\n                    }\n                case undefined:\n                case \"buffer\":\n                    {\n                        Object.defineProperty(response, \"body\", {\n                            get () {\n                                const value = Buffer.concat(parts);\n                                Object.defineProperty(response, \"body\", {\n                                    value,\n                                    configurable: true\n                                });\n                                return value;\n                            },\n                            configurable: true\n                        });\n                        break;\n                    }\n                default:\n                    throw new TypeError(\"unsupported responseType request option\");\n            }\n        }\n        return response;\n    })().catch((err)=>{\n        if (response) Object.defineProperty(err, \"response\", {\n            value: response\n        });\n        throw err;\n    }).finally(()=>{\n        const dpopNonce = response && response.headers[\"dpop-nonce\"];\n        if (dpopNonce && NQCHAR.test(dpopNonce)) {\n            nonces.set(nonceKey, dpopNonce);\n        }\n    });\n};\nmodule.exports.setDefaults = setDefaults.bind(undefined, allowed);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js":
/*!******************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/unix_timestamp.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("module.exports = ()=>Math.floor(Date.now() / 1000);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvdW5peF90aW1lc3RhbXAuanM/NGU3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICgpID0+IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93Il0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHLElBQU1DLEtBQUtDLEtBQUssQ0FBQ0MsS0FBS0MsR0FBRyxLQUFLIiwiZmlsZSI6Iihyc2MpLy4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvdW5peF90aW1lc3RhbXAuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/weak_cache.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("module.exports.keystores = new WeakMap();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy93ZWFrX2NhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFBQSx3QkFBd0IsR0FBRyxJQUFJRyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy93ZWFrX2NhY2hlLmpzP2M5MzAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMua2V5c3RvcmVzID0gbmV3IFdlYWtNYXAoKTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwia2V5c3RvcmVzIiwiV2Vha01hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/webfinger_normalize.js":
/*!***********************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/webfinger_normalize.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("// Credit: https://github.com/rohe/pyoidc/blob/master/src/oic/utils/webfinger.py\n// -- Normalization --\n// A string of any other type is interpreted as a URI either the form of scheme\n// \"://\" authority path-abempty [ \"?\" query ] [ \"#\" fragment ] or authority\n// path-abempty [ \"?\" query ] [ \"#\" fragment ] per RFC 3986 [RFC3986] and is\n// normalized according to the following rules:\n//\n// If the user input Identifier does not have an RFC 3986 [RFC3986] scheme\n// portion, the string is interpreted as [userinfo \"@\"] host [\":\" port]\n// path-abempty [ \"?\" query ] [ \"#\" fragment ] per RFC 3986 [RFC3986].\n// If the userinfo component is present and all of the path component, query\n// component, and port component are empty, the acct scheme is assumed. In this\n// case, the normalized URI is formed by prefixing acct: to the string as the\n// scheme. Per the 'acct' URI Scheme [I‑D.ietf‑appsawg‑acct‑uri], if there is an\n// at-sign character ('@') in the userinfo component, it needs to be\n// percent-encoded as described in RFC 3986 [RFC3986].\n// For all other inputs without a scheme portion, the https scheme is assumed,\n// and the normalized URI is formed by prefixing https:// to the string as the\n// scheme.\n// If the resulting URI contains a fragment portion, it MUST be stripped off\n// together with the fragment delimiter character \"#\".\n// The WebFinger [I‑D.ietf‑appsawg‑webfinger] Resource in this case is the\n// resulting URI, and the WebFinger Host is the authority component.\n//\n// Note: Since the definition of authority in RFC 3986 [RFC3986] is\n// [ userinfo \"@\" ] host [ \":\" port ], it is legal to have a user input\n// identifier like userinfo@host:port, e.g., alice@example.com:8080.\nconst PORT = /^\\d+$/;\nfunction hasScheme(input) {\n    if (input.includes(\"://\")) return true;\n    const authority = input.replace(/(\\/|\\?)/g, \"#\").split(\"#\")[0];\n    if (authority.includes(\":\")) {\n        const index = authority.indexOf(\":\");\n        const hostOrPort = authority.slice(index + 1);\n        if (!PORT.test(hostOrPort)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction acctSchemeAssumed(input) {\n    if (!input.includes(\"@\")) return false;\n    const parts = input.split(\"@\");\n    const host = parts[parts.length - 1];\n    return !(host.includes(\":\") || host.includes(\"/\") || host.includes(\"?\"));\n}\nfunction normalize(input) {\n    if (typeof input !== \"string\") {\n        throw new TypeError(\"input must be a string\");\n    }\n    let output;\n    if (hasScheme(input)) {\n        output = input;\n    } else if (acctSchemeAssumed(input)) {\n        output = `acct:${input}`;\n    } else {\n        output = `https://${input}`;\n    }\n    return output.split(\"#\")[0];\n}\nmodule.exports = normalize;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvd2ViZmluZ2VyX25vcm1hbGl6ZS5qcz8zNjZmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENyZWRpdDogaHR0cHM6Ly9naXRodWIuY29tL3JvaGUvcHlvaWRjL2Jsb2IvbWFzdGVyL3NyYy9vaWMvdXRpbHMvd2ViZmluZ2VyLnB5XG5cbi8vIC0tIE5vcm1hbGl6YXRpb24gLS1cbi8vIEEgc3RyaW5nIG9mIGFueSBvdGhlciB0eXBlIGlzIGludGVycHJldGVkIGFzIGEgVVJJIGVpdGhlciB0aGUgZm9ybSBvZiBzY2hlbWVcbi8vIFwiOi8vXCIgYXV0aG9yaXR5IHBhdGgtYWJlbXB0eSBbIFwiP1wiIHF1ZXJ5IF0gWyBcIiNcIiBmcmFnbWVudCBdIG9yIGF1dGhvcml0eVxuLy8gcGF0aC1hYmVtcHR5IFsgXCI/XCIgcXVlcnkgXSBbIFwiI1wiIGZyYWdtZW50IF0gcGVyIFJGQyAzOTg2IFtSRkMzOTg2XSBhbmQgaXNcbi8vIG5vcm1hbGl6ZWQgYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgcnVsZXM6XG4vL1xuLy8gSWYgdGhlIHVzZXIgaW5wdXQgSWRlbnRpZmllciBkb2VzIG5vdCBoYXZlIGFuIFJGQyAzOTg2IFtSRkMzOTg2XSBzY2hlbWVcbi8vIHBvcnRpb24sIHRoZSBzdHJpbmcgaXMgaW50ZXJwcmV0ZWQgYXMgW3VzZXJpbmZvIFwiQFwiXSBob3N0IFtcIjpcIiBwb3J0XVxuLy8gcGF0aC1hYmVtcHR5IFsgXCI/XCIgcXVlcnkgXSBbIFwiI1wiIGZyYWdtZW50IF0gcGVyIFJGQyAzOTg2IFtSRkMzOTg2XS5cbi8vIElmIHRoZSB1c2VyaW5mbyBjb21wb25lbnQgaXMgcHJlc2VudCBhbmQgYWxsIG9mIHRoZSBwYXRoIGNvbXBvbmVudCwgcXVlcnlcbi8vIGNvbXBvbmVudCwgYW5kIHBvcnQgY29tcG9uZW50IGFyZSBlbXB0eSwgdGhlIGFjY3Qgc2NoZW1lIGlzIGFzc3VtZWQuIEluIHRoaXNcbi8vIGNhc2UsIHRoZSBub3JtYWxpemVkIFVSSSBpcyBmb3JtZWQgYnkgcHJlZml4aW5nIGFjY3Q6IHRvIHRoZSBzdHJpbmcgYXMgdGhlXG4vLyBzY2hlbWUuIFBlciB0aGUgJ2FjY3QnIFVSSSBTY2hlbWUgW0nigJFELmlldGbigJFhcHBzYXdn4oCRYWNjdOKAkXVyaV0sIGlmIHRoZXJlIGlzIGFuXG4vLyBhdC1zaWduIGNoYXJhY3RlciAoJ0AnKSBpbiB0aGUgdXNlcmluZm8gY29tcG9uZW50LCBpdCBuZWVkcyB0byBiZVxuLy8gcGVyY2VudC1lbmNvZGVkIGFzIGRlc2NyaWJlZCBpbiBSRkMgMzk4NiBbUkZDMzk4Nl0uXG4vLyBGb3IgYWxsIG90aGVyIGlucHV0cyB3aXRob3V0IGEgc2NoZW1lIHBvcnRpb24sIHRoZSBodHRwcyBzY2hlbWUgaXMgYXNzdW1lZCxcbi8vIGFuZCB0aGUgbm9ybWFsaXplZCBVUkkgaXMgZm9ybWVkIGJ5IHByZWZpeGluZyBodHRwczovLyB0byB0aGUgc3RyaW5nIGFzIHRoZVxuLy8gc2NoZW1lLlxuLy8gSWYgdGhlIHJlc3VsdGluZyBVUkkgY29udGFpbnMgYSBmcmFnbWVudCBwb3J0aW9uLCBpdCBNVVNUIGJlIHN0cmlwcGVkIG9mZlxuLy8gdG9nZXRoZXIgd2l0aCB0aGUgZnJhZ21lbnQgZGVsaW1pdGVyIGNoYXJhY3RlciBcIiNcIi5cbi8vIFRoZSBXZWJGaW5nZXIgW0nigJFELmlldGbigJFhcHBzYXdn4oCRd2ViZmluZ2VyXSBSZXNvdXJjZSBpbiB0aGlzIGNhc2UgaXMgdGhlXG4vLyByZXN1bHRpbmcgVVJJLCBhbmQgdGhlIFdlYkZpbmdlciBIb3N0IGlzIHRoZSBhdXRob3JpdHkgY29tcG9uZW50LlxuLy9cbi8vIE5vdGU6IFNpbmNlIHRoZSBkZWZpbml0aW9uIG9mIGF1dGhvcml0eSBpbiBSRkMgMzk4NiBbUkZDMzk4Nl0gaXNcbi8vIFsgdXNlcmluZm8gXCJAXCIgXSBob3N0IFsgXCI6XCIgcG9ydCBdLCBpdCBpcyBsZWdhbCB0byBoYXZlIGEgdXNlciBpbnB1dFxuLy8gaWRlbnRpZmllciBsaWtlIHVzZXJpbmZvQGhvc3Q6cG9ydCwgZS5nLiwgYWxpY2VAZXhhbXBsZS5jb206ODA4MC5cblxuY29uc3QgUE9SVCA9IC9eXFxkKyQvO1xuXG5mdW5jdGlvbiBoYXNTY2hlbWUoaW5wdXQpIHtcbiAgaWYgKGlucHV0LmluY2x1ZGVzKCc6Ly8nKSkgcmV0dXJuIHRydWU7XG5cbiAgY29uc3QgYXV0aG9yaXR5ID0gaW5wdXQucmVwbGFjZSgvKFxcL3xcXD8pL2csICcjJykuc3BsaXQoJyMnKVswXTtcbiAgaWYgKGF1dGhvcml0eS5pbmNsdWRlcygnOicpKSB7XG4gICAgY29uc3QgaW5kZXggPSBhdXRob3JpdHkuaW5kZXhPZignOicpO1xuICAgIGNvbnN0IGhvc3RPclBvcnQgPSBhdXRob3JpdHkuc2xpY2UoaW5kZXggKyAxKTtcbiAgICBpZiAoIVBPUlQudGVzdChob3N0T3JQb3J0KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhY2N0U2NoZW1lQXNzdW1lZChpbnB1dCkge1xuICBpZiAoIWlucHV0LmluY2x1ZGVzKCdAJykpIHJldHVybiBmYWxzZTtcbiAgY29uc3QgcGFydHMgPSBpbnB1dC5zcGxpdCgnQCcpO1xuICBjb25zdCBob3N0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gIHJldHVybiAhKGhvc3QuaW5jbHVkZXMoJzonKSB8fCBob3N0LmluY2x1ZGVzKCcvJykgfHwgaG9zdC5pbmNsdWRlcygnPycpKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKGlucHV0KSB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5wdXQgbXVzdCBiZSBhIHN0cmluZycpO1xuICB9XG5cbiAgbGV0IG91dHB1dDtcbiAgaWYgKGhhc1NjaGVtZShpbnB1dCkpIHtcbiAgICBvdXRwdXQgPSBpbnB1dDtcbiAgfSBlbHNlIGlmIChhY2N0U2NoZW1lQXNzdW1lZChpbnB1dCkpIHtcbiAgICBvdXRwdXQgPSBgYWNjdDoke2lucHV0fWA7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0gYGh0dHBzOi8vJHtpbnB1dH1gO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dC5zcGxpdCgnIycpWzBdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZTtcbiJdLCJuYW1lcyI6WyJQT1JUIiwiaGFzU2NoZW1lIiwiaW5wdXQiLCJpbmNsdWRlcyIsImF1dGhvcml0eSIsInJlcGxhY2UiLCJzcGxpdCIsImluZGV4IiwiaW5kZXhPZiIsImhvc3RPclBvcnQiLCJzbGljZSIsInRlc3QiLCJhY2N0U2NoZW1lQXNzdW1lZCIsInBhcnRzIiwiaG9zdCIsImxlbmd0aCIsIm5vcm1hbGl6ZSIsIlR5cGVFcnJvciIsIm91dHB1dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLGdGQUFnRjtBQUVoRixzQkFBc0I7QUFDdEIsK0VBQStFO0FBQy9FLDJFQUEyRTtBQUMzRSw0RUFBNEU7QUFDNUUsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsdUVBQXVFO0FBQ3ZFLHNFQUFzRTtBQUN0RSw0RUFBNEU7QUFDNUUsK0VBQStFO0FBQy9FLDZFQUE2RTtBQUM3RSxnRkFBZ0Y7QUFDaEYsb0VBQW9FO0FBQ3BFLHNEQUFzRDtBQUN0RCw4RUFBOEU7QUFDOUUsOEVBQThFO0FBQzlFLFVBQVU7QUFDViw0RUFBNEU7QUFDNUUsc0RBQXNEO0FBQ3RELDBFQUEwRTtBQUMxRSxvRUFBb0U7QUFDcEUsRUFBRTtBQUNGLG1FQUFtRTtBQUNuRSx1RUFBdUU7QUFDdkUsb0VBQW9FO0FBRXBFLE1BQU1BLE9BQU87QUFFYixTQUFTQyxVQUFVQyxLQUFLO0lBQ3RCLElBQUlBLE1BQU1DLFFBQVEsQ0FBQyxRQUFRLE9BQU87SUFFbEMsTUFBTUMsWUFBWUYsTUFBTUcsT0FBTyxDQUFDLFlBQVksS0FBS0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQzlELElBQUlGLFVBQVVELFFBQVEsQ0FBQyxNQUFNO1FBQzNCLE1BQU1JLFFBQVFILFVBQVVJLE9BQU8sQ0FBQztRQUNoQyxNQUFNQyxhQUFhTCxVQUFVTSxLQUFLLENBQUNILFFBQVE7UUFDM0MsSUFBSSxDQUFDUCxLQUFLVyxJQUFJLENBQUNGLGFBQWE7WUFDMUIsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPO0FBQ1Q7QUFFQSxTQUFTRyxrQkFBa0JWLEtBQUs7SUFDOUIsSUFBSSxDQUFDQSxNQUFNQyxRQUFRLENBQUMsTUFBTSxPQUFPO0lBQ2pDLE1BQU1VLFFBQVFYLE1BQU1JLEtBQUssQ0FBQztJQUMxQixNQUFNUSxPQUFPRCxLQUFLLENBQUNBLE1BQU1FLE1BQU0sR0FBRyxFQUFFO0lBQ3BDLE9BQU8sQ0FBRUQsQ0FBQUEsS0FBS1gsUUFBUSxDQUFDLFFBQVFXLEtBQUtYLFFBQVEsQ0FBQyxRQUFRVyxLQUFLWCxRQUFRLENBQUMsSUFBRztBQUN4RTtBQUVBLFNBQVNhLFVBQVVkLEtBQUs7SUFDdEIsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDN0IsTUFBTSxJQUFJZSxVQUFVO0lBQ3RCO0lBRUEsSUFBSUM7SUFDSixJQUFJakIsVUFBVUMsUUFBUTtRQUNwQmdCLFNBQVNoQjtJQUNYLE9BQU8sSUFBSVUsa0JBQWtCVixRQUFRO1FBQ25DZ0IsU0FBUyxDQUFDLEtBQUssRUFBRWhCLE1BQU0sQ0FBQztJQUMxQixPQUFPO1FBQ0xnQixTQUFTLENBQUMsUUFBUSxFQUFFaEIsTUFBTSxDQUFDO0lBQzdCO0lBRUEsT0FBT2dCLE9BQU9aLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUM3QjtBQUVBYSxPQUFPQyxPQUFPLEdBQUdKIiwiZmlsZSI6Iihyc2MpLy4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvd2ViZmluZ2VyX25vcm1hbGl6ZS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/webfinger_normalize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/www_authenticate_parser.js":
/*!***************************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/www_authenticate_parser.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("const REGEXP = /(\\w+)=(\"[^\"]*\")/g;\nmodule.exports = (wwwAuthenticate)=>{\n    const params = {};\n    try {\n        while(REGEXP.exec(wwwAuthenticate) !== null){\n            if (RegExp.$1 && RegExp.$2) {\n                params[RegExp.$1] = RegExp.$2.slice(1, -1);\n            }\n        }\n    } catch (err) {}\n    return params;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvd3d3X2F1dGhlbnRpY2F0ZV9wYXJzZXIuanM/ZjAwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSRUdFWFAgPSAvKFxcdyspPShcIlteXCJdKlwiKS9nO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh3d3dBdXRoZW50aWNhdGUpID0+IHtcbiAgY29uc3QgcGFyYW1zID0ge307XG4gIHRyeSB7XG4gICAgd2hpbGUgKFJFR0VYUC5leGVjKHd3d0F1dGhlbnRpY2F0ZSkgIT09IG51bGwpIHtcbiAgICAgIGlmIChSZWdFeHAuJDEgJiYgUmVnRXhwLiQyKSB7XG4gICAgICAgIHBhcmFtc1tSZWdFeHAuJDFdID0gUmVnRXhwLiQyLnNsaWNlKDEsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge31cblxuICByZXR1cm4gcGFyYW1zO1xufTtcbiJdLCJuYW1lcyI6WyJSRUdFWFAiLCJtb2R1bGUiLCJleHBvcnRzIiwid3d3QXV0aGVudGljYXRlIiwicGFyYW1zIiwiZXhlYyIsIlJlZ0V4cCIsIiQxIiwiJDIiLCJzbGljZSIsImVyciJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsU0FBUztBQUVmQyxPQUFPQyxPQUFPLEdBQUcsQ0FBQ0M7SUFDaEIsTUFBTUMsU0FBUyxDQUFDO0lBQ2hCLElBQUk7UUFDRixNQUFPSixPQUFPSyxJQUFJLENBQUNGLHFCQUFxQixLQUFNO1lBQzVDLElBQUlHLE9BQU9DLEVBQUUsSUFBSUQsT0FBT0UsRUFBRSxFQUFFO2dCQUMxQkosTUFBTSxDQUFDRSxPQUFPQyxFQUFFLENBQUMsR0FBR0QsT0FBT0UsRUFBRSxDQUFDQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQzFDO1FBQ0Y7SUFDRixFQUFFLE9BQU9DLEtBQUssQ0FBQztJQUVmLE9BQU9OO0FBQ1QiLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy93d3dfYXV0aGVudGljYXRlX3BhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/www_authenticate_parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/openid-client/lib/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Issuer = __webpack_require__(/*! ./issuer */ \"(rsc)/./node_modules/openid-client/lib/issuer.js\");\nconst { OPError, RPError } = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst Strategy = __webpack_require__(/*! ./passport_strategy */ \"(rsc)/./node_modules/openid-client/lib/passport_strategy.js\");\nconst TokenSet = __webpack_require__(/*! ./token_set */ \"(rsc)/./node_modules/openid-client/lib/token_set.js\");\nconst { CLOCK_TOLERANCE, HTTP_OPTIONS } = __webpack_require__(/*! ./helpers/consts */ \"(rsc)/./node_modules/openid-client/lib/helpers/consts.js\");\nconst generators = __webpack_require__(/*! ./helpers/generators */ \"(rsc)/./node_modules/openid-client/lib/helpers/generators.js\");\nconst { setDefaults } = __webpack_require__(/*! ./helpers/request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nmodule.exports = {\n    Issuer,\n    Strategy,\n    TokenSet,\n    errors: {\n        OPError,\n        RPError\n    },\n    custom: {\n        setHttpOptionsDefaults: setDefaults,\n        http_options: HTTP_OPTIONS,\n        clock_tolerance: CLOCK_TOLERANCE\n    },\n    generators\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUNyQyxNQUFNRyxXQUFXSCxtQkFBT0EsQ0FBQztBQUN6QixNQUFNSSxXQUFXSixtQkFBT0EsQ0FBQztBQUN6QixNQUFNLEVBQUVLLGVBQWUsRUFBRUMsWUFBWSxFQUFFLEdBQUdOLG1CQUFPQSxDQUFDO0FBQ2xELE1BQU1PLGFBQWFQLG1CQUFPQSxDQUFDO0FBQzNCLE1BQU0sRUFBRVEsV0FBVyxFQUFFLEdBQUdSLG1CQUFPQSxDQUFDO0FBRWhDUyxPQUFPQyxPQUFPLEdBQUc7SUFDZlg7SUFDQUk7SUFDQUM7SUFDQU8sUUFBUTtRQUNOVjtRQUNBQztJQUNGO0lBQ0FVLFFBQVE7UUFDTkMsd0JBQXdCTDtRQUN4Qk0sY0FBY1I7UUFDZFMsaUJBQWlCVjtJQUNuQjtJQUNBRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9pbmRleC5qcz9jZjkxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IElzc3VlciA9IHJlcXVpcmUoJy4vaXNzdWVyJyk7XG5jb25zdCB7IE9QRXJyb3IsIFJQRXJyb3IgfSA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5jb25zdCBTdHJhdGVneSA9IHJlcXVpcmUoJy4vcGFzc3BvcnRfc3RyYXRlZ3knKTtcbmNvbnN0IFRva2VuU2V0ID0gcmVxdWlyZSgnLi90b2tlbl9zZXQnKTtcbmNvbnN0IHsgQ0xPQ0tfVE9MRVJBTkNFLCBIVFRQX09QVElPTlMgfSA9IHJlcXVpcmUoJy4vaGVscGVycy9jb25zdHMnKTtcbmNvbnN0IGdlbmVyYXRvcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMvZ2VuZXJhdG9ycycpO1xuY29uc3QgeyBzZXREZWZhdWx0cyB9ID0gcmVxdWlyZSgnLi9oZWxwZXJzL3JlcXVlc3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIElzc3VlcixcbiAgU3RyYXRlZ3ksXG4gIFRva2VuU2V0LFxuICBlcnJvcnM6IHtcbiAgICBPUEVycm9yLFxuICAgIFJQRXJyb3IsXG4gIH0sXG4gIGN1c3RvbToge1xuICAgIHNldEh0dHBPcHRpb25zRGVmYXVsdHM6IHNldERlZmF1bHRzLFxuICAgIGh0dHBfb3B0aW9uczogSFRUUF9PUFRJT05TLFxuICAgIGNsb2NrX3RvbGVyYW5jZTogQ0xPQ0tfVE9MRVJBTkNFLFxuICB9LFxuICBnZW5lcmF0b3JzLFxufTtcbiJdLCJuYW1lcyI6WyJJc3N1ZXIiLCJyZXF1aXJlIiwiT1BFcnJvciIsIlJQRXJyb3IiLCJTdHJhdGVneSIsIlRva2VuU2V0IiwiQ0xPQ0tfVE9MRVJBTkNFIiwiSFRUUF9PUFRJT05TIiwiZ2VuZXJhdG9ycyIsInNldERlZmF1bHRzIiwibW9kdWxlIiwiZXhwb3J0cyIsImVycm9ycyIsImN1c3RvbSIsInNldEh0dHBPcHRpb25zRGVmYXVsdHMiLCJodHRwX29wdGlvbnMiLCJjbG9ja190b2xlcmFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/issuer.js":
/*!**************************************************!*\
  !*** ./node_modules/openid-client/lib/issuer.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { inspect } = __webpack_require__(/*! util */ \"util\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst { RPError } = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst getClient = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/openid-client/lib/client.js\");\nconst registry = __webpack_require__(/*! ./issuer_registry */ \"(rsc)/./node_modules/openid-client/lib/issuer_registry.js\");\nconst processResponse = __webpack_require__(/*! ./helpers/process_response */ \"(rsc)/./node_modules/openid-client/lib/helpers/process_response.js\");\nconst webfingerNormalize = __webpack_require__(/*! ./helpers/webfinger_normalize */ \"(rsc)/./node_modules/openid-client/lib/helpers/webfinger_normalize.js\");\nconst request = __webpack_require__(/*! ./helpers/request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nconst clone = __webpack_require__(/*! ./helpers/deep_clone */ \"(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\");\nconst { keystore } = __webpack_require__(/*! ./helpers/issuer */ \"(rsc)/./node_modules/openid-client/lib/helpers/issuer.js\");\nconst AAD_MULTITENANT_DISCOVERY = [\n    \"https://login.microsoftonline.com/common/.well-known/openid-configuration\",\n    \"https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\",\n    \"https://login.microsoftonline.com/organizations/v2.0/.well-known/openid-configuration\",\n    \"https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration\"\n];\nconst AAD_MULTITENANT = Symbol();\nconst ISSUER_DEFAULTS = {\n    claim_types_supported: [\n        \"normal\"\n    ],\n    claims_parameter_supported: false,\n    grant_types_supported: [\n        \"authorization_code\",\n        \"implicit\"\n    ],\n    request_parameter_supported: false,\n    request_uri_parameter_supported: true,\n    require_request_uri_registration: false,\n    response_modes_supported: [\n        \"query\",\n        \"fragment\"\n    ],\n    token_endpoint_auth_methods_supported: [\n        \"client_secret_basic\"\n    ]\n};\nclass Issuer {\n    #metadata;\n    constructor(meta = {}){\n        const aadIssValidation = meta[AAD_MULTITENANT];\n        delete meta[AAD_MULTITENANT];\n        [\n            \"introspection\",\n            \"revocation\"\n        ].forEach((endpoint)=>{\n            // if intro/revocation endpoint auth specific meta is missing use the token ones if they\n            // are defined\n            if (meta[`${endpoint}_endpoint`] && meta[`${endpoint}_endpoint_auth_methods_supported`] === undefined && meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] === undefined) {\n                if (meta.token_endpoint_auth_methods_supported) {\n                    meta[`${endpoint}_endpoint_auth_methods_supported`] = meta.token_endpoint_auth_methods_supported;\n                }\n                if (meta.token_endpoint_auth_signing_alg_values_supported) {\n                    meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] = meta.token_endpoint_auth_signing_alg_values_supported;\n                }\n            }\n        });\n        this.#metadata = new Map();\n        Object.entries(meta).forEach(([key, value])=>{\n            this.#metadata.set(key, value);\n            if (!this[key]) {\n                Object.defineProperty(this, key, {\n                    get () {\n                        return this.#metadata.get(key);\n                    },\n                    enumerable: true\n                });\n            }\n        });\n        registry.set(this.issuer, this);\n        const Client = getClient(this, aadIssValidation);\n        Object.defineProperties(this, {\n            Client: {\n                value: Client,\n                enumerable: true\n            },\n            FAPI1Client: {\n                value: class FAPI1Client extends Client {\n                },\n                enumerable: true\n            },\n            FAPI2Client: {\n                value: class FAPI2Client extends Client {\n                },\n                enumerable: true\n            }\n        });\n    }\n    get metadata() {\n        return clone(Object.fromEntries(this.#metadata.entries()));\n    }\n    static async webfinger(input) {\n        const resource = webfingerNormalize(input);\n        const { host } = url.parse(resource);\n        const webfingerUrl = `https://${host}/.well-known/webfinger`;\n        const response = await request.call(this, {\n            method: \"GET\",\n            url: webfingerUrl,\n            responseType: \"json\",\n            searchParams: {\n                resource,\n                rel: \"http://openid.net/specs/connect/1.0/issuer\"\n            },\n            headers: {\n                Accept: \"application/json\"\n            }\n        });\n        const body = processResponse(response);\n        const location = Array.isArray(body.links) && body.links.find((link)=>typeof link === \"object\" && link.rel === \"http://openid.net/specs/connect/1.0/issuer\" && link.href);\n        if (!location) {\n            throw new RPError({\n                message: \"no issuer found in webfinger response\",\n                body\n            });\n        }\n        if (typeof location.href !== \"string\" || !location.href.startsWith(\"https://\")) {\n            throw new RPError({\n                printf: [\n                    \"invalid issuer location %s\",\n                    location.href\n                ],\n                body\n            });\n        }\n        const expectedIssuer = location.href;\n        if (registry.has(expectedIssuer)) {\n            return registry.get(expectedIssuer);\n        }\n        const issuer = await this.discover(expectedIssuer);\n        if (issuer.issuer !== expectedIssuer) {\n            registry.del(issuer.issuer);\n            throw new RPError(\"discovered issuer mismatch, expected %s, got: %s\", expectedIssuer, issuer.issuer);\n        }\n        return issuer;\n    }\n    static async discover(uri) {\n        const wellKnownUri = resolveWellKnownUri(uri);\n        const response = await request.call(this, {\n            method: \"GET\",\n            responseType: \"json\",\n            url: wellKnownUri,\n            headers: {\n                Accept: \"application/json\"\n            }\n        });\n        const body = processResponse(response);\n        return new Issuer({\n            ...ISSUER_DEFAULTS,\n            ...body,\n            [AAD_MULTITENANT]: !!AAD_MULTITENANT_DISCOVERY.find((discoveryURL)=>wellKnownUri.startsWith(discoveryURL))\n        });\n    }\n    async reloadJwksUri() {\n        await keystore.call(this, true);\n    }\n    /* istanbul ignore next */ [inspect.custom]() {\n        return `${this.constructor.name} ${inspect(this.metadata, {\n            depth: Infinity,\n            colors: process.stdout.isTTY,\n            compact: false,\n            sorted: true\n        })}`;\n    }\n}\nfunction resolveWellKnownUri(uri) {\n    const parsed = url.parse(uri);\n    if (parsed.pathname.includes(\"/.well-known/\")) {\n        return uri;\n    } else {\n        let pathname;\n        if (parsed.pathname.endsWith(\"/\")) {\n            pathname = `${parsed.pathname}.well-known/openid-configuration`;\n        } else {\n            pathname = `${parsed.pathname}/.well-known/openid-configuration`;\n        }\n        return url.format({\n            ...parsed,\n            pathname\n        });\n    }\n}\nmodule.exports = Issuer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/issuer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/issuer_registry.js":
/*!***********************************************************!*\
  !*** ./node_modules/openid-client/lib/issuer_registry.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const LRU = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/lru-cache/index.js\");\nmodule.exports = new LRU({\n    max: 100\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaXNzdWVyX3JlZ2lzdHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU1DLG1CQUFPQSxDQUFDO0FBRXBCQyxPQUFPQyxPQUFPLEdBQUcsSUFBSUgsSUFBSTtJQUFFSSxLQUFLO0FBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2lzc3Vlcl9yZWdpc3RyeS5qcz9iMDZkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IExSVSA9IHJlcXVpcmUoJ2xydS1jYWNoZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBMUlUoeyBtYXg6IDEwMCB9KTtcbiJdLCJuYW1lcyI6WyJMUlUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1heCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/issuer_registry.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/passport_strategy.js":
/*!*************************************************************!*\
  !*** ./node_modules/openid-client/lib/passport_strategy.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const url = __webpack_require__(/*! url */ \"url\");\nconst { format } = __webpack_require__(/*! util */ \"util\");\nconst cloneDeep = __webpack_require__(/*! ./helpers/deep_clone */ \"(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\");\nconst { RPError, OPError } = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst { BaseClient } = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/openid-client/lib/client.js\");\nconst { random, codeChallenge } = __webpack_require__(/*! ./helpers/generators */ \"(rsc)/./node_modules/openid-client/lib/helpers/generators.js\");\nconst pick = __webpack_require__(/*! ./helpers/pick */ \"(rsc)/./node_modules/openid-client/lib/helpers/pick.js\");\nconst { resolveResponseType, resolveRedirectUri } = __webpack_require__(/*! ./helpers/client */ \"(rsc)/./node_modules/openid-client/lib/helpers/client.js\");\nfunction verified(err, user, info = {}) {\n    if (err) {\n        this.error(err);\n    } else if (!user) {\n        this.fail(info);\n    } else {\n        this.success(user, info);\n    }\n}\nfunction OpenIDConnectStrategy({ client, params = {}, passReqToCallback = false, sessionKey, usePKCE = true, extras = {} } = {}, verify) {\n    if (!(client instanceof BaseClient)) {\n        throw new TypeError(\"client must be an instance of openid-client Client\");\n    }\n    if (typeof verify !== \"function\") {\n        throw new TypeError(\"verify callback must be a function\");\n    }\n    if (!client.issuer || !client.issuer.issuer) {\n        throw new TypeError(\"client must have an issuer with an identifier\");\n    }\n    this._client = client;\n    this._issuer = client.issuer;\n    this._verify = verify;\n    this._passReqToCallback = passReqToCallback;\n    this._usePKCE = usePKCE;\n    this._key = sessionKey || `oidc:${url.parse(this._issuer.issuer).hostname}`;\n    this._params = cloneDeep(params);\n    // state and nonce are handled in authenticate()\n    delete this._params.state;\n    delete this._params.nonce;\n    this._extras = cloneDeep(extras);\n    if (!this._params.response_type) this._params.response_type = resolveResponseType.call(client);\n    if (!this._params.redirect_uri) this._params.redirect_uri = resolveRedirectUri.call(client);\n    if (!this._params.scope) this._params.scope = \"openid\";\n    if (this._usePKCE === true) {\n        const supportedMethods = Array.isArray(this._issuer.code_challenge_methods_supported) ? this._issuer.code_challenge_methods_supported : false;\n        if (supportedMethods && supportedMethods.includes(\"S256\")) {\n            this._usePKCE = \"S256\";\n        } else if (supportedMethods && supportedMethods.includes(\"plain\")) {\n            this._usePKCE = \"plain\";\n        } else if (supportedMethods) {\n            throw new TypeError(\"neither code_challenge_method supported by the client is supported by the issuer\");\n        } else {\n            this._usePKCE = \"S256\";\n        }\n    } else if (typeof this._usePKCE === \"string\" && ![\n        \"plain\",\n        \"S256\"\n    ].includes(this._usePKCE)) {\n        throw new TypeError(`${this._usePKCE} is not valid/implemented PKCE code_challenge_method`);\n    }\n    this.name = url.parse(client.issuer.issuer).hostname;\n}\nOpenIDConnectStrategy.prototype.authenticate = function authenticate(req, options) {\n    (async ()=>{\n        const client = this._client;\n        if (!req.session) {\n            throw new TypeError(\"authentication requires session support\");\n        }\n        const reqParams = client.callbackParams(req);\n        const sessionKey = this._key;\n        const { 0: parameter, length } = Object.keys(reqParams);\n        /**\n     * Start authentication request if this has no authorization response parameters or\n     * this might a login initiated from a third party as per\n     * https://openid.net/specs/openid-connect-core-1_0.html#ThirdPartyInitiatedLogin.\n     */ if (length === 0 || length === 1 && parameter === \"iss\") {\n            // provide options object with extra authentication parameters\n            const params = {\n                state: random(),\n                ...this._params,\n                ...options\n            };\n            if (!params.nonce && params.response_type.includes(\"id_token\")) {\n                params.nonce = random();\n            }\n            req.session[sessionKey] = pick(params, \"nonce\", \"state\", \"max_age\", \"response_type\");\n            if (this._usePKCE && params.response_type.includes(\"code\")) {\n                const verifier = random();\n                req.session[sessionKey].code_verifier = verifier;\n                switch(this._usePKCE){\n                    case \"S256\":\n                        params.code_challenge = codeChallenge(verifier);\n                        params.code_challenge_method = \"S256\";\n                        break;\n                    case \"plain\":\n                        params.code_challenge = verifier;\n                        break;\n                }\n            }\n            this.redirect(client.authorizationUrl(params));\n            return;\n        }\n        /* end authentication request */ /* start authentication response */ const session = req.session[sessionKey];\n        if (Object.keys(session || {}).length === 0) {\n            throw new Error(format('did not find expected authorization request details in session, req.session[\"%s\"] is %j', sessionKey, session));\n        }\n        const { state, nonce, max_age: maxAge, code_verifier: codeVerifier, response_type: responseType } = session;\n        try {\n            delete req.session[sessionKey];\n        } catch (err) {}\n        const opts = {\n            redirect_uri: this._params.redirect_uri,\n            ...options\n        };\n        const checks = {\n            state,\n            nonce,\n            max_age: maxAge,\n            code_verifier: codeVerifier,\n            response_type: responseType\n        };\n        const tokenset = await client.callback(opts.redirect_uri, reqParams, checks, this._extras);\n        const passReq = this._passReqToCallback;\n        const loadUserinfo = this._verify.length > (passReq ? 3 : 2) && client.issuer.userinfo_endpoint;\n        const args = [\n            tokenset,\n            verified.bind(this)\n        ];\n        if (loadUserinfo) {\n            if (!tokenset.access_token) {\n                throw new RPError({\n                    message: \"expected access_token to be returned when asking for userinfo in verify callback\",\n                    tokenset\n                });\n            }\n            const userinfo = await client.userinfo(tokenset);\n            args.splice(1, 0, userinfo);\n        }\n        if (passReq) {\n            args.unshift(req);\n        }\n        this._verify(...args);\n    /* end authentication response */ })().catch((error)=>{\n        if (error instanceof OPError && error.error !== \"server_error\" && !error.error.startsWith(\"invalid\") || error instanceof RPError) {\n            this.fail(error);\n        } else {\n            this.error(error);\n        }\n    });\n};\nmodule.exports = OpenIDConnectStrategy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/passport_strategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/token_set.js":
/*!*****************************************************!*\
  !*** ./node_modules/openid-client/lib/token_set.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const base64url = __webpack_require__(/*! ./helpers/base64url */ \"(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\");\nconst now = __webpack_require__(/*! ./helpers/unix_timestamp */ \"(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\");\nclass TokenSet {\n    constructor(values){\n        Object.assign(this, values);\n        const { constructor, ...properties } = Object.getOwnPropertyDescriptors(this.constructor.prototype);\n        Object.defineProperties(this, properties);\n    }\n    set expires_in(value) {\n        this.expires_at = now() + Number(value);\n    }\n    get expires_in() {\n        return Math.max.apply(null, [\n            this.expires_at - now(),\n            0\n        ]);\n    }\n    expired() {\n        return this.expires_in === 0;\n    }\n    claims() {\n        if (!this.id_token) {\n            throw new TypeError(\"id_token not present in TokenSet\");\n        }\n        return JSON.parse(base64url.decode(this.id_token.split(\".\")[1]));\n    }\n}\nmodule.exports = TokenSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvdG9rZW5fc2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1DLE1BQU1ELG1CQUFPQSxDQUFDO0FBRXBCLE1BQU1FO0lBQ0pDLFlBQVlDLE1BQU0sQ0FBRTtRQUNsQkMsT0FBT0MsTUFBTSxDQUFDLElBQUksRUFBRUY7UUFDcEIsTUFBTSxFQUFFRCxXQUFXLEVBQUUsR0FBR0ksWUFBWSxHQUFHRixPQUFPRyx5QkFBeUIsQ0FDckUsSUFBSSxDQUFDTCxXQUFXLENBQUNNLFNBQVM7UUFHNUJKLE9BQU9LLGdCQUFnQixDQUFDLElBQUksRUFBRUg7SUFDaEM7SUFFQSxJQUFJSSxXQUFXQyxLQUFLLEVBQUU7UUFDcEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdaLFFBQVFhLE9BQU9GO0lBQ25DO0lBRUEsSUFBSUQsYUFBYTtRQUNmLE9BQU9JLEtBQUtDLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDLE1BQU07WUFBQyxJQUFJLENBQUNKLFVBQVUsR0FBR1o7WUFBTztTQUFFO0lBQzFEO0lBRUFpQixVQUFVO1FBQ1IsT0FBTyxJQUFJLENBQUNQLFVBQVUsS0FBSztJQUM3QjtJQUVBUSxTQUFTO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQ0MsUUFBUSxFQUFFO1lBQ2xCLE1BQU0sSUFBSUMsVUFBVTtRQUN0QjtRQUVBLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ3hCLFVBQVV5QixNQUFNLENBQUMsSUFBSSxDQUFDSixRQUFRLENBQUNLLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNoRTtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi90b2tlbl9zZXQuanM/MjgzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiYXNlNjR1cmwgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmFzZTY0dXJsJyk7XG5jb25zdCBub3cgPSByZXF1aXJlKCcuL2hlbHBlcnMvdW5peF90aW1lc3RhbXAnKTtcblxuY2xhc3MgVG9rZW5TZXQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZXMpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHZhbHVlcyk7XG4gICAgY29uc3QgeyBjb25zdHJ1Y3RvciwgLi4ucHJvcGVydGllcyB9ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcbiAgICApO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywgcHJvcGVydGllcyk7XG4gIH1cblxuICBzZXQgZXhwaXJlc19pbih2YWx1ZSkge1xuICAgIHRoaXMuZXhwaXJlc19hdCA9IG5vdygpICsgTnVtYmVyKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBleHBpcmVzX2luKCkge1xuICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBbdGhpcy5leHBpcmVzX2F0IC0gbm93KCksIDBdKTtcbiAgfVxuXG4gIGV4cGlyZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhwaXJlc19pbiA9PT0gMDtcbiAgfVxuXG4gIGNsYWltcygpIHtcbiAgICBpZiAoIXRoaXMuaWRfdG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lkX3Rva2VuIG5vdCBwcmVzZW50IGluIFRva2VuU2V0Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoYmFzZTY0dXJsLmRlY29kZSh0aGlzLmlkX3Rva2VuLnNwbGl0KCcuJylbMV0pKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRva2VuU2V0O1xuIl0sIm5hbWVzIjpbImJhc2U2NHVybCIsInJlcXVpcmUiLCJub3ciLCJUb2tlblNldCIsImNvbnN0cnVjdG9yIiwidmFsdWVzIiwiT2JqZWN0IiwiYXNzaWduIiwicHJvcGVydGllcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJwcm90b3R5cGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZXhwaXJlc19pbiIsInZhbHVlIiwiZXhwaXJlc19hdCIsIk51bWJlciIsIk1hdGgiLCJtYXgiLCJhcHBseSIsImV4cGlyZWQiLCJjbGFpbXMiLCJpZF90b2tlbiIsIlR5cGVFcnJvciIsIkpTT04iLCJwYXJzZSIsImRlY29kZSIsInNwbGl0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/token_set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.cryptoRuntime = exports.base64url = exports.generateSecret = exports.generateKeyPair = exports.errors = exports.decodeJwt = exports.decodeProtectedHeader = exports.importJWK = exports.importX509 = exports.importPKCS8 = exports.importSPKI = exports.exportJWK = exports.exportSPKI = exports.exportPKCS8 = exports.UnsecuredJWT = exports.createRemoteJWKSet = exports.createLocalJWKSet = exports.EmbeddedJWK = exports.calculateJwkThumbprintUri = exports.calculateJwkThumbprint = exports.EncryptJWT = exports.SignJWT = exports.GeneralSign = exports.FlattenedSign = exports.CompactSign = exports.FlattenedEncrypt = exports.CompactEncrypt = exports.jwtDecrypt = exports.jwtVerify = exports.generalVerify = exports.flattenedVerify = exports.compactVerify = exports.GeneralEncrypt = exports.generalDecrypt = exports.flattenedDecrypt = exports.compactDecrypt = void 0;\nvar decrypt_js_1 = __webpack_require__(/*! ./jwe/compact/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js\");\nObject.defineProperty(exports, \"compactDecrypt\", ({\n    enumerable: true,\n    get: function() {\n        return decrypt_js_1.compactDecrypt;\n    }\n}));\nvar decrypt_js_2 = __webpack_require__(/*! ./jwe/flattened/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js\");\nObject.defineProperty(exports, \"flattenedDecrypt\", ({\n    enumerable: true,\n    get: function() {\n        return decrypt_js_2.flattenedDecrypt;\n    }\n}));\nvar decrypt_js_3 = __webpack_require__(/*! ./jwe/general/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/decrypt.js\");\nObject.defineProperty(exports, \"generalDecrypt\", ({\n    enumerable: true,\n    get: function() {\n        return decrypt_js_3.generalDecrypt;\n    }\n}));\nvar encrypt_js_1 = __webpack_require__(/*! ./jwe/general/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/encrypt.js\");\nObject.defineProperty(exports, \"GeneralEncrypt\", ({\n    enumerable: true,\n    get: function() {\n        return encrypt_js_1.GeneralEncrypt;\n    }\n}));\nvar verify_js_1 = __webpack_require__(/*! ./jws/compact/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js\");\nObject.defineProperty(exports, \"compactVerify\", ({\n    enumerable: true,\n    get: function() {\n        return verify_js_1.compactVerify;\n    }\n}));\nvar verify_js_2 = __webpack_require__(/*! ./jws/flattened/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js\");\nObject.defineProperty(exports, \"flattenedVerify\", ({\n    enumerable: true,\n    get: function() {\n        return verify_js_2.flattenedVerify;\n    }\n}));\nvar verify_js_3 = __webpack_require__(/*! ./jws/general/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/verify.js\");\nObject.defineProperty(exports, \"generalVerify\", ({\n    enumerable: true,\n    get: function() {\n        return verify_js_3.generalVerify;\n    }\n}));\nvar verify_js_4 = __webpack_require__(/*! ./jwt/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/verify.js\");\nObject.defineProperty(exports, \"jwtVerify\", ({\n    enumerable: true,\n    get: function() {\n        return verify_js_4.jwtVerify;\n    }\n}));\nvar decrypt_js_4 = __webpack_require__(/*! ./jwt/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/decrypt.js\");\nObject.defineProperty(exports, \"jwtDecrypt\", ({\n    enumerable: true,\n    get: function() {\n        return decrypt_js_4.jwtDecrypt;\n    }\n}));\nvar encrypt_js_2 = __webpack_require__(/*! ./jwe/compact/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js\");\nObject.defineProperty(exports, \"CompactEncrypt\", ({\n    enumerable: true,\n    get: function() {\n        return encrypt_js_2.CompactEncrypt;\n    }\n}));\nvar encrypt_js_3 = __webpack_require__(/*! ./jwe/flattened/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js\");\nObject.defineProperty(exports, \"FlattenedEncrypt\", ({\n    enumerable: true,\n    get: function() {\n        return encrypt_js_3.FlattenedEncrypt;\n    }\n}));\nvar sign_js_1 = __webpack_require__(/*! ./jws/compact/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js\");\nObject.defineProperty(exports, \"CompactSign\", ({\n    enumerable: true,\n    get: function() {\n        return sign_js_1.CompactSign;\n    }\n}));\nvar sign_js_2 = __webpack_require__(/*! ./jws/flattened/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js\");\nObject.defineProperty(exports, \"FlattenedSign\", ({\n    enumerable: true,\n    get: function() {\n        return sign_js_2.FlattenedSign;\n    }\n}));\nvar sign_js_3 = __webpack_require__(/*! ./jws/general/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/sign.js\");\nObject.defineProperty(exports, \"GeneralSign\", ({\n    enumerable: true,\n    get: function() {\n        return sign_js_3.GeneralSign;\n    }\n}));\nvar sign_js_4 = __webpack_require__(/*! ./jwt/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/sign.js\");\nObject.defineProperty(exports, \"SignJWT\", ({\n    enumerable: true,\n    get: function() {\n        return sign_js_4.SignJWT;\n    }\n}));\nvar encrypt_js_4 = __webpack_require__(/*! ./jwt/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/encrypt.js\");\nObject.defineProperty(exports, \"EncryptJWT\", ({\n    enumerable: true,\n    get: function() {\n        return encrypt_js_4.EncryptJWT;\n    }\n}));\nvar thumbprint_js_1 = __webpack_require__(/*! ./jwk/thumbprint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/thumbprint.js\");\nObject.defineProperty(exports, \"calculateJwkThumbprint\", ({\n    enumerable: true,\n    get: function() {\n        return thumbprint_js_1.calculateJwkThumbprint;\n    }\n}));\nObject.defineProperty(exports, \"calculateJwkThumbprintUri\", ({\n    enumerable: true,\n    get: function() {\n        return thumbprint_js_1.calculateJwkThumbprintUri;\n    }\n}));\nvar embedded_js_1 = __webpack_require__(/*! ./jwk/embedded.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/embedded.js\");\nObject.defineProperty(exports, \"EmbeddedJWK\", ({\n    enumerable: true,\n    get: function() {\n        return embedded_js_1.EmbeddedJWK;\n    }\n}));\nvar local_js_1 = __webpack_require__(/*! ./jwks/local.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js\");\nObject.defineProperty(exports, \"createLocalJWKSet\", ({\n    enumerable: true,\n    get: function() {\n        return local_js_1.createLocalJWKSet;\n    }\n}));\nvar remote_js_1 = __webpack_require__(/*! ./jwks/remote.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/remote.js\");\nObject.defineProperty(exports, \"createRemoteJWKSet\", ({\n    enumerable: true,\n    get: function() {\n        return remote_js_1.createRemoteJWKSet;\n    }\n}));\nvar unsecured_js_1 = __webpack_require__(/*! ./jwt/unsecured.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/unsecured.js\");\nObject.defineProperty(exports, \"UnsecuredJWT\", ({\n    enumerable: true,\n    get: function() {\n        return unsecured_js_1.UnsecuredJWT;\n    }\n}));\nvar export_js_1 = __webpack_require__(/*! ./key/export.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js\");\nObject.defineProperty(exports, \"exportPKCS8\", ({\n    enumerable: true,\n    get: function() {\n        return export_js_1.exportPKCS8;\n    }\n}));\nObject.defineProperty(exports, \"exportSPKI\", ({\n    enumerable: true,\n    get: function() {\n        return export_js_1.exportSPKI;\n    }\n}));\nObject.defineProperty(exports, \"exportJWK\", ({\n    enumerable: true,\n    get: function() {\n        return export_js_1.exportJWK;\n    }\n}));\nvar import_js_1 = __webpack_require__(/*! ./key/import.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\");\nObject.defineProperty(exports, \"importSPKI\", ({\n    enumerable: true,\n    get: function() {\n        return import_js_1.importSPKI;\n    }\n}));\nObject.defineProperty(exports, \"importPKCS8\", ({\n    enumerable: true,\n    get: function() {\n        return import_js_1.importPKCS8;\n    }\n}));\nObject.defineProperty(exports, \"importX509\", ({\n    enumerable: true,\n    get: function() {\n        return import_js_1.importX509;\n    }\n}));\nObject.defineProperty(exports, \"importJWK\", ({\n    enumerable: true,\n    get: function() {\n        return import_js_1.importJWK;\n    }\n}));\nvar decode_protected_header_js_1 = __webpack_require__(/*! ./util/decode_protected_header.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_protected_header.js\");\nObject.defineProperty(exports, \"decodeProtectedHeader\", ({\n    enumerable: true,\n    get: function() {\n        return decode_protected_header_js_1.decodeProtectedHeader;\n    }\n}));\nvar decode_jwt_js_1 = __webpack_require__(/*! ./util/decode_jwt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_jwt.js\");\nObject.defineProperty(exports, \"decodeJwt\", ({\n    enumerable: true,\n    get: function() {\n        return decode_jwt_js_1.decodeJwt;\n    }\n}));\nexports.errors = __webpack_require__(/*! ./util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nvar generate_key_pair_js_1 = __webpack_require__(/*! ./key/generate_key_pair.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_key_pair.js\");\nObject.defineProperty(exports, \"generateKeyPair\", ({\n    enumerable: true,\n    get: function() {\n        return generate_key_pair_js_1.generateKeyPair;\n    }\n}));\nvar generate_secret_js_1 = __webpack_require__(/*! ./key/generate_secret.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_secret.js\");\nObject.defineProperty(exports, \"generateSecret\", ({\n    enumerable: true,\n    get: function() {\n        return generate_secret_js_1.generateSecret;\n    }\n}));\nexports.base64url = __webpack_require__(/*! ./util/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js\");\nvar runtime_js_1 = __webpack_require__(/*! ./util/runtime.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/runtime.js\");\nObject.defineProperty(exports, \"cryptoRuntime\", ({\n    enumerable: true,\n    get: function() {\n        return runtime_js_1.default;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.compactDecrypt = void 0;\nconst decrypt_js_1 = __webpack_require__(/*! ../flattened/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nasync function compactDecrypt(jwe, key, options) {\n    if (jwe instanceof Uint8Array) {\n        jwe = buffer_utils_js_1.decoder.decode(jwe);\n    }\n    if (typeof jwe !== \"string\") {\n        throw new errors_js_1.JWEInvalid(\"Compact JWE must be a string or Uint8Array\");\n    }\n    const { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag, length } = jwe.split(\".\");\n    if (length !== 5) {\n        throw new errors_js_1.JWEInvalid(\"Invalid Compact JWE\");\n    }\n    const decrypted = await (0, decrypt_js_1.flattenedDecrypt)({\n        ciphertext,\n        iv: iv || undefined,\n        protected: protectedHeader || undefined,\n        tag: tag || undefined,\n        encrypted_key: encryptedKey || undefined\n    }, key, options);\n    const result = {\n        plaintext: decrypted.plaintext,\n        protectedHeader: decrypted.protectedHeader\n    };\n    if (typeof key === \"function\") {\n        return {\n            ...result,\n            key: decrypted.key\n        };\n    }\n    return result;\n}\nexports.compactDecrypt = compactDecrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9jb21wYWN0L2RlY3J5cHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsZUFBZUMsbUJBQU9BLENBQUMsNEhBQXlCO0FBQ3RELE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLCtHQUFzQjtBQUNsRCxNQUFNRSxvQkFBb0JGLG1CQUFPQSxDQUFDLHlIQUEyQjtBQUM3RCxlQUFlRixlQUFlSyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsT0FBTztJQUMzQyxJQUFJRixlQUFlRyxZQUFZO1FBQzNCSCxNQUFNRCxrQkFBa0JLLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDTDtJQUMzQztJQUNBLElBQUksT0FBT0EsUUFBUSxVQUFVO1FBQ3pCLE1BQU0sSUFBSUYsWUFBWVEsVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsTUFBTSxFQUFFLEdBQUdDLGVBQWUsRUFBRSxHQUFHQyxZQUFZLEVBQUUsR0FBR0MsRUFBRSxFQUFFLEdBQUdDLFVBQVUsRUFBRSxHQUFHQyxHQUFHLEVBQUVDLE1BQU0sRUFBRyxHQUFHWixJQUFJYSxLQUFLLENBQUM7SUFDakcsSUFBSUQsV0FBVyxHQUFHO1FBQ2QsTUFBTSxJQUFJZCxZQUFZUSxVQUFVLENBQUM7SUFDckM7SUFDQSxNQUFNUSxZQUFZLE1BQU0sQ0FBQyxHQUFHbEIsYUFBYW1CLGdCQUFnQixFQUFFO1FBQ3ZETDtRQUNBRCxJQUFLQSxNQUFNTztRQUNYQyxXQUFXVixtQkFBbUJTO1FBQzlCTCxLQUFNQSxPQUFPSztRQUNiRSxlQUFlVixnQkFBZ0JRO0lBQ25DLEdBQUdmLEtBQUtDO0lBQ1IsTUFBTWlCLFNBQVM7UUFBRUMsV0FBV04sVUFBVU0sU0FBUztRQUFFYixpQkFBaUJPLFVBQVVQLGVBQWU7SUFBQztJQUM1RixJQUFJLE9BQU9OLFFBQVEsWUFBWTtRQUMzQixPQUFPO1lBQUUsR0FBR2tCLE1BQU07WUFBRWxCLEtBQUthLFVBQVViLEdBQUc7UUFBQztJQUMzQztJQUNBLE9BQU9rQjtBQUNYO0FBQ0ExQixzQkFBc0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd2UvY29tcGFjdC9kZWNyeXB0LmpzPzdkY2IiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXBhY3REZWNyeXB0ID0gdm9pZCAwO1xuY29uc3QgZGVjcnlwdF9qc18xID0gcmVxdWlyZShcIi4uL2ZsYXR0ZW5lZC9kZWNyeXB0LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gY29tcGFjdERlY3J5cHQoandlLCBrZXksIG9wdGlvbnMpIHtcbiAgICBpZiAoandlIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBqd2UgPSBidWZmZXJfdXRpbHNfanNfMS5kZWNvZGVyLmRlY29kZShqd2UpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGp3ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0NvbXBhY3QgSldFIG11c3QgYmUgYSBzdHJpbmcgb3IgVWludDhBcnJheScpO1xuICAgIH1cbiAgICBjb25zdCB7IDA6IHByb3RlY3RlZEhlYWRlciwgMTogZW5jcnlwdGVkS2V5LCAyOiBpdiwgMzogY2lwaGVydGV4dCwgNDogdGFnLCBsZW5ndGgsIH0gPSBqd2Uuc3BsaXQoJy4nKTtcbiAgICBpZiAobGVuZ3RoICE9PSA1KSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdJbnZhbGlkIENvbXBhY3QgSldFJyk7XG4gICAgfVxuICAgIGNvbnN0IGRlY3J5cHRlZCA9IGF3YWl0ICgwLCBkZWNyeXB0X2pzXzEuZmxhdHRlbmVkRGVjcnlwdCkoe1xuICAgICAgICBjaXBoZXJ0ZXh0LFxuICAgICAgICBpdjogKGl2IHx8IHVuZGVmaW5lZCksXG4gICAgICAgIHByb3RlY3RlZDogcHJvdGVjdGVkSGVhZGVyIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgdGFnOiAodGFnIHx8IHVuZGVmaW5lZCksXG4gICAgICAgIGVuY3J5cHRlZF9rZXk6IGVuY3J5cHRlZEtleSB8fCB1bmRlZmluZWQsXG4gICAgfSwga2V5LCBvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSB7IHBsYWludGV4dDogZGVjcnlwdGVkLnBsYWludGV4dCwgcHJvdGVjdGVkSGVhZGVyOiBkZWNyeXB0ZWQucHJvdGVjdGVkSGVhZGVyIH07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBrZXk6IGRlY3J5cHRlZC5rZXkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuY29tcGFjdERlY3J5cHQgPSBjb21wYWN0RGVjcnlwdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbXBhY3REZWNyeXB0IiwiZGVjcnlwdF9qc18xIiwicmVxdWlyZSIsImVycm9yc19qc18xIiwiYnVmZmVyX3V0aWxzX2pzXzEiLCJqd2UiLCJrZXkiLCJvcHRpb25zIiwiVWludDhBcnJheSIsImRlY29kZXIiLCJkZWNvZGUiLCJKV0VJbnZhbGlkIiwicHJvdGVjdGVkSGVhZGVyIiwiZW5jcnlwdGVkS2V5IiwiaXYiLCJjaXBoZXJ0ZXh0IiwidGFnIiwibGVuZ3RoIiwic3BsaXQiLCJkZWNyeXB0ZWQiLCJmbGF0dGVuZWREZWNyeXB0IiwidW5kZWZpbmVkIiwicHJvdGVjdGVkIiwiZW5jcnlwdGVkX2tleSIsInJlc3VsdCIsInBsYWludGV4dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CompactEncrypt = void 0;\nconst encrypt_js_1 = __webpack_require__(/*! ../flattened/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js\");\nclass CompactEncrypt {\n    constructor(plaintext){\n        this._flattened = new encrypt_js_1.FlattenedEncrypt(plaintext);\n    }\n    setContentEncryptionKey(cek) {\n        this._flattened.setContentEncryptionKey(cek);\n        return this;\n    }\n    setInitializationVector(iv) {\n        this._flattened.setInitializationVector(iv);\n        return this;\n    }\n    setProtectedHeader(protectedHeader) {\n        this._flattened.setProtectedHeader(protectedHeader);\n        return this;\n    }\n    setKeyManagementParameters(parameters) {\n        this._flattened.setKeyManagementParameters(parameters);\n        return this;\n    }\n    async encrypt(key, options) {\n        const jwe = await this._flattened.encrypt(key, options);\n        return [\n            jwe.protected,\n            jwe.encrypted_key,\n            jwe.iv,\n            jwe.ciphertext,\n            jwe.tag\n        ].join(\".\");\n    }\n}\nexports.CompactEncrypt = CompactEncrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9jb21wYWN0L2VuY3J5cHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsZUFBZUMsbUJBQU9BLENBQUMsNEhBQXlCO0FBQ3RELE1BQU1GO0lBQ0ZHLFlBQVlDLFNBQVMsQ0FBRTtRQUNuQixJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJSixhQUFhSyxnQkFBZ0IsQ0FBQ0Y7SUFDeEQ7SUFDQUcsd0JBQXdCQyxHQUFHLEVBQUU7UUFDekIsSUFBSSxDQUFDSCxVQUFVLENBQUNFLHVCQUF1QixDQUFDQztRQUN4QyxPQUFPLElBQUk7SUFDZjtJQUNBQyx3QkFBd0JDLEVBQUUsRUFBRTtRQUN4QixJQUFJLENBQUNMLFVBQVUsQ0FBQ0ksdUJBQXVCLENBQUNDO1FBQ3hDLE9BQU8sSUFBSTtJQUNmO0lBQ0FDLG1CQUFtQkMsZUFBZSxFQUFFO1FBQ2hDLElBQUksQ0FBQ1AsVUFBVSxDQUFDTSxrQkFBa0IsQ0FBQ0M7UUFDbkMsT0FBTyxJQUFJO0lBQ2Y7SUFDQUMsMkJBQTJCQyxVQUFVLEVBQUU7UUFDbkMsSUFBSSxDQUFDVCxVQUFVLENBQUNRLDBCQUEwQixDQUFDQztRQUMzQyxPQUFPLElBQUk7SUFDZjtJQUNBLE1BQU1DLFFBQVFDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO1FBQ3hCLE1BQU1DLE1BQU0sTUFBTSxJQUFJLENBQUNiLFVBQVUsQ0FBQ1UsT0FBTyxDQUFDQyxLQUFLQztRQUMvQyxPQUFPO1lBQUNDLElBQUlDLFNBQVM7WUFBRUQsSUFBSUUsYUFBYTtZQUFFRixJQUFJUixFQUFFO1lBQUVRLElBQUlHLFVBQVU7WUFBRUgsSUFBSUksR0FBRztTQUFDLENBQUNDLElBQUksQ0FBQztJQUNwRjtBQUNKO0FBQ0F6QixzQkFBc0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd2UvY29tcGFjdC9lbmNyeXB0LmpzPzY2YTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBhY3RFbmNyeXB0ID0gdm9pZCAwO1xuY29uc3QgZW5jcnlwdF9qc18xID0gcmVxdWlyZShcIi4uL2ZsYXR0ZW5lZC9lbmNyeXB0LmpzXCIpO1xuY2xhc3MgQ29tcGFjdEVuY3J5cHQge1xuICAgIGNvbnN0cnVjdG9yKHBsYWludGV4dCkge1xuICAgICAgICB0aGlzLl9mbGF0dGVuZWQgPSBuZXcgZW5jcnlwdF9qc18xLkZsYXR0ZW5lZEVuY3J5cHQocGxhaW50ZXh0KTtcbiAgICB9XG4gICAgc2V0Q29udGVudEVuY3J5cHRpb25LZXkoY2VrKSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZC5zZXRDb250ZW50RW5jcnlwdGlvbktleShjZWspO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0SW5pdGlhbGl6YXRpb25WZWN0b3IoaXYpIHtcbiAgICAgICAgdGhpcy5fZmxhdHRlbmVkLnNldEluaXRpYWxpemF0aW9uVmVjdG9yKGl2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fZmxhdHRlbmVkLnNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICAgICAgICB0aGlzLl9mbGF0dGVuZWQuc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhc3luYyBlbmNyeXB0KGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBqd2UgPSBhd2FpdCB0aGlzLl9mbGF0dGVuZWQuZW5jcnlwdChrZXksIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gW2p3ZS5wcm90ZWN0ZWQsIGp3ZS5lbmNyeXB0ZWRfa2V5LCBqd2UuaXYsIGp3ZS5jaXBoZXJ0ZXh0LCBqd2UudGFnXS5qb2luKCcuJyk7XG4gICAgfVxufVxuZXhwb3J0cy5Db21wYWN0RW5jcnlwdCA9IENvbXBhY3RFbmNyeXB0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29tcGFjdEVuY3J5cHQiLCJlbmNyeXB0X2pzXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJwbGFpbnRleHQiLCJfZmxhdHRlbmVkIiwiRmxhdHRlbmVkRW5jcnlwdCIsInNldENvbnRlbnRFbmNyeXB0aW9uS2V5IiwiY2VrIiwic2V0SW5pdGlhbGl6YXRpb25WZWN0b3IiLCJpdiIsInNldFByb3RlY3RlZEhlYWRlciIsInByb3RlY3RlZEhlYWRlciIsInNldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzIiwicGFyYW1ldGVycyIsImVuY3J5cHQiLCJrZXkiLCJvcHRpb25zIiwiandlIiwicHJvdGVjdGVkIiwiZW5jcnlwdGVkX2tleSIsImNpcGhlcnRleHQiLCJ0YWciLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.flattenedDecrypt = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst decrypt_js_1 = __webpack_require__(/*! ../../runtime/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js\");\nconst zlib_js_1 = __webpack_require__(/*! ../../runtime/zlib.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst decrypt_key_management_js_1 = __webpack_require__(/*! ../../lib/decrypt_key_management.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/decrypt_key_management.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst cek_js_1 = __webpack_require__(/*! ../../lib/cek.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nconst validate_algorithms_js_1 = __webpack_require__(/*! ../../lib/validate_algorithms.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js\");\nasync function flattenedDecrypt(jwe, key, options) {\n    var _a;\n    if (!(0, is_object_js_1.default)(jwe)) {\n        throw new errors_js_1.JWEInvalid(\"Flattened JWE must be an object\");\n    }\n    if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) {\n        throw new errors_js_1.JWEInvalid(\"JOSE Header missing\");\n    }\n    if (typeof jwe.iv !== \"string\") {\n        throw new errors_js_1.JWEInvalid(\"JWE Initialization Vector missing or incorrect type\");\n    }\n    if (typeof jwe.ciphertext !== \"string\") {\n        throw new errors_js_1.JWEInvalid(\"JWE Ciphertext missing or incorrect type\");\n    }\n    if (typeof jwe.tag !== \"string\") {\n        throw new errors_js_1.JWEInvalid(\"JWE Authentication Tag missing or incorrect type\");\n    }\n    if (jwe.protected !== undefined && typeof jwe.protected !== \"string\") {\n        throw new errors_js_1.JWEInvalid(\"JWE Protected Header incorrect type\");\n    }\n    if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== \"string\") {\n        throw new errors_js_1.JWEInvalid(\"JWE Encrypted Key incorrect type\");\n    }\n    if (jwe.aad !== undefined && typeof jwe.aad !== \"string\") {\n        throw new errors_js_1.JWEInvalid(\"JWE AAD incorrect type\");\n    }\n    if (jwe.header !== undefined && !(0, is_object_js_1.default)(jwe.header)) {\n        throw new errors_js_1.JWEInvalid(\"JWE Shared Unprotected Header incorrect type\");\n    }\n    if (jwe.unprotected !== undefined && !(0, is_object_js_1.default)(jwe.unprotected)) {\n        throw new errors_js_1.JWEInvalid(\"JWE Per-Recipient Unprotected Header incorrect type\");\n    }\n    let parsedProt;\n    if (jwe.protected) {\n        try {\n            const protectedHeader = (0, base64url_js_1.decode)(jwe.protected);\n            parsedProt = JSON.parse(buffer_utils_js_1.decoder.decode(protectedHeader));\n        } catch  {\n            throw new errors_js_1.JWEInvalid(\"JWE Protected Header is invalid\");\n        }\n    }\n    if (!(0, is_disjoint_js_1.default)(parsedProt, jwe.header, jwe.unprotected)) {\n        throw new errors_js_1.JWEInvalid(\"JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint\");\n    }\n    const joseHeader = {\n        ...parsedProt,\n        ...jwe.header,\n        ...jwe.unprotected\n    };\n    (0, validate_crit_js_1.default)(errors_js_1.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);\n    if (joseHeader.zip !== undefined) {\n        if (!parsedProt || !parsedProt.zip) {\n            throw new errors_js_1.JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n        }\n        if (joseHeader.zip !== \"DEF\") {\n            throw new errors_js_1.JOSENotSupported('Unsupported JWE \"zip\" (Compression Algorithm) Header Parameter value');\n        }\n    }\n    const { alg, enc } = joseHeader;\n    if (typeof alg !== \"string\" || !alg) {\n        throw new errors_js_1.JWEInvalid(\"missing JWE Algorithm (alg) in JWE Header\");\n    }\n    if (typeof enc !== \"string\" || !enc) {\n        throw new errors_js_1.JWEInvalid(\"missing JWE Encryption Algorithm (enc) in JWE Header\");\n    }\n    const keyManagementAlgorithms = options && (0, validate_algorithms_js_1.default)(\"keyManagementAlgorithms\", options.keyManagementAlgorithms);\n    const contentEncryptionAlgorithms = options && (0, validate_algorithms_js_1.default)(\"contentEncryptionAlgorithms\", options.contentEncryptionAlgorithms);\n    if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg)) {\n        throw new errors_js_1.JOSEAlgNotAllowed('\"alg\" (Algorithm) Header Parameter not allowed');\n    }\n    if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {\n        throw new errors_js_1.JOSEAlgNotAllowed('\"enc\" (Encryption Algorithm) Header Parameter not allowed');\n    }\n    let encryptedKey;\n    if (jwe.encrypted_key !== undefined) {\n        try {\n            encryptedKey = (0, base64url_js_1.decode)(jwe.encrypted_key);\n        } catch  {\n            throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the encrypted_key\");\n        }\n    }\n    let resolvedKey = false;\n    if (typeof key === \"function\") {\n        key = await key(parsedProt, jwe);\n        resolvedKey = true;\n    }\n    let cek;\n    try {\n        cek = await (0, decrypt_key_management_js_1.default)(alg, key, encryptedKey, joseHeader, options);\n    } catch (err) {\n        if (err instanceof TypeError || err instanceof errors_js_1.JWEInvalid || err instanceof errors_js_1.JOSENotSupported) {\n            throw err;\n        }\n        cek = (0, cek_js_1.default)(enc);\n    }\n    let iv;\n    let tag;\n    try {\n        iv = (0, base64url_js_1.decode)(jwe.iv);\n    } catch  {\n        throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the iv\");\n    }\n    try {\n        tag = (0, base64url_js_1.decode)(jwe.tag);\n    } catch  {\n        throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the tag\");\n    }\n    const protectedHeader = buffer_utils_js_1.encoder.encode((_a = jwe.protected) !== null && _a !== void 0 ? _a : \"\");\n    let additionalData;\n    if (jwe.aad !== undefined) {\n        additionalData = (0, buffer_utils_js_1.concat)(protectedHeader, buffer_utils_js_1.encoder.encode(\".\"), buffer_utils_js_1.encoder.encode(jwe.aad));\n    } else {\n        additionalData = protectedHeader;\n    }\n    let ciphertext;\n    try {\n        ciphertext = (0, base64url_js_1.decode)(jwe.ciphertext);\n    } catch  {\n        throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the ciphertext\");\n    }\n    let plaintext = await (0, decrypt_js_1.default)(enc, cek, ciphertext, iv, tag, additionalData);\n    if (joseHeader.zip === \"DEF\") {\n        plaintext = await ((options === null || options === void 0 ? void 0 : options.inflateRaw) || zlib_js_1.inflate)(plaintext);\n    }\n    const result = {\n        plaintext\n    };\n    if (jwe.protected !== undefined) {\n        result.protectedHeader = parsedProt;\n    }\n    if (jwe.aad !== undefined) {\n        try {\n            result.additionalAuthenticatedData = (0, base64url_js_1.decode)(jwe.aad);\n        } catch  {\n            throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the aad\");\n        }\n    }\n    if (jwe.unprotected !== undefined) {\n        result.sharedUnprotectedHeader = jwe.unprotected;\n    }\n    if (jwe.header !== undefined) {\n        result.unprotectedHeader = jwe.header;\n    }\n    if (resolvedKey) {\n        return {\n            ...result,\n            key\n        };\n    }\n    return result;\n}\nexports.flattenedDecrypt = flattenedDecrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9mbGF0dGVuZWQvZGVjcnlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUcsS0FBSztBQUNoQyxNQUFNRyxpQkFBaUJDLG1CQUFPQSxDQUFDLDJIQUE0QjtBQUMzRCxNQUFNQyxlQUFlRCxtQkFBT0EsQ0FBQyx1SEFBMEI7QUFDdkQsTUFBTUUsWUFBWUYsbUJBQU9BLENBQUMsaUhBQXVCO0FBQ2pELE1BQU1HLGNBQWNILG1CQUFPQSxDQUFDLCtHQUFzQjtBQUNsRCxNQUFNSSxtQkFBbUJKLG1CQUFPQSxDQUFDLHVIQUEwQjtBQUMzRCxNQUFNSyxpQkFBaUJMLG1CQUFPQSxDQUFDLG1IQUF3QjtBQUN2RCxNQUFNTSw4QkFBOEJOLG1CQUFPQSxDQUFDLDZJQUFxQztBQUNqRixNQUFNTyxvQkFBb0JQLG1CQUFPQSxDQUFDLHlIQUEyQjtBQUM3RCxNQUFNUSxXQUFXUixtQkFBT0EsQ0FBQyx1R0FBa0I7QUFDM0MsTUFBTVMscUJBQXFCVCxtQkFBT0EsQ0FBQywySEFBNEI7QUFDL0QsTUFBTVUsMkJBQTJCVixtQkFBT0EsQ0FBQyx1SUFBa0M7QUFDM0UsZUFBZUYsaUJBQWlCYSxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsT0FBTztJQUM3QyxJQUFJQztJQUNKLElBQUksQ0FBQyxDQUFDLEdBQUdULGVBQWVVLE9BQU8sRUFBRUosTUFBTTtRQUNuQyxNQUFNLElBQUlSLFlBQVlhLFVBQVUsQ0FBQztJQUNyQztJQUNBLElBQUlMLElBQUlNLFNBQVMsS0FBS0MsYUFBYVAsSUFBSVEsTUFBTSxLQUFLRCxhQUFhUCxJQUFJUyxXQUFXLEtBQUtGLFdBQVc7UUFDMUYsTUFBTSxJQUFJZixZQUFZYSxVQUFVLENBQUM7SUFDckM7SUFDQSxJQUFJLE9BQU9MLElBQUlVLEVBQUUsS0FBSyxVQUFVO1FBQzVCLE1BQU0sSUFBSWxCLFlBQVlhLFVBQVUsQ0FBQztJQUNyQztJQUNBLElBQUksT0FBT0wsSUFBSVcsVUFBVSxLQUFLLFVBQVU7UUFDcEMsTUFBTSxJQUFJbkIsWUFBWWEsVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsSUFBSSxPQUFPTCxJQUFJWSxHQUFHLEtBQUssVUFBVTtRQUM3QixNQUFNLElBQUlwQixZQUFZYSxVQUFVLENBQUM7SUFDckM7SUFDQSxJQUFJTCxJQUFJTSxTQUFTLEtBQUtDLGFBQWEsT0FBT1AsSUFBSU0sU0FBUyxLQUFLLFVBQVU7UUFDbEUsTUFBTSxJQUFJZCxZQUFZYSxVQUFVLENBQUM7SUFDckM7SUFDQSxJQUFJTCxJQUFJYSxhQUFhLEtBQUtOLGFBQWEsT0FBT1AsSUFBSWEsYUFBYSxLQUFLLFVBQVU7UUFDMUUsTUFBTSxJQUFJckIsWUFBWWEsVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsSUFBSUwsSUFBSWMsR0FBRyxLQUFLUCxhQUFhLE9BQU9QLElBQUljLEdBQUcsS0FBSyxVQUFVO1FBQ3RELE1BQU0sSUFBSXRCLFlBQVlhLFVBQVUsQ0FBQztJQUNyQztJQUNBLElBQUlMLElBQUlRLE1BQU0sS0FBS0QsYUFBYSxDQUFDLENBQUMsR0FBR2IsZUFBZVUsT0FBTyxFQUFFSixJQUFJUSxNQUFNLEdBQUc7UUFDdEUsTUFBTSxJQUFJaEIsWUFBWWEsVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsSUFBSUwsSUFBSVMsV0FBVyxLQUFLRixhQUFhLENBQUMsQ0FBQyxHQUFHYixlQUFlVSxPQUFPLEVBQUVKLElBQUlTLFdBQVcsR0FBRztRQUNoRixNQUFNLElBQUlqQixZQUFZYSxVQUFVLENBQUM7SUFDckM7SUFDQSxJQUFJVTtJQUNKLElBQUlmLElBQUlNLFNBQVMsRUFBRTtRQUNmLElBQUk7WUFDQSxNQUFNVSxrQkFBa0IsQ0FBQyxHQUFHNUIsZUFBZTZCLE1BQU0sRUFBRWpCLElBQUlNLFNBQVM7WUFDaEVTLGFBQWFHLEtBQUtDLEtBQUssQ0FBQ3ZCLGtCQUFrQndCLE9BQU8sQ0FBQ0gsTUFBTSxDQUFDRDtRQUM3RCxFQUNBLE9BQU07WUFDRixNQUFNLElBQUl4QixZQUFZYSxVQUFVLENBQUM7UUFDckM7SUFDSjtJQUNBLElBQUksQ0FBQyxDQUFDLEdBQUdaLGlCQUFpQlcsT0FBTyxFQUFFVyxZQUFZZixJQUFJUSxNQUFNLEVBQUVSLElBQUlTLFdBQVcsR0FBRztRQUN6RSxNQUFNLElBQUlqQixZQUFZYSxVQUFVLENBQUM7SUFDckM7SUFDQSxNQUFNZ0IsYUFBYTtRQUNmLEdBQUdOLFVBQVU7UUFDYixHQUFHZixJQUFJUSxNQUFNO1FBQ2IsR0FBR1IsSUFBSVMsV0FBVztJQUN0QjtJQUNDLElBQUdYLG1CQUFtQk0sT0FBTyxFQUFFWixZQUFZYSxVQUFVLEVBQUUsSUFBSWlCLE9BQU9wQixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUXFCLElBQUksRUFBRVIsWUFBWU07SUFDL0ksSUFBSUEsV0FBV0csR0FBRyxLQUFLakIsV0FBVztRQUM5QixJQUFJLENBQUNRLGNBQWMsQ0FBQ0EsV0FBV1MsR0FBRyxFQUFFO1lBQ2hDLE1BQU0sSUFBSWhDLFlBQVlhLFVBQVUsQ0FBQztRQUNyQztRQUNBLElBQUlnQixXQUFXRyxHQUFHLEtBQUssT0FBTztZQUMxQixNQUFNLElBQUloQyxZQUFZaUMsZ0JBQWdCLENBQUM7UUFDM0M7SUFDSjtJQUNBLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR047SUFDckIsSUFBSSxPQUFPSyxRQUFRLFlBQVksQ0FBQ0EsS0FBSztRQUNqQyxNQUFNLElBQUlsQyxZQUFZYSxVQUFVLENBQUM7SUFDckM7SUFDQSxJQUFJLE9BQU9zQixRQUFRLFlBQVksQ0FBQ0EsS0FBSztRQUNqQyxNQUFNLElBQUluQyxZQUFZYSxVQUFVLENBQUM7SUFDckM7SUFDQSxNQUFNdUIsMEJBQTBCMUIsV0FBVyxDQUFDLEdBQUdILHlCQUF5QkssT0FBTyxFQUFFLDJCQUEyQkYsUUFBUTBCLHVCQUF1QjtJQUMzSSxNQUFNQyw4QkFBOEIzQixXQUNoQyxDQUFDLEdBQUdILHlCQUF5QkssT0FBTyxFQUFFLCtCQUErQkYsUUFBUTJCLDJCQUEyQjtJQUM1RyxJQUFJRCwyQkFBMkIsQ0FBQ0Esd0JBQXdCRSxHQUFHLENBQUNKLE1BQU07UUFDOUQsTUFBTSxJQUFJbEMsWUFBWXVDLGlCQUFpQixDQUFDO0lBQzVDO0lBQ0EsSUFBSUYsK0JBQStCLENBQUNBLDRCQUE0QkMsR0FBRyxDQUFDSCxNQUFNO1FBQ3RFLE1BQU0sSUFBSW5DLFlBQVl1QyxpQkFBaUIsQ0FBQztJQUM1QztJQUNBLElBQUlDO0lBQ0osSUFBSWhDLElBQUlhLGFBQWEsS0FBS04sV0FBVztRQUNqQyxJQUFJO1lBQ0F5QixlQUFlLENBQUMsR0FBRzVDLGVBQWU2QixNQUFNLEVBQUVqQixJQUFJYSxhQUFhO1FBQy9ELEVBQ0EsT0FBTTtZQUNGLE1BQU0sSUFBSXJCLFlBQVlhLFVBQVUsQ0FBQztRQUNyQztJQUNKO0lBQ0EsSUFBSTRCLGNBQWM7SUFDbEIsSUFBSSxPQUFPaEMsUUFBUSxZQUFZO1FBQzNCQSxNQUFNLE1BQU1BLElBQUljLFlBQVlmO1FBQzVCaUMsY0FBYztJQUNsQjtJQUNBLElBQUlDO0lBQ0osSUFBSTtRQUNBQSxNQUFNLE1BQU0sQ0FBQyxHQUFHdkMsNEJBQTRCUyxPQUFPLEVBQUVzQixLQUFLekIsS0FBSytCLGNBQWNYLFlBQVluQjtJQUM3RixFQUNBLE9BQU9pQyxLQUFLO1FBQ1IsSUFBSUEsZUFBZUMsYUFBYUQsZUFBZTNDLFlBQVlhLFVBQVUsSUFBSThCLGVBQWUzQyxZQUFZaUMsZ0JBQWdCLEVBQUU7WUFDbEgsTUFBTVU7UUFDVjtRQUNBRCxNQUFNLENBQUMsR0FBR3JDLFNBQVNPLE9BQU8sRUFBRXVCO0lBQ2hDO0lBQ0EsSUFBSWpCO0lBQ0osSUFBSUU7SUFDSixJQUFJO1FBQ0FGLEtBQUssQ0FBQyxHQUFHdEIsZUFBZTZCLE1BQU0sRUFBRWpCLElBQUlVLEVBQUU7SUFDMUMsRUFDQSxPQUFNO1FBQ0YsTUFBTSxJQUFJbEIsWUFBWWEsVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsSUFBSTtRQUNBTyxNQUFNLENBQUMsR0FBR3hCLGVBQWU2QixNQUFNLEVBQUVqQixJQUFJWSxHQUFHO0lBQzVDLEVBQ0EsT0FBTTtRQUNGLE1BQU0sSUFBSXBCLFlBQVlhLFVBQVUsQ0FBQztJQUNyQztJQUNBLE1BQU1XLGtCQUFrQnBCLGtCQUFrQnlDLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLENBQUNuQyxLQUFLSCxJQUFJTSxTQUFTLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUlBLEtBQUs7SUFDL0csSUFBSW9DO0lBQ0osSUFBSXZDLElBQUljLEdBQUcsS0FBS1AsV0FBVztRQUN2QmdDLGlCQUFpQixDQUFDLEdBQUczQyxrQkFBa0I0QyxNQUFNLEVBQUV4QixpQkFBaUJwQixrQkFBa0J5QyxPQUFPLENBQUNDLE1BQU0sQ0FBQyxNQUFNMUMsa0JBQWtCeUMsT0FBTyxDQUFDQyxNQUFNLENBQUN0QyxJQUFJYyxHQUFHO0lBQ25KLE9BQ0s7UUFDRHlCLGlCQUFpQnZCO0lBQ3JCO0lBQ0EsSUFBSUw7SUFDSixJQUFJO1FBQ0FBLGFBQWEsQ0FBQyxHQUFHdkIsZUFBZTZCLE1BQU0sRUFBRWpCLElBQUlXLFVBQVU7SUFDMUQsRUFDQSxPQUFNO1FBQ0YsTUFBTSxJQUFJbkIsWUFBWWEsVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsSUFBSW9DLFlBQVksTUFBTSxDQUFDLEdBQUduRCxhQUFhYyxPQUFPLEVBQUV1QixLQUFLTyxLQUFLdkIsWUFBWUQsSUFBSUUsS0FBSzJCO0lBQy9FLElBQUlsQixXQUFXRyxHQUFHLEtBQUssT0FBTztRQUMxQmlCLFlBQVksTUFBTSxDQUFDLENBQUN2QyxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUXdDLFVBQVUsS0FBS25ELFVBQVVvRCxPQUFPLEVBQUVGO0lBQ3BIO0lBQ0EsTUFBTUcsU0FBUztRQUFFSDtJQUFVO0lBQzNCLElBQUl6QyxJQUFJTSxTQUFTLEtBQUtDLFdBQVc7UUFDN0JxQyxPQUFPNUIsZUFBZSxHQUFHRDtJQUM3QjtJQUNBLElBQUlmLElBQUljLEdBQUcsS0FBS1AsV0FBVztRQUN2QixJQUFJO1lBQ0FxQyxPQUFPQywyQkFBMkIsR0FBRyxDQUFDLEdBQUd6RCxlQUFlNkIsTUFBTSxFQUFFakIsSUFBSWMsR0FBRztRQUMzRSxFQUNBLE9BQU07WUFDRixNQUFNLElBQUl0QixZQUFZYSxVQUFVLENBQUM7UUFDckM7SUFDSjtJQUNBLElBQUlMLElBQUlTLFdBQVcsS0FBS0YsV0FBVztRQUMvQnFDLE9BQU9FLHVCQUF1QixHQUFHOUMsSUFBSVMsV0FBVztJQUNwRDtJQUNBLElBQUlULElBQUlRLE1BQU0sS0FBS0QsV0FBVztRQUMxQnFDLE9BQU9HLGlCQUFpQixHQUFHL0MsSUFBSVEsTUFBTTtJQUN6QztJQUNBLElBQUl5QixhQUFhO1FBQ2IsT0FBTztZQUFFLEdBQUdXLE1BQU07WUFBRTNDO1FBQUk7SUFDNUI7SUFDQSxPQUFPMkM7QUFDWDtBQUNBM0Qsd0JBQXdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandlL2ZsYXR0ZW5lZC9kZWNyeXB0LmpzPzI2ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZsYXR0ZW5lZERlY3J5cHQgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IGRlY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2RlY3J5cHQuanNcIik7XG5jb25zdCB6bGliX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vcnVudGltZS96bGliLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBpc19kaXNqb2ludF9qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi9pc19kaXNqb2ludC5qc1wiKTtcbmNvbnN0IGlzX29iamVjdF9qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi9pc19vYmplY3QuanNcIik7XG5jb25zdCBkZWNyeXB0X2tleV9tYW5hZ2VtZW50X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2RlY3J5cHRfa2V5X21hbmFnZW1lbnQuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgY2VrX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2Nlay5qc1wiKTtcbmNvbnN0IHZhbGlkYXRlX2NyaXRfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvdmFsaWRhdGVfY3JpdC5qc1wiKTtcbmNvbnN0IHZhbGlkYXRlX2FsZ29yaXRobXNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvdmFsaWRhdGVfYWxnb3JpdGhtcy5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGZsYXR0ZW5lZERlY3J5cHQoandlLCBrZXksIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkoandlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnRmxhdHRlbmVkIEpXRSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAoandlLnByb3RlY3RlZCA9PT0gdW5kZWZpbmVkICYmIGp3ZS5oZWFkZXIgPT09IHVuZGVmaW5lZCAmJiBqd2UudW5wcm90ZWN0ZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSk9TRSBIZWFkZXIgbWlzc2luZycpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGp3ZS5pdiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBJbml0aWFsaXphdGlvbiBWZWN0b3IgbWlzc2luZyBvciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGp3ZS5jaXBoZXJ0ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIENpcGhlcnRleHQgbWlzc2luZyBvciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGp3ZS50YWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgQXV0aGVudGljYXRpb24gVGFnIG1pc3Npbmcgb3IgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKGp3ZS5wcm90ZWN0ZWQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgandlLnByb3RlY3RlZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBQcm90ZWN0ZWQgSGVhZGVyIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmIChqd2UuZW5jcnlwdGVkX2tleSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBqd2UuZW5jcnlwdGVkX2tleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBFbmNyeXB0ZWQgS2V5IGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmIChqd2UuYWFkICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGp3ZS5hYWQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgQUFEIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmIChqd2UuaGVhZGVyICE9PSB1bmRlZmluZWQgJiYgISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShqd2UuaGVhZGVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFNoYXJlZCBVbnByb3RlY3RlZCBIZWFkZXIgaW5jb3JyZWN0IHR5cGUnKTtcbiAgICB9XG4gICAgaWYgKGp3ZS51bnByb3RlY3RlZCAhPT0gdW5kZWZpbmVkICYmICEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkoandlLnVucHJvdGVjdGVkKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFBlci1SZWNpcGllbnQgVW5wcm90ZWN0ZWQgSGVhZGVyIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGxldCBwYXJzZWRQcm90O1xuICAgIGlmIChqd2UucHJvdGVjdGVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcm90ZWN0ZWRIZWFkZXIgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShqd2UucHJvdGVjdGVkKTtcbiAgICAgICAgICAgIHBhcnNlZFByb3QgPSBKU09OLnBhcnNlKGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKHByb3RlY3RlZEhlYWRlcikpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgUHJvdGVjdGVkIEhlYWRlciBpcyBpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCEoMCwgaXNfZGlzam9pbnRfanNfMS5kZWZhdWx0KShwYXJzZWRQcm90LCBqd2UuaGVhZGVyLCBqd2UudW5wcm90ZWN0ZWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgUHJvdGVjdGVkLCBKV0UgVW5wcm90ZWN0ZWQgSGVhZGVyLCBhbmQgSldFIFBlci1SZWNpcGllbnQgVW5wcm90ZWN0ZWQgSGVhZGVyIFBhcmFtZXRlciBuYW1lcyBtdXN0IGJlIGRpc2pvaW50Jyk7XG4gICAgfVxuICAgIGNvbnN0IGpvc2VIZWFkZXIgPSB7XG4gICAgICAgIC4uLnBhcnNlZFByb3QsXG4gICAgICAgIC4uLmp3ZS5oZWFkZXIsXG4gICAgICAgIC4uLmp3ZS51bnByb3RlY3RlZCxcbiAgICB9O1xuICAgICgwLCB2YWxpZGF0ZV9jcml0X2pzXzEuZGVmYXVsdCkoZXJyb3JzX2pzXzEuSldFSW52YWxpZCwgbmV3IE1hcCgpLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY3JpdCwgcGFyc2VkUHJvdCwgam9zZUhlYWRlcik7XG4gICAgaWYgKGpvc2VIZWFkZXIuemlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKCFwYXJzZWRQcm90IHx8ICFwYXJzZWRQcm90LnppcCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0pXRSBcInppcFwiIChDb21wcmVzc2lvbiBBbGdvcml0aG0pIEhlYWRlciBNVVNUIGJlIGludGVncml0eSBwcm90ZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoam9zZUhlYWRlci56aXAgIT09ICdERUYnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnVW5zdXBwb3J0ZWQgSldFIFwiemlwXCIgKENvbXByZXNzaW9uIEFsZ29yaXRobSkgSGVhZGVyIFBhcmFtZXRlciB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsgYWxnLCBlbmMgfSA9IGpvc2VIZWFkZXI7XG4gICAgaWYgKHR5cGVvZiBhbGcgIT09ICdzdHJpbmcnIHx8ICFhbGcpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ21pc3NpbmcgSldFIEFsZ29yaXRobSAoYWxnKSBpbiBKV0UgSGVhZGVyJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jICE9PSAnc3RyaW5nJyB8fCAhZW5jKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdtaXNzaW5nIEpXRSBFbmNyeXB0aW9uIEFsZ29yaXRobSAoZW5jKSBpbiBKV0UgSGVhZGVyJyk7XG4gICAgfVxuICAgIGNvbnN0IGtleU1hbmFnZW1lbnRBbGdvcml0aG1zID0gb3B0aW9ucyAmJiAoMCwgdmFsaWRhdGVfYWxnb3JpdGhtc19qc18xLmRlZmF1bHQpKCdrZXlNYW5hZ2VtZW50QWxnb3JpdGhtcycsIG9wdGlvbnMua2V5TWFuYWdlbWVudEFsZ29yaXRobXMpO1xuICAgIGNvbnN0IGNvbnRlbnRFbmNyeXB0aW9uQWxnb3JpdGhtcyA9IG9wdGlvbnMgJiZcbiAgICAgICAgKDAsIHZhbGlkYXRlX2FsZ29yaXRobXNfanNfMS5kZWZhdWx0KSgnY29udGVudEVuY3J5cHRpb25BbGdvcml0aG1zJywgb3B0aW9ucy5jb250ZW50RW5jcnlwdGlvbkFsZ29yaXRobXMpO1xuICAgIGlmIChrZXlNYW5hZ2VtZW50QWxnb3JpdGhtcyAmJiAha2V5TWFuYWdlbWVudEFsZ29yaXRobXMuaGFzKGFsZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VBbGdOb3RBbGxvd2VkKCdcImFsZ1wiIChBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbm90IGFsbG93ZWQnKTtcbiAgICB9XG4gICAgaWYgKGNvbnRlbnRFbmNyeXB0aW9uQWxnb3JpdGhtcyAmJiAhY29udGVudEVuY3J5cHRpb25BbGdvcml0aG1zLmhhcyhlbmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFQWxnTm90QWxsb3dlZCgnXCJlbmNcIiAoRW5jcnlwdGlvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbm90IGFsbG93ZWQnKTtcbiAgICB9XG4gICAgbGV0IGVuY3J5cHRlZEtleTtcbiAgICBpZiAoandlLmVuY3J5cHRlZF9rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZW5jcnlwdGVkS2V5ID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkoandlLmVuY3J5cHRlZF9rZXkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdGYWlsZWQgdG8gYmFzZTY0dXJsIGRlY29kZSB0aGUgZW5jcnlwdGVkX2tleScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCByZXNvbHZlZEtleSA9IGZhbHNlO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGtleSA9IGF3YWl0IGtleShwYXJzZWRQcm90LCBqd2UpO1xuICAgICAgICByZXNvbHZlZEtleSA9IHRydWU7XG4gICAgfVxuICAgIGxldCBjZWs7XG4gICAgdHJ5IHtcbiAgICAgICAgY2VrID0gYXdhaXQgKDAsIGRlY3J5cHRfa2V5X21hbmFnZW1lbnRfanNfMS5kZWZhdWx0KShhbGcsIGtleSwgZW5jcnlwdGVkS2V5LCBqb3NlSGVhZGVyLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVHlwZUVycm9yIHx8IGVyciBpbnN0YW5jZW9mIGVycm9yc19qc18xLkpXRUludmFsaWQgfHwgZXJyIGluc3RhbmNlb2YgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCkge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGNlayA9ICgwLCBjZWtfanNfMS5kZWZhdWx0KShlbmMpO1xuICAgIH1cbiAgICBsZXQgaXY7XG4gICAgbGV0IHRhZztcbiAgICB0cnkge1xuICAgICAgICBpdiA9ICgwLCBiYXNlNjR1cmxfanNfMS5kZWNvZGUpKGp3ZS5pdik7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0ZhaWxlZCB0byBiYXNlNjR1cmwgZGVjb2RlIHRoZSBpdicpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB0YWcgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShqd2UudGFnKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnRmFpbGVkIHRvIGJhc2U2NHVybCBkZWNvZGUgdGhlIHRhZycpO1xuICAgIH1cbiAgICBjb25zdCBwcm90ZWN0ZWRIZWFkZXIgPSBidWZmZXJfdXRpbHNfanNfMS5lbmNvZGVyLmVuY29kZSgoX2EgPSBqd2UucHJvdGVjdGVkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJyk7XG4gICAgbGV0IGFkZGl0aW9uYWxEYXRhO1xuICAgIGlmIChqd2UuYWFkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWRkaXRpb25hbERhdGEgPSAoMCwgYnVmZmVyX3V0aWxzX2pzXzEuY29uY2F0KShwcm90ZWN0ZWRIZWFkZXIsIGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKCcuJyksIGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKGp3ZS5hYWQpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFkZGl0aW9uYWxEYXRhID0gcHJvdGVjdGVkSGVhZGVyO1xuICAgIH1cbiAgICBsZXQgY2lwaGVydGV4dDtcbiAgICB0cnkge1xuICAgICAgICBjaXBoZXJ0ZXh0ID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkoandlLmNpcGhlcnRleHQpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdGYWlsZWQgdG8gYmFzZTY0dXJsIGRlY29kZSB0aGUgY2lwaGVydGV4dCcpO1xuICAgIH1cbiAgICBsZXQgcGxhaW50ZXh0ID0gYXdhaXQgKDAsIGRlY3J5cHRfanNfMS5kZWZhdWx0KShlbmMsIGNlaywgY2lwaGVydGV4dCwgaXYsIHRhZywgYWRkaXRpb25hbERhdGEpO1xuICAgIGlmIChqb3NlSGVhZGVyLnppcCA9PT0gJ0RFRicpIHtcbiAgICAgICAgcGxhaW50ZXh0ID0gYXdhaXQgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaW5mbGF0ZVJhdykgfHwgemxpYl9qc18xLmluZmxhdGUpKHBsYWludGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGxhaW50ZXh0IH07XG4gICAgaWYgKGp3ZS5wcm90ZWN0ZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQucHJvdGVjdGVkSGVhZGVyID0gcGFyc2VkUHJvdDtcbiAgICB9XG4gICAgaWYgKGp3ZS5hYWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0LmFkZGl0aW9uYWxBdXRoZW50aWNhdGVkRGF0YSA9ICgwLCBiYXNlNjR1cmxfanNfMS5kZWNvZGUpKGp3ZS5hYWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdGYWlsZWQgdG8gYmFzZTY0dXJsIGRlY29kZSB0aGUgYWFkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGp3ZS51bnByb3RlY3RlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdC5zaGFyZWRVbnByb3RlY3RlZEhlYWRlciA9IGp3ZS51bnByb3RlY3RlZDtcbiAgICB9XG4gICAgaWYgKGp3ZS5oZWFkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQudW5wcm90ZWN0ZWRIZWFkZXIgPSBqd2UuaGVhZGVyO1xuICAgIH1cbiAgICBpZiAocmVzb2x2ZWRLZXkpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBrZXkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZmxhdHRlbmVkRGVjcnlwdCA9IGZsYXR0ZW5lZERlY3J5cHQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmbGF0dGVuZWREZWNyeXB0IiwiYmFzZTY0dXJsX2pzXzEiLCJyZXF1aXJlIiwiZGVjcnlwdF9qc18xIiwiemxpYl9qc18xIiwiZXJyb3JzX2pzXzEiLCJpc19kaXNqb2ludF9qc18xIiwiaXNfb2JqZWN0X2pzXzEiLCJkZWNyeXB0X2tleV9tYW5hZ2VtZW50X2pzXzEiLCJidWZmZXJfdXRpbHNfanNfMSIsImNla19qc18xIiwidmFsaWRhdGVfY3JpdF9qc18xIiwidmFsaWRhdGVfYWxnb3JpdGhtc19qc18xIiwiandlIiwia2V5Iiwib3B0aW9ucyIsIl9hIiwiZGVmYXVsdCIsIkpXRUludmFsaWQiLCJwcm90ZWN0ZWQiLCJ1bmRlZmluZWQiLCJoZWFkZXIiLCJ1bnByb3RlY3RlZCIsIml2IiwiY2lwaGVydGV4dCIsInRhZyIsImVuY3J5cHRlZF9rZXkiLCJhYWQiLCJwYXJzZWRQcm90IiwicHJvdGVjdGVkSGVhZGVyIiwiZGVjb2RlIiwiSlNPTiIsInBhcnNlIiwiZGVjb2RlciIsImpvc2VIZWFkZXIiLCJNYXAiLCJjcml0IiwiemlwIiwiSk9TRU5vdFN1cHBvcnRlZCIsImFsZyIsImVuYyIsImtleU1hbmFnZW1lbnRBbGdvcml0aG1zIiwiY29udGVudEVuY3J5cHRpb25BbGdvcml0aG1zIiwiaGFzIiwiSk9TRUFsZ05vdEFsbG93ZWQiLCJlbmNyeXB0ZWRLZXkiLCJyZXNvbHZlZEtleSIsImNlayIsImVyciIsIlR5cGVFcnJvciIsImVuY29kZXIiLCJlbmNvZGUiLCJhZGRpdGlvbmFsRGF0YSIsImNvbmNhdCIsInBsYWludGV4dCIsImluZmxhdGVSYXciLCJpbmZsYXRlIiwicmVzdWx0IiwiYWRkaXRpb25hbEF1dGhlbnRpY2F0ZWREYXRhIiwic2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIiLCJ1bnByb3RlY3RlZEhlYWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FlattenedEncrypt = exports.unprotected = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst encrypt_js_1 = __webpack_require__(/*! ../../runtime/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js\");\nconst zlib_js_1 = __webpack_require__(/*! ../../runtime/zlib.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js\");\nconst iv_js_1 = __webpack_require__(/*! ../../lib/iv.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js\");\nconst encrypt_key_management_js_1 = __webpack_require__(/*! ../../lib/encrypt_key_management.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nexports.unprotected = Symbol();\nclass FlattenedEncrypt {\n    constructor(plaintext){\n        if (!(plaintext instanceof Uint8Array)) {\n            throw new TypeError(\"plaintext must be an instance of Uint8Array\");\n        }\n        this._plaintext = plaintext;\n    }\n    setKeyManagementParameters(parameters) {\n        if (this._keyManagementParameters) {\n            throw new TypeError(\"setKeyManagementParameters can only be called once\");\n        }\n        this._keyManagementParameters = parameters;\n        return this;\n    }\n    setProtectedHeader(protectedHeader) {\n        if (this._protectedHeader) {\n            throw new TypeError(\"setProtectedHeader can only be called once\");\n        }\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    setSharedUnprotectedHeader(sharedUnprotectedHeader) {\n        if (this._sharedUnprotectedHeader) {\n            throw new TypeError(\"setSharedUnprotectedHeader can only be called once\");\n        }\n        this._sharedUnprotectedHeader = sharedUnprotectedHeader;\n        return this;\n    }\n    setUnprotectedHeader(unprotectedHeader) {\n        if (this._unprotectedHeader) {\n            throw new TypeError(\"setUnprotectedHeader can only be called once\");\n        }\n        this._unprotectedHeader = unprotectedHeader;\n        return this;\n    }\n    setAdditionalAuthenticatedData(aad) {\n        this._aad = aad;\n        return this;\n    }\n    setContentEncryptionKey(cek) {\n        if (this._cek) {\n            throw new TypeError(\"setContentEncryptionKey can only be called once\");\n        }\n        this._cek = cek;\n        return this;\n    }\n    setInitializationVector(iv) {\n        if (this._iv) {\n            throw new TypeError(\"setInitializationVector can only be called once\");\n        }\n        this._iv = iv;\n        return this;\n    }\n    async encrypt(key, options) {\n        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {\n            throw new errors_js_1.JWEInvalid(\"either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()\");\n        }\n        if (!(0, is_disjoint_js_1.default)(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {\n            throw new errors_js_1.JWEInvalid(\"JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint\");\n        }\n        const joseHeader = {\n            ...this._protectedHeader,\n            ...this._unprotectedHeader,\n            ...this._sharedUnprotectedHeader\n        };\n        (0, validate_crit_js_1.default)(errors_js_1.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);\n        if (joseHeader.zip !== undefined) {\n            if (!this._protectedHeader || !this._protectedHeader.zip) {\n                throw new errors_js_1.JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n            }\n            if (joseHeader.zip !== \"DEF\") {\n                throw new errors_js_1.JOSENotSupported('Unsupported JWE \"zip\" (Compression Algorithm) Header Parameter value');\n            }\n        }\n        const { alg, enc } = joseHeader;\n        if (typeof alg !== \"string\" || !alg) {\n            throw new errors_js_1.JWEInvalid('JWE \"alg\" (Algorithm) Header Parameter missing or invalid');\n        }\n        if (typeof enc !== \"string\" || !enc) {\n            throw new errors_js_1.JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter missing or invalid');\n        }\n        let encryptedKey;\n        if (alg === \"dir\") {\n            if (this._cek) {\n                throw new TypeError(\"setContentEncryptionKey cannot be called when using Direct Encryption\");\n            }\n        } else if (alg === \"ECDH-ES\") {\n            if (this._cek) {\n                throw new TypeError(\"setContentEncryptionKey cannot be called when using Direct Key Agreement\");\n            }\n        }\n        let cek;\n        {\n            let parameters;\n            ({ cek, encryptedKey, parameters } = await (0, encrypt_key_management_js_1.default)(alg, enc, key, this._cek, this._keyManagementParameters));\n            if (parameters) {\n                if (options && exports.unprotected in options) {\n                    if (!this._unprotectedHeader) {\n                        this.setUnprotectedHeader(parameters);\n                    } else {\n                        this._unprotectedHeader = {\n                            ...this._unprotectedHeader,\n                            ...parameters\n                        };\n                    }\n                } else {\n                    if (!this._protectedHeader) {\n                        this.setProtectedHeader(parameters);\n                    } else {\n                        this._protectedHeader = {\n                            ...this._protectedHeader,\n                            ...parameters\n                        };\n                    }\n                }\n            }\n        }\n        this._iv || (this._iv = (0, iv_js_1.default)(enc));\n        let additionalData;\n        let protectedHeader;\n        let aadMember;\n        if (this._protectedHeader) {\n            protectedHeader = buffer_utils_js_1.encoder.encode((0, base64url_js_1.encode)(JSON.stringify(this._protectedHeader)));\n        } else {\n            protectedHeader = buffer_utils_js_1.encoder.encode(\"\");\n        }\n        if (this._aad) {\n            aadMember = (0, base64url_js_1.encode)(this._aad);\n            additionalData = (0, buffer_utils_js_1.concat)(protectedHeader, buffer_utils_js_1.encoder.encode(\".\"), buffer_utils_js_1.encoder.encode(aadMember));\n        } else {\n            additionalData = protectedHeader;\n        }\n        let ciphertext;\n        let tag;\n        if (joseHeader.zip === \"DEF\") {\n            const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || zlib_js_1.deflate)(this._plaintext);\n            ({ ciphertext, tag } = await (0, encrypt_js_1.default)(enc, deflated, cek, this._iv, additionalData));\n        } else {\n            ;\n            ({ ciphertext, tag } = await (0, encrypt_js_1.default)(enc, this._plaintext, cek, this._iv, additionalData));\n        }\n        const jwe = {\n            ciphertext: (0, base64url_js_1.encode)(ciphertext),\n            iv: (0, base64url_js_1.encode)(this._iv),\n            tag: (0, base64url_js_1.encode)(tag)\n        };\n        if (encryptedKey) {\n            jwe.encrypted_key = (0, base64url_js_1.encode)(encryptedKey);\n        }\n        if (aadMember) {\n            jwe.aad = aadMember;\n        }\n        if (this._protectedHeader) {\n            jwe.protected = buffer_utils_js_1.decoder.decode(protectedHeader);\n        }\n        if (this._sharedUnprotectedHeader) {\n            jwe.unprotected = this._sharedUnprotectedHeader;\n        }\n        if (this._unprotectedHeader) {\n            jwe.header = this._unprotectedHeader;\n        }\n        return jwe;\n    }\n}\nexports.FlattenedEncrypt = FlattenedEncrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/decrypt.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/decrypt.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generalDecrypt = void 0;\nconst decrypt_js_1 = __webpack_require__(/*! ../flattened/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nasync function generalDecrypt(jwe, key, options) {\n    if (!(0, is_object_js_1.default)(jwe)) {\n        throw new errors_js_1.JWEInvalid(\"General JWE must be an object\");\n    }\n    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(is_object_js_1.default)) {\n        throw new errors_js_1.JWEInvalid(\"JWE Recipients missing or incorrect type\");\n    }\n    if (!jwe.recipients.length) {\n        throw new errors_js_1.JWEInvalid(\"JWE Recipients has no members\");\n    }\n    for (const recipient of jwe.recipients){\n        try {\n            return await (0, decrypt_js_1.flattenedDecrypt)({\n                aad: jwe.aad,\n                ciphertext: jwe.ciphertext,\n                encrypted_key: recipient.encrypted_key,\n                header: recipient.header,\n                iv: jwe.iv,\n                protected: jwe.protected,\n                tag: jwe.tag,\n                unprotected: jwe.unprotected\n            }, key, options);\n        } catch  {}\n    }\n    throw new errors_js_1.JWEDecryptionFailed();\n}\nexports.generalDecrypt = generalDecrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9nZW5lcmFsL2RlY3J5cHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsZUFBZUMsbUJBQU9BLENBQUMsNEhBQXlCO0FBQ3RELE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLCtHQUFzQjtBQUNsRCxNQUFNRSxpQkFBaUJGLG1CQUFPQSxDQUFDLG1IQUF3QjtBQUN2RCxlQUFlRixlQUFlSyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsT0FBTztJQUMzQyxJQUFJLENBQUMsQ0FBQyxHQUFHSCxlQUFlSSxPQUFPLEVBQUVILE1BQU07UUFDbkMsTUFBTSxJQUFJRixZQUFZTSxVQUFVLENBQUM7SUFDckM7SUFDQSxJQUFJLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ04sSUFBSU8sVUFBVSxLQUFLLENBQUNQLElBQUlPLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDVCxlQUFlSSxPQUFPLEdBQUc7UUFDakYsTUFBTSxJQUFJTCxZQUFZTSxVQUFVLENBQUM7SUFDckM7SUFDQSxJQUFJLENBQUNKLElBQUlPLFVBQVUsQ0FBQ0UsTUFBTSxFQUFFO1FBQ3hCLE1BQU0sSUFBSVgsWUFBWU0sVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsS0FBSyxNQUFNTSxhQUFhVixJQUFJTyxVQUFVLENBQUU7UUFDcEMsSUFBSTtZQUNBLE9BQU8sTUFBTSxDQUFDLEdBQUdYLGFBQWFlLGdCQUFnQixFQUFFO2dCQUM1Q0MsS0FBS1osSUFBSVksR0FBRztnQkFDWkMsWUFBWWIsSUFBSWEsVUFBVTtnQkFDMUJDLGVBQWVKLFVBQVVJLGFBQWE7Z0JBQ3RDQyxRQUFRTCxVQUFVSyxNQUFNO2dCQUN4QkMsSUFBSWhCLElBQUlnQixFQUFFO2dCQUNWQyxXQUFXakIsSUFBSWlCLFNBQVM7Z0JBQ3hCQyxLQUFLbEIsSUFBSWtCLEdBQUc7Z0JBQ1pDLGFBQWFuQixJQUFJbUIsV0FBVztZQUNoQyxHQUFHbEIsS0FBS0M7UUFDWixFQUNBLE9BQU0sQ0FDTjtJQUNKO0lBQ0EsTUFBTSxJQUFJSixZQUFZc0IsbUJBQW1CO0FBQzdDO0FBQ0EzQixzQkFBc0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd2UvZ2VuZXJhbC9kZWNyeXB0LmpzPzI5NzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYWxEZWNyeXB0ID0gdm9pZCAwO1xuY29uc3QgZGVjcnlwdF9qc18xID0gcmVxdWlyZShcIi4uL2ZsYXR0ZW5lZC9kZWNyeXB0LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhbERlY3J5cHQoandlLCBrZXksIG9wdGlvbnMpIHtcbiAgICBpZiAoISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShqd2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdHZW5lcmFsIEpXRSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoandlLnJlY2lwaWVudHMpIHx8ICFqd2UucmVjaXBpZW50cy5ldmVyeShpc19vYmplY3RfanNfMS5kZWZhdWx0KSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFJlY2lwaWVudHMgbWlzc2luZyBvciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAoIWp3ZS5yZWNpcGllbnRzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFJlY2lwaWVudHMgaGFzIG5vIG1lbWJlcnMnKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCByZWNpcGllbnQgb2YgandlLnJlY2lwaWVudHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCAoMCwgZGVjcnlwdF9qc18xLmZsYXR0ZW5lZERlY3J5cHQpKHtcbiAgICAgICAgICAgICAgICBhYWQ6IGp3ZS5hYWQsXG4gICAgICAgICAgICAgICAgY2lwaGVydGV4dDogandlLmNpcGhlcnRleHQsXG4gICAgICAgICAgICAgICAgZW5jcnlwdGVkX2tleTogcmVjaXBpZW50LmVuY3J5cHRlZF9rZXksXG4gICAgICAgICAgICAgICAgaGVhZGVyOiByZWNpcGllbnQuaGVhZGVyLFxuICAgICAgICAgICAgICAgIGl2OiBqd2UuaXYsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkOiBqd2UucHJvdGVjdGVkLFxuICAgICAgICAgICAgICAgIHRhZzogandlLnRhZyxcbiAgICAgICAgICAgICAgICB1bnByb3RlY3RlZDogandlLnVucHJvdGVjdGVkLFxuICAgICAgICAgICAgfSwga2V5LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRURlY3J5cHRpb25GYWlsZWQoKTtcbn1cbmV4cG9ydHMuZ2VuZXJhbERlY3J5cHQgPSBnZW5lcmFsRGVjcnlwdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdlbmVyYWxEZWNyeXB0IiwiZGVjcnlwdF9qc18xIiwicmVxdWlyZSIsImVycm9yc19qc18xIiwiaXNfb2JqZWN0X2pzXzEiLCJqd2UiLCJrZXkiLCJvcHRpb25zIiwiZGVmYXVsdCIsIkpXRUludmFsaWQiLCJBcnJheSIsImlzQXJyYXkiLCJyZWNpcGllbnRzIiwiZXZlcnkiLCJsZW5ndGgiLCJyZWNpcGllbnQiLCJmbGF0dGVuZWREZWNyeXB0IiwiYWFkIiwiY2lwaGVydGV4dCIsImVuY3J5cHRlZF9rZXkiLCJoZWFkZXIiLCJpdiIsInByb3RlY3RlZCIsInRhZyIsInVucHJvdGVjdGVkIiwiSldFRGVjcnlwdGlvbkZhaWxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/encrypt.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/encrypt.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GeneralEncrypt = void 0;\nconst encrypt_js_1 = __webpack_require__(/*! ../flattened/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst cek_js_1 = __webpack_require__(/*! ../../lib/cek.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst encrypt_key_management_js_1 = __webpack_require__(/*! ../../lib/encrypt_key_management.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nclass IndividualRecipient {\n    constructor(enc, key, options){\n        this.parent = enc;\n        this.key = key;\n        this.options = options;\n    }\n    setUnprotectedHeader(unprotectedHeader) {\n        if (this.unprotectedHeader) {\n            throw new TypeError(\"setUnprotectedHeader can only be called once\");\n        }\n        this.unprotectedHeader = unprotectedHeader;\n        return this;\n    }\n    addRecipient(...args) {\n        return this.parent.addRecipient(...args);\n    }\n    encrypt(...args) {\n        return this.parent.encrypt(...args);\n    }\n    done() {\n        return this.parent;\n    }\n}\nclass GeneralEncrypt {\n    constructor(plaintext){\n        this._recipients = [];\n        this._plaintext = plaintext;\n    }\n    addRecipient(key, options) {\n        const recipient = new IndividualRecipient(this, key, {\n            crit: options === null || options === void 0 ? void 0 : options.crit\n        });\n        this._recipients.push(recipient);\n        return recipient;\n    }\n    setProtectedHeader(protectedHeader) {\n        if (this._protectedHeader) {\n            throw new TypeError(\"setProtectedHeader can only be called once\");\n        }\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    setSharedUnprotectedHeader(sharedUnprotectedHeader) {\n        if (this._unprotectedHeader) {\n            throw new TypeError(\"setSharedUnprotectedHeader can only be called once\");\n        }\n        this._unprotectedHeader = sharedUnprotectedHeader;\n        return this;\n    }\n    setAdditionalAuthenticatedData(aad) {\n        this._aad = aad;\n        return this;\n    }\n    async encrypt(options) {\n        var _a, _b, _c;\n        if (!this._recipients.length) {\n            throw new errors_js_1.JWEInvalid(\"at least one recipient must be added\");\n        }\n        options = {\n            deflateRaw: options === null || options === void 0 ? void 0 : options.deflateRaw\n        };\n        if (this._recipients.length === 1) {\n            const [recipient] = this._recipients;\n            const flattened = await new encrypt_js_1.FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).encrypt(recipient.key, {\n                ...recipient.options,\n                ...options\n            });\n            let jwe = {\n                ciphertext: flattened.ciphertext,\n                iv: flattened.iv,\n                recipients: [\n                    {}\n                ],\n                tag: flattened.tag\n            };\n            if (flattened.aad) jwe.aad = flattened.aad;\n            if (flattened.protected) jwe.protected = flattened.protected;\n            if (flattened.unprotected) jwe.unprotected = flattened.unprotected;\n            if (flattened.encrypted_key) jwe.recipients[0].encrypted_key = flattened.encrypted_key;\n            if (flattened.header) jwe.recipients[0].header = flattened.header;\n            return jwe;\n        }\n        let enc;\n        for(let i = 0; i < this._recipients.length; i++){\n            const recipient = this._recipients[i];\n            if (!(0, is_disjoint_js_1.default)(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) {\n                throw new errors_js_1.JWEInvalid(\"JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint\");\n            }\n            const joseHeader = {\n                ...this._protectedHeader,\n                ...this._unprotectedHeader,\n                ...recipient.unprotectedHeader\n            };\n            const { alg } = joseHeader;\n            if (typeof alg !== \"string\" || !alg) {\n                throw new errors_js_1.JWEInvalid('JWE \"alg\" (Algorithm) Header Parameter missing or invalid');\n            }\n            if (alg === \"dir\" || alg === \"ECDH-ES\") {\n                throw new errors_js_1.JWEInvalid('\"dir\" and \"ECDH-ES\" alg may only be used with a single recipient');\n            }\n            if (typeof joseHeader.enc !== \"string\" || !joseHeader.enc) {\n                throw new errors_js_1.JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter missing or invalid');\n            }\n            if (!enc) {\n                enc = joseHeader.enc;\n            } else if (enc !== joseHeader.enc) {\n                throw new errors_js_1.JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter must be the same for all recipients');\n            }\n            (0, validate_crit_js_1.default)(errors_js_1.JWEInvalid, new Map(), recipient.options.crit, this._protectedHeader, joseHeader);\n            if (joseHeader.zip !== undefined) {\n                if (!this._protectedHeader || !this._protectedHeader.zip) {\n                    throw new errors_js_1.JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n                }\n            }\n        }\n        const cek = (0, cek_js_1.default)(enc);\n        let jwe = {\n            ciphertext: \"\",\n            iv: \"\",\n            recipients: [],\n            tag: \"\"\n        };\n        for(let i = 0; i < this._recipients.length; i++){\n            const recipient = this._recipients[i];\n            const target = {};\n            jwe.recipients.push(target);\n            const joseHeader = {\n                ...this._protectedHeader,\n                ...this._unprotectedHeader,\n                ...recipient.unprotectedHeader\n            };\n            const p2c = joseHeader.alg.startsWith(\"PBES2\") ? 2048 + i : undefined;\n            if (i === 0) {\n                const flattened = await new encrypt_js_1.FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(cek).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).setKeyManagementParameters({\n                    p2c\n                }).encrypt(recipient.key, {\n                    ...recipient.options,\n                    ...options,\n                    [encrypt_js_1.unprotected]: true\n                });\n                jwe.ciphertext = flattened.ciphertext;\n                jwe.iv = flattened.iv;\n                jwe.tag = flattened.tag;\n                if (flattened.aad) jwe.aad = flattened.aad;\n                if (flattened.protected) jwe.protected = flattened.protected;\n                if (flattened.unprotected) jwe.unprotected = flattened.unprotected;\n                target.encrypted_key = flattened.encrypted_key;\n                if (flattened.header) target.header = flattened.header;\n                continue;\n            }\n            const { encryptedKey, parameters } = await (0, encrypt_key_management_js_1.default)(((_a = recipient.unprotectedHeader) === null || _a === void 0 ? void 0 : _a.alg) || ((_b = this._protectedHeader) === null || _b === void 0 ? void 0 : _b.alg) || ((_c = this._unprotectedHeader) === null || _c === void 0 ? void 0 : _c.alg), enc, recipient.key, cek, {\n                p2c\n            });\n            target.encrypted_key = (0, base64url_js_1.encode)(encryptedKey);\n            if (recipient.unprotectedHeader || parameters) target.header = {\n                ...recipient.unprotectedHeader,\n                ...parameters\n            };\n        }\n        return jwe;\n    }\n}\nexports.GeneralEncrypt = GeneralEncrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/embedded.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/embedded.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EmbeddedJWK = void 0;\nconst import_js_1 = __webpack_require__(/*! ../key/import.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nasync function EmbeddedJWK(protectedHeader, token) {\n    const joseHeader = {\n        ...protectedHeader,\n        ...token === null || token === void 0 ? void 0 : token.header\n    };\n    if (!(0, is_object_js_1.default)(joseHeader.jwk)) {\n        throw new errors_js_1.JWSInvalid('\"jwk\" (JSON Web Key) Header Parameter must be a JSON object');\n    }\n    const key = await (0, import_js_1.importJWK)({\n        ...joseHeader.jwk,\n        ext: true\n    }, joseHeader.alg, true);\n    if (key instanceof Uint8Array || key.type !== \"public\") {\n        throw new errors_js_1.JWSInvalid('\"jwk\" (JSON Web Key) Header Parameter must be a public key');\n    }\n    return key;\n}\nexports.EmbeddedJWK = EmbeddedJWK;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ay9lbWJlZGRlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUJBQW1CLEdBQUcsS0FBSztBQUMzQixNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQywwR0FBa0I7QUFDOUMsTUFBTUMsaUJBQWlCRCxtQkFBT0EsQ0FBQyxnSEFBcUI7QUFDcEQsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsNEdBQW1CO0FBQy9DLGVBQWVGLFlBQVlLLGVBQWUsRUFBRUMsS0FBSztJQUM3QyxNQUFNQyxhQUFhO1FBQ2YsR0FBR0YsZUFBZTtRQUNsQixHQUFHQyxVQUFVLFFBQVFBLFVBQVUsS0FBSyxJQUFJLEtBQUssSUFBSUEsTUFBTUUsTUFBTTtJQUNqRTtJQUNBLElBQUksQ0FBQyxDQUFDLEdBQUdMLGVBQWVNLE9BQU8sRUFBRUYsV0FBV0csR0FBRyxHQUFHO1FBQzlDLE1BQU0sSUFBSU4sWUFBWU8sVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsTUFBTUMsTUFBTSxNQUFNLENBQUMsR0FBR1gsWUFBWVksU0FBUyxFQUFFO1FBQUUsR0FBR04sV0FBV0csR0FBRztRQUFFSSxLQUFLO0lBQUssR0FBR1AsV0FBV1EsR0FBRyxFQUFFO0lBQy9GLElBQUlILGVBQWVJLGNBQWNKLElBQUlLLElBQUksS0FBSyxVQUFVO1FBQ3BELE1BQU0sSUFBSWIsWUFBWU8sVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsT0FBT0M7QUFDWDtBQUNBZCxtQkFBbUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd2svZW1iZWRkZWQuanM/YjYxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW1iZWRkZWRKV0sgPSB2b2lkIDA7XG5jb25zdCBpbXBvcnRfanNfMSA9IHJlcXVpcmUoXCIuLi9rZXkvaW1wb3J0LmpzXCIpO1xuY29uc3QgaXNfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2lzX29iamVjdC5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gRW1iZWRkZWRKV0socHJvdGVjdGVkSGVhZGVyLCB0b2tlbikge1xuICAgIGNvbnN0IGpvc2VIZWFkZXIgPSB7XG4gICAgICAgIC4uLnByb3RlY3RlZEhlYWRlcixcbiAgICAgICAgLi4udG9rZW4gPT09IG51bGwgfHwgdG9rZW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRva2VuLmhlYWRlcixcbiAgICB9O1xuICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKGpvc2VIZWFkZXIuandrKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnXCJqd2tcIiAoSlNPTiBXZWIgS2V5KSBIZWFkZXIgUGFyYW1ldGVyIG11c3QgYmUgYSBKU09OIG9iamVjdCcpO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSBhd2FpdCAoMCwgaW1wb3J0X2pzXzEuaW1wb3J0SldLKSh7IC4uLmpvc2VIZWFkZXIuandrLCBleHQ6IHRydWUgfSwgam9zZUhlYWRlci5hbGcsIHRydWUpO1xuICAgIGlmIChrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGtleS50eXBlICE9PSAncHVibGljJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnXCJqd2tcIiAoSlNPTiBXZWIgS2V5KSBIZWFkZXIgUGFyYW1ldGVyIG11c3QgYmUgYSBwdWJsaWMga2V5Jyk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG59XG5leHBvcnRzLkVtYmVkZGVkSldLID0gRW1iZWRkZWRKV0s7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJFbWJlZGRlZEpXSyIsImltcG9ydF9qc18xIiwicmVxdWlyZSIsImlzX29iamVjdF9qc18xIiwiZXJyb3JzX2pzXzEiLCJwcm90ZWN0ZWRIZWFkZXIiLCJ0b2tlbiIsImpvc2VIZWFkZXIiLCJoZWFkZXIiLCJkZWZhdWx0IiwiandrIiwiSldTSW52YWxpZCIsImtleSIsImltcG9ydEpXSyIsImV4dCIsImFsZyIsIlVpbnQ4QXJyYXkiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/embedded.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/thumbprint.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/thumbprint.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateJwkThumbprintUri = exports.calculateJwkThumbprint = void 0;\nconst digest_js_1 = __webpack_require__(/*! ../runtime/digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst check = (value, description)=>{\n    if (typeof value !== \"string\" || !value) {\n        throw new errors_js_1.JWKInvalid(`${description} missing or invalid`);\n    }\n};\nasync function calculateJwkThumbprint(jwk, digestAlgorithm) {\n    if (!(0, is_object_js_1.default)(jwk)) {\n        throw new TypeError(\"JWK must be an object\");\n    }\n    digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : digestAlgorithm = \"sha256\";\n    if (digestAlgorithm !== \"sha256\" && digestAlgorithm !== \"sha384\" && digestAlgorithm !== \"sha512\") {\n        throw new TypeError('digestAlgorithm must one of \"sha256\", \"sha384\", or \"sha512\"');\n    }\n    let components;\n    switch(jwk.kty){\n        case \"EC\":\n            check(jwk.crv, '\"crv\" (Curve) Parameter');\n            check(jwk.x, '\"x\" (X Coordinate) Parameter');\n            check(jwk.y, '\"y\" (Y Coordinate) Parameter');\n            components = {\n                crv: jwk.crv,\n                kty: jwk.kty,\n                x: jwk.x,\n                y: jwk.y\n            };\n            break;\n        case \"OKP\":\n            check(jwk.crv, '\"crv\" (Subtype of Key Pair) Parameter');\n            check(jwk.x, '\"x\" (Public Key) Parameter');\n            components = {\n                crv: jwk.crv,\n                kty: jwk.kty,\n                x: jwk.x\n            };\n            break;\n        case \"RSA\":\n            check(jwk.e, '\"e\" (Exponent) Parameter');\n            check(jwk.n, '\"n\" (Modulus) Parameter');\n            components = {\n                e: jwk.e,\n                kty: jwk.kty,\n                n: jwk.n\n            };\n            break;\n        case \"oct\":\n            check(jwk.k, '\"k\" (Key Value) Parameter');\n            components = {\n                k: jwk.k,\n                kty: jwk.kty\n            };\n            break;\n        default:\n            throw new errors_js_1.JOSENotSupported('\"kty\" (Key Type) Parameter missing or unsupported');\n    }\n    const data = buffer_utils_js_1.encoder.encode(JSON.stringify(components));\n    return (0, base64url_js_1.encode)(await (0, digest_js_1.default)(digestAlgorithm, data));\n}\nexports.calculateJwkThumbprint = calculateJwkThumbprint;\nasync function calculateJwkThumbprintUri(jwk, digestAlgorithm) {\n    digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : digestAlgorithm = \"sha256\";\n    const thumbprint = await calculateJwkThumbprint(jwk, digestAlgorithm);\n    return `urn:ietf:params:oauth:jwk-thumbprint:sha-${digestAlgorithm.slice(-3)}:${thumbprint}`;\n}\nexports.calculateJwkThumbprintUri = calculateJwkThumbprintUri;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ay90aHVtYnByaW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQ0FBaUMsR0FBR0EsOEJBQThCLEdBQUcsS0FBSztBQUMxRSxNQUFNSSxjQUFjQyxtQkFBT0EsQ0FBQyxrSEFBc0I7QUFDbEQsTUFBTUMsaUJBQWlCRCxtQkFBT0EsQ0FBQyx3SEFBeUI7QUFDeEQsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsNEdBQW1CO0FBQy9DLE1BQU1HLG9CQUFvQkgsbUJBQU9BLENBQUMsc0hBQXdCO0FBQzFELE1BQU1JLGlCQUFpQkosbUJBQU9BLENBQUMsZ0hBQXFCO0FBQ3BELE1BQU1LLFFBQVEsQ0FBQ1QsT0FBT1U7SUFDbEIsSUFBSSxPQUFPVixVQUFVLFlBQVksQ0FBQ0EsT0FBTztRQUNyQyxNQUFNLElBQUlNLFlBQVlLLFVBQVUsQ0FBQyxDQUFDLEVBQUVELFlBQVksbUJBQW1CLENBQUM7SUFDeEU7QUFDSjtBQUNBLGVBQWVSLHVCQUF1QlUsR0FBRyxFQUFFQyxlQUFlO0lBQ3RELElBQUksQ0FBQyxDQUFDLEdBQUdMLGVBQWVNLE9BQU8sRUFBRUYsTUFBTTtRQUNuQyxNQUFNLElBQUlHLFVBQVU7SUFDeEI7SUFDQUYsb0JBQW9CLFFBQVFBLG9CQUFvQixLQUFLLElBQUlBLGtCQUFtQkEsa0JBQWtCO0lBQzlGLElBQUlBLG9CQUFvQixZQUNwQkEsb0JBQW9CLFlBQ3BCQSxvQkFBb0IsVUFBVTtRQUM5QixNQUFNLElBQUlFLFVBQVU7SUFDeEI7SUFDQSxJQUFJQztJQUNKLE9BQVFKLElBQUlLLEdBQUc7UUFDWCxLQUFLO1lBQ0RSLE1BQU1HLElBQUlNLEdBQUcsRUFBRTtZQUNmVCxNQUFNRyxJQUFJTyxDQUFDLEVBQUU7WUFDYlYsTUFBTUcsSUFBSVEsQ0FBQyxFQUFFO1lBQ2JKLGFBQWE7Z0JBQUVFLEtBQUtOLElBQUlNLEdBQUc7Z0JBQUVELEtBQUtMLElBQUlLLEdBQUc7Z0JBQUVFLEdBQUdQLElBQUlPLENBQUM7Z0JBQUVDLEdBQUdSLElBQUlRLENBQUM7WUFBQztZQUM5RDtRQUNKLEtBQUs7WUFDRFgsTUFBTUcsSUFBSU0sR0FBRyxFQUFFO1lBQ2ZULE1BQU1HLElBQUlPLENBQUMsRUFBRTtZQUNiSCxhQUFhO2dCQUFFRSxLQUFLTixJQUFJTSxHQUFHO2dCQUFFRCxLQUFLTCxJQUFJSyxHQUFHO2dCQUFFRSxHQUFHUCxJQUFJTyxDQUFDO1lBQUM7WUFDcEQ7UUFDSixLQUFLO1lBQ0RWLE1BQU1HLElBQUlTLENBQUMsRUFBRTtZQUNiWixNQUFNRyxJQUFJVSxDQUFDLEVBQUU7WUFDYk4sYUFBYTtnQkFBRUssR0FBR1QsSUFBSVMsQ0FBQztnQkFBRUosS0FBS0wsSUFBSUssR0FBRztnQkFBRUssR0FBR1YsSUFBSVUsQ0FBQztZQUFDO1lBQ2hEO1FBQ0osS0FBSztZQUNEYixNQUFNRyxJQUFJVyxDQUFDLEVBQUU7WUFDYlAsYUFBYTtnQkFBRU8sR0FBR1gsSUFBSVcsQ0FBQztnQkFBRU4sS0FBS0wsSUFBSUssR0FBRztZQUFDO1lBQ3RDO1FBQ0o7WUFDSSxNQUFNLElBQUlYLFlBQVlrQixnQkFBZ0IsQ0FBQztJQUMvQztJQUNBLE1BQU1DLE9BQU9sQixrQkFBa0JtQixPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsS0FBS0MsU0FBUyxDQUFDYjtJQUM3RCxPQUFPLENBQUMsR0FBR1gsZUFBZXNCLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBR3hCLFlBQVlXLE9BQU8sRUFBRUQsaUJBQWlCWTtBQUN0RjtBQUNBMUIsOEJBQThCLEdBQUdHO0FBQ2pDLGVBQWVELDBCQUEwQlcsR0FBRyxFQUFFQyxlQUFlO0lBQ3pEQSxvQkFBb0IsUUFBUUEsb0JBQW9CLEtBQUssSUFBSUEsa0JBQW1CQSxrQkFBa0I7SUFDOUYsTUFBTWlCLGFBQWEsTUFBTTVCLHVCQUF1QlUsS0FBS0M7SUFDckQsT0FBTyxDQUFDLHlDQUF5QyxFQUFFQSxnQkFBZ0JrQixLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRUQsV0FBVyxDQUFDO0FBQ2hHO0FBQ0EvQixpQ0FBaUMsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd2svdGh1bWJwcmludC5qcz80ODgzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYWxjdWxhdGVKd2tUaHVtYnByaW50VXJpID0gZXhwb3J0cy5jYWxjdWxhdGVKd2tUaHVtYnByaW50ID0gdm9pZCAwO1xuY29uc3QgZGlnZXN0X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9kaWdlc3QuanNcIik7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IGlzX29iamVjdF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pc19vYmplY3QuanNcIik7XG5jb25zdCBjaGVjayA9ICh2YWx1ZSwgZGVzY3JpcHRpb24pID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCAhdmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXS0ludmFsaWQoYCR7ZGVzY3JpcHRpb259IG1pc3Npbmcgb3IgaW52YWxpZGApO1xuICAgIH1cbn07XG5hc3luYyBmdW5jdGlvbiBjYWxjdWxhdGVKd2tUaHVtYnByaW50KGp3aywgZGlnZXN0QWxnb3JpdGhtKSB7XG4gICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkoandrKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKV0sgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgZGlnZXN0QWxnb3JpdGhtICE9PSBudWxsICYmIGRpZ2VzdEFsZ29yaXRobSAhPT0gdm9pZCAwID8gZGlnZXN0QWxnb3JpdGhtIDogKGRpZ2VzdEFsZ29yaXRobSA9ICdzaGEyNTYnKTtcbiAgICBpZiAoZGlnZXN0QWxnb3JpdGhtICE9PSAnc2hhMjU2JyAmJlxuICAgICAgICBkaWdlc3RBbGdvcml0aG0gIT09ICdzaGEzODQnICYmXG4gICAgICAgIGRpZ2VzdEFsZ29yaXRobSAhPT0gJ3NoYTUxMicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGlnZXN0QWxnb3JpdGhtIG11c3Qgb25lIG9mIFwic2hhMjU2XCIsIFwic2hhMzg0XCIsIG9yIFwic2hhNTEyXCInKTtcbiAgICB9XG4gICAgbGV0IGNvbXBvbmVudHM7XG4gICAgc3dpdGNoIChqd2sua3R5KSB7XG4gICAgICAgIGNhc2UgJ0VDJzpcbiAgICAgICAgICAgIGNoZWNrKGp3ay5jcnYsICdcImNydlwiIChDdXJ2ZSkgUGFyYW1ldGVyJyk7XG4gICAgICAgICAgICBjaGVjayhqd2sueCwgJ1wieFwiIChYIENvb3JkaW5hdGUpIFBhcmFtZXRlcicpO1xuICAgICAgICAgICAgY2hlY2soandrLnksICdcInlcIiAoWSBDb29yZGluYXRlKSBQYXJhbWV0ZXInKTtcbiAgICAgICAgICAgIGNvbXBvbmVudHMgPSB7IGNydjogandrLmNydiwga3R5OiBqd2sua3R5LCB4OiBqd2sueCwgeTogandrLnkgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdPS1AnOlxuICAgICAgICAgICAgY2hlY2soandrLmNydiwgJ1wiY3J2XCIgKFN1YnR5cGUgb2YgS2V5IFBhaXIpIFBhcmFtZXRlcicpO1xuICAgICAgICAgICAgY2hlY2soandrLngsICdcInhcIiAoUHVibGljIEtleSkgUGFyYW1ldGVyJyk7XG4gICAgICAgICAgICBjb21wb25lbnRzID0geyBjcnY6IGp3ay5jcnYsIGt0eTogandrLmt0eSwgeDogandrLnggfTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdSU0EnOlxuICAgICAgICAgICAgY2hlY2soandrLmUsICdcImVcIiAoRXhwb25lbnQpIFBhcmFtZXRlcicpO1xuICAgICAgICAgICAgY2hlY2soandrLm4sICdcIm5cIiAoTW9kdWx1cykgUGFyYW1ldGVyJyk7XG4gICAgICAgICAgICBjb21wb25lbnRzID0geyBlOiBqd2suZSwga3R5OiBqd2sua3R5LCBuOiBqd2subiB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ29jdCc6XG4gICAgICAgICAgICBjaGVjayhqd2suaywgJ1wia1wiIChLZXkgVmFsdWUpIFBhcmFtZXRlcicpO1xuICAgICAgICAgICAgY29tcG9uZW50cyA9IHsgazogandrLmssIGt0eTogandrLmt0eSB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnXCJrdHlcIiAoS2V5IFR5cGUpIFBhcmFtZXRlciBtaXNzaW5nIG9yIHVuc3VwcG9ydGVkJyk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBidWZmZXJfdXRpbHNfanNfMS5lbmNvZGVyLmVuY29kZShKU09OLnN0cmluZ2lmeShjb21wb25lbnRzKSk7XG4gICAgcmV0dXJuICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGF3YWl0ICgwLCBkaWdlc3RfanNfMS5kZWZhdWx0KShkaWdlc3RBbGdvcml0aG0sIGRhdGEpKTtcbn1cbmV4cG9ydHMuY2FsY3VsYXRlSndrVGh1bWJwcmludCA9IGNhbGN1bGF0ZUp3a1RodW1icHJpbnQ7XG5hc3luYyBmdW5jdGlvbiBjYWxjdWxhdGVKd2tUaHVtYnByaW50VXJpKGp3aywgZGlnZXN0QWxnb3JpdGhtKSB7XG4gICAgZGlnZXN0QWxnb3JpdGhtICE9PSBudWxsICYmIGRpZ2VzdEFsZ29yaXRobSAhPT0gdm9pZCAwID8gZGlnZXN0QWxnb3JpdGhtIDogKGRpZ2VzdEFsZ29yaXRobSA9ICdzaGEyNTYnKTtcbiAgICBjb25zdCB0aHVtYnByaW50ID0gYXdhaXQgY2FsY3VsYXRlSndrVGh1bWJwcmludChqd2ssIGRpZ2VzdEFsZ29yaXRobSk7XG4gICAgcmV0dXJuIGB1cm46aWV0ZjpwYXJhbXM6b2F1dGg6andrLXRodW1icHJpbnQ6c2hhLSR7ZGlnZXN0QWxnb3JpdGhtLnNsaWNlKC0zKX06JHt0aHVtYnByaW50fWA7XG59XG5leHBvcnRzLmNhbGN1bGF0ZUp3a1RodW1icHJpbnRVcmkgPSBjYWxjdWxhdGVKd2tUaHVtYnByaW50VXJpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2FsY3VsYXRlSndrVGh1bWJwcmludFVyaSIsImNhbGN1bGF0ZUp3a1RodW1icHJpbnQiLCJkaWdlc3RfanNfMSIsInJlcXVpcmUiLCJiYXNlNjR1cmxfanNfMSIsImVycm9yc19qc18xIiwiYnVmZmVyX3V0aWxzX2pzXzEiLCJpc19vYmplY3RfanNfMSIsImNoZWNrIiwiZGVzY3JpcHRpb24iLCJKV0tJbnZhbGlkIiwiandrIiwiZGlnZXN0QWxnb3JpdGhtIiwiZGVmYXVsdCIsIlR5cGVFcnJvciIsImNvbXBvbmVudHMiLCJrdHkiLCJjcnYiLCJ4IiwieSIsImUiLCJuIiwiayIsIkpPU0VOb3RTdXBwb3J0ZWQiLCJkYXRhIiwiZW5jb2RlciIsImVuY29kZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0aHVtYnByaW50Iiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/thumbprint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createLocalJWKSet = exports.LocalJWKSet = exports.isJWKSLike = void 0;\nconst import_js_1 = __webpack_require__(/*! ../key/import.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nfunction getKtyFromAlg(alg) {\n    switch(typeof alg === \"string\" && alg.slice(0, 2)){\n        case \"RS\":\n        case \"PS\":\n            return \"RSA\";\n        case \"ES\":\n            return \"EC\";\n        case \"Ed\":\n            return \"OKP\";\n        default:\n            throw new errors_js_1.JOSENotSupported('Unsupported \"alg\" value for a JSON Web Key Set');\n    }\n}\nfunction isJWKSLike(jwks) {\n    return jwks && typeof jwks === \"object\" && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);\n}\nexports.isJWKSLike = isJWKSLike;\nfunction isJWKLike(key) {\n    return (0, is_object_js_1.default)(key);\n}\nfunction clone(obj) {\n    if (typeof structuredClone === \"function\") {\n        return structuredClone(obj);\n    }\n    return JSON.parse(JSON.stringify(obj));\n}\nclass LocalJWKSet {\n    constructor(jwks){\n        this._cached = new WeakMap();\n        if (!isJWKSLike(jwks)) {\n            throw new errors_js_1.JWKSInvalid(\"JSON Web Key Set malformed\");\n        }\n        this._jwks = clone(jwks);\n    }\n    async getKey(protectedHeader, token) {\n        const { alg, kid } = {\n            ...protectedHeader,\n            ...token === null || token === void 0 ? void 0 : token.header\n        };\n        const kty = getKtyFromAlg(alg);\n        const candidates = this._jwks.keys.filter((jwk)=>{\n            let candidate = kty === jwk.kty;\n            if (candidate && typeof kid === \"string\") {\n                candidate = kid === jwk.kid;\n            }\n            if (candidate && typeof jwk.alg === \"string\") {\n                candidate = alg === jwk.alg;\n            }\n            if (candidate && typeof jwk.use === \"string\") {\n                candidate = jwk.use === \"sig\";\n            }\n            if (candidate && Array.isArray(jwk.key_ops)) {\n                candidate = jwk.key_ops.includes(\"verify\");\n            }\n            if (candidate && alg === \"EdDSA\") {\n                candidate = jwk.crv === \"Ed25519\" || jwk.crv === \"Ed448\";\n            }\n            if (candidate) {\n                switch(alg){\n                    case \"ES256\":\n                        candidate = jwk.crv === \"P-256\";\n                        break;\n                    case \"ES256K\":\n                        candidate = jwk.crv === \"secp256k1\";\n                        break;\n                    case \"ES384\":\n                        candidate = jwk.crv === \"P-384\";\n                        break;\n                    case \"ES512\":\n                        candidate = jwk.crv === \"P-521\";\n                        break;\n                }\n            }\n            return candidate;\n        });\n        const { 0: jwk, length } = candidates;\n        if (length === 0) {\n            throw new errors_js_1.JWKSNoMatchingKey();\n        } else if (length !== 1) {\n            const error = new errors_js_1.JWKSMultipleMatchingKeys();\n            const { _cached } = this;\n            error[Symbol.asyncIterator] = async function*() {\n                for (const jwk of candidates){\n                    try {\n                        yield await importWithAlgCache(_cached, jwk, alg);\n                    } catch  {\n                        continue;\n                    }\n                }\n            };\n            throw error;\n        }\n        return importWithAlgCache(this._cached, jwk, alg);\n    }\n}\nexports.LocalJWKSet = LocalJWKSet;\nasync function importWithAlgCache(cache, jwk, alg) {\n    const cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);\n    if (cached[alg] === undefined) {\n        const key = await (0, import_js_1.importJWK)({\n            ...jwk,\n            ext: true\n        }, alg);\n        if (key instanceof Uint8Array || key.type !== \"public\") {\n            throw new errors_js_1.JWKSInvalid(\"JSON Web Key Set members must be public keys\");\n        }\n        cached[alg] = key;\n    }\n    return cached[alg];\n}\nfunction createLocalJWKSet(jwks) {\n    const set = new LocalJWKSet(jwks);\n    return async function(protectedHeader, token) {\n        return set.getKey(protectedHeader, token);\n    };\n}\nexports.createLocalJWKSet = createLocalJWKSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/remote.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/remote.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createRemoteJWKSet = void 0;\nconst fetch_jwks_js_1 = __webpack_require__(/*! ../runtime/fetch_jwks.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/fetch_jwks.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst local_js_1 = __webpack_require__(/*! ./local.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js\");\nfunction isCloudflareWorkers() {\n    return typeof WebSocketPair !== \"undefined\" || typeof navigator !== \"undefined\" && navigator.userAgent === \"Cloudflare-Workers\" || typeof EdgeRuntime !== \"undefined\" && EdgeRuntime === \"vercel\";\n}\nclass RemoteJWKSet extends local_js_1.LocalJWKSet {\n    constructor(url, options){\n        super({\n            keys: []\n        });\n        this._jwks = undefined;\n        if (!(url instanceof URL)) {\n            throw new TypeError(\"url must be an instance of URL\");\n        }\n        this._url = new URL(url.href);\n        this._options = {\n            agent: options === null || options === void 0 ? void 0 : options.agent,\n            headers: options === null || options === void 0 ? void 0 : options.headers\n        };\n        this._timeoutDuration = typeof (options === null || options === void 0 ? void 0 : options.timeoutDuration) === \"number\" ? options === null || options === void 0 ? void 0 : options.timeoutDuration : 5000;\n        this._cooldownDuration = typeof (options === null || options === void 0 ? void 0 : options.cooldownDuration) === \"number\" ? options === null || options === void 0 ? void 0 : options.cooldownDuration : 30000;\n        this._cacheMaxAge = typeof (options === null || options === void 0 ? void 0 : options.cacheMaxAge) === \"number\" ? options === null || options === void 0 ? void 0 : options.cacheMaxAge : 600000;\n    }\n    coolingDown() {\n        return typeof this._jwksTimestamp === \"number\" ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;\n    }\n    fresh() {\n        return typeof this._jwksTimestamp === \"number\" ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;\n    }\n    async getKey(protectedHeader, token) {\n        if (!this._jwks || !this.fresh()) {\n            await this.reload();\n        }\n        try {\n            return await super.getKey(protectedHeader, token);\n        } catch (err) {\n            if (err instanceof errors_js_1.JWKSNoMatchingKey) {\n                if (this.coolingDown() === false) {\n                    await this.reload();\n                    return super.getKey(protectedHeader, token);\n                }\n            }\n            throw err;\n        }\n    }\n    async reload() {\n        if (this._pendingFetch && isCloudflareWorkers()) {\n            this._pendingFetch = undefined;\n        }\n        this._pendingFetch || (this._pendingFetch = (0, fetch_jwks_js_1.default)(this._url, this._timeoutDuration, this._options).then((json)=>{\n            if (!(0, local_js_1.isJWKSLike)(json)) {\n                throw new errors_js_1.JWKSInvalid(\"JSON Web Key Set malformed\");\n            }\n            this._jwks = {\n                keys: json.keys\n            };\n            this._jwksTimestamp = Date.now();\n            this._pendingFetch = undefined;\n        }).catch((err)=>{\n            this._pendingFetch = undefined;\n            throw err;\n        }));\n        await this._pendingFetch;\n    }\n}\nfunction createRemoteJWKSet(url, options) {\n    const set = new RemoteJWKSet(url, options);\n    return async function(protectedHeader, token) {\n        return set.getKey(protectedHeader, token);\n    };\n}\nexports.createRemoteJWKSet = createRemoteJWKSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/remote.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CompactSign = void 0;\nconst sign_js_1 = __webpack_require__(/*! ../flattened/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js\");\nclass CompactSign {\n    constructor(payload){\n        this._flattened = new sign_js_1.FlattenedSign(payload);\n    }\n    setProtectedHeader(protectedHeader) {\n        this._flattened.setProtectedHeader(protectedHeader);\n        return this;\n    }\n    async sign(key, options) {\n        const jws = await this._flattened.sign(key, options);\n        if (jws.payload === undefined) {\n            throw new TypeError(\"use the flattened module for creating JWS with b64: false\");\n        }\n        return `${jws.protected}.${jws.payload}.${jws.signature}`;\n    }\n}\nexports.CompactSign = CompactSign;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3cy9jb21wYWN0L3NpZ24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUs7QUFDM0IsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMsc0hBQXNCO0FBQ2hELE1BQU1GO0lBQ0ZHLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJSixVQUFVSyxhQUFhLENBQUNGO0lBQ2xEO0lBQ0FHLG1CQUFtQkMsZUFBZSxFQUFFO1FBQ2hDLElBQUksQ0FBQ0gsVUFBVSxDQUFDRSxrQkFBa0IsQ0FBQ0M7UUFDbkMsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxNQUFNQyxLQUFLQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUNyQixNQUFNQyxNQUFNLE1BQU0sSUFBSSxDQUFDUCxVQUFVLENBQUNJLElBQUksQ0FBQ0MsS0FBS0M7UUFDNUMsSUFBSUMsSUFBSVIsT0FBTyxLQUFLUyxXQUFXO1lBQzNCLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBLE9BQU8sQ0FBQyxFQUFFRixJQUFJRyxTQUFTLENBQUMsQ0FBQyxFQUFFSCxJQUFJUixPQUFPLENBQUMsQ0FBQyxFQUFFUSxJQUFJSSxTQUFTLENBQUMsQ0FBQztJQUM3RDtBQUNKO0FBQ0FsQixtQkFBbUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd3MvY29tcGFjdC9zaWduLmpzPzYwOTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBhY3RTaWduID0gdm9pZCAwO1xuY29uc3Qgc2lnbl9qc18xID0gcmVxdWlyZShcIi4uL2ZsYXR0ZW5lZC9zaWduLmpzXCIpO1xuY2xhc3MgQ29tcGFjdFNpZ24ge1xuICAgIGNvbnN0cnVjdG9yKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5fZmxhdHRlbmVkID0gbmV3IHNpZ25fanNfMS5GbGF0dGVuZWRTaWduKHBheWxvYWQpO1xuICAgIH1cbiAgICBzZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZC5zZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24oa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGp3cyA9IGF3YWl0IHRoaXMuX2ZsYXR0ZW5lZC5zaWduKGtleSwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChqd3MucGF5bG9hZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1c2UgdGhlIGZsYXR0ZW5lZCBtb2R1bGUgZm9yIGNyZWF0aW5nIEpXUyB3aXRoIGI2NDogZmFsc2UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7andzLnByb3RlY3RlZH0uJHtqd3MucGF5bG9hZH0uJHtqd3Muc2lnbmF0dXJlfWA7XG4gICAgfVxufVxuZXhwb3J0cy5Db21wYWN0U2lnbiA9IENvbXBhY3RTaWduO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29tcGFjdFNpZ24iLCJzaWduX2pzXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJwYXlsb2FkIiwiX2ZsYXR0ZW5lZCIsIkZsYXR0ZW5lZFNpZ24iLCJzZXRQcm90ZWN0ZWRIZWFkZXIiLCJwcm90ZWN0ZWRIZWFkZXIiLCJzaWduIiwia2V5Iiwib3B0aW9ucyIsImp3cyIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsInByb3RlY3RlZCIsInNpZ25hdHVyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.compactVerify = void 0;\nconst verify_js_1 = __webpack_require__(/*! ../flattened/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nasync function compactVerify(jws, key, options) {\n    if (jws instanceof Uint8Array) {\n        jws = buffer_utils_js_1.decoder.decode(jws);\n    }\n    if (typeof jws !== \"string\") {\n        throw new errors_js_1.JWSInvalid(\"Compact JWS must be a string or Uint8Array\");\n    }\n    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split(\".\");\n    if (length !== 3) {\n        throw new errors_js_1.JWSInvalid(\"Invalid Compact JWS\");\n    }\n    const verified = await (0, verify_js_1.flattenedVerify)({\n        payload,\n        protected: protectedHeader,\n        signature\n    }, key, options);\n    const result = {\n        payload: verified.payload,\n        protectedHeader: verified.protectedHeader\n    };\n    if (typeof key === \"function\") {\n        return {\n            ...result,\n            key: verified.key\n        };\n    }\n    return result;\n}\nexports.compactVerify = compactVerify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3cy9jb21wYWN0L3ZlcmlmeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQywwSEFBd0I7QUFDcEQsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsK0dBQXNCO0FBQ2xELE1BQU1FLG9CQUFvQkYsbUJBQU9BLENBQUMseUhBQTJCO0FBQzdELGVBQWVGLGNBQWNLLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxPQUFPO0lBQzFDLElBQUlGLGVBQWVHLFlBQVk7UUFDM0JILE1BQU1ELGtCQUFrQkssT0FBTyxDQUFDQyxNQUFNLENBQUNMO0lBQzNDO0lBQ0EsSUFBSSxPQUFPQSxRQUFRLFVBQVU7UUFDekIsTUFBTSxJQUFJRixZQUFZUSxVQUFVLENBQUM7SUFDckM7SUFDQSxNQUFNLEVBQUUsR0FBR0MsZUFBZSxFQUFFLEdBQUdDLE9BQU8sRUFBRSxHQUFHQyxTQUFTLEVBQUVDLE1BQU0sRUFBRSxHQUFHVixJQUFJVyxLQUFLLENBQUM7SUFDM0UsSUFBSUQsV0FBVyxHQUFHO1FBQ2QsTUFBTSxJQUFJWixZQUFZUSxVQUFVLENBQUM7SUFDckM7SUFDQSxNQUFNTSxXQUFXLE1BQU0sQ0FBQyxHQUFHaEIsWUFBWWlCLGVBQWUsRUFBRTtRQUFFTDtRQUFTTSxXQUFXUDtRQUFpQkU7SUFBVSxHQUFHUixLQUFLQztJQUNqSCxNQUFNYSxTQUFTO1FBQUVQLFNBQVNJLFNBQVNKLE9BQU87UUFBRUQsaUJBQWlCSyxTQUFTTCxlQUFlO0lBQUM7SUFDdEYsSUFBSSxPQUFPTixRQUFRLFlBQVk7UUFDM0IsT0FBTztZQUFFLEdBQUdjLE1BQU07WUFBRWQsS0FBS1csU0FBU1gsR0FBRztRQUFDO0lBQzFDO0lBQ0EsT0FBT2M7QUFDWDtBQUNBdEIscUJBQXFCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandzL2NvbXBhY3QvdmVyaWZ5LmpzP2ZmNTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXBhY3RWZXJpZnkgPSB2b2lkIDA7XG5jb25zdCB2ZXJpZnlfanNfMSA9IHJlcXVpcmUoXCIuLi9mbGF0dGVuZWQvdmVyaWZ5LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gY29tcGFjdFZlcmlmeShqd3MsIGtleSwgb3B0aW9ucykge1xuICAgIGlmIChqd3MgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGp3cyA9IGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKGp3cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgandzICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnQ29tcGFjdCBKV1MgbXVzdCBiZSBhIHN0cmluZyBvciBVaW50OEFycmF5Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgMDogcHJvdGVjdGVkSGVhZGVyLCAxOiBwYXlsb2FkLCAyOiBzaWduYXR1cmUsIGxlbmd0aCB9ID0gandzLnNwbGl0KCcuJyk7XG4gICAgaWYgKGxlbmd0aCAhPT0gMykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSW52YWxpZCBDb21wYWN0IEpXUycpO1xuICAgIH1cbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0ICgwLCB2ZXJpZnlfanNfMS5mbGF0dGVuZWRWZXJpZnkpKHsgcGF5bG9hZCwgcHJvdGVjdGVkOiBwcm90ZWN0ZWRIZWFkZXIsIHNpZ25hdHVyZSB9LCBrZXksIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGF5bG9hZDogdmVyaWZpZWQucGF5bG9hZCwgcHJvdGVjdGVkSGVhZGVyOiB2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIgfTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleTogdmVyaWZpZWQua2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmNvbXBhY3RWZXJpZnkgPSBjb21wYWN0VmVyaWZ5O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29tcGFjdFZlcmlmeSIsInZlcmlmeV9qc18xIiwicmVxdWlyZSIsImVycm9yc19qc18xIiwiYnVmZmVyX3V0aWxzX2pzXzEiLCJqd3MiLCJrZXkiLCJvcHRpb25zIiwiVWludDhBcnJheSIsImRlY29kZXIiLCJkZWNvZGUiLCJKV1NJbnZhbGlkIiwicHJvdGVjdGVkSGVhZGVyIiwicGF5bG9hZCIsInNpZ25hdHVyZSIsImxlbmd0aCIsInNwbGl0IiwidmVyaWZpZWQiLCJmbGF0dGVuZWRWZXJpZnkiLCJwcm90ZWN0ZWQiLCJyZXN1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FlattenedSign = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst sign_js_1 = __webpack_require__(/*! ../../runtime/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst check_key_type_js_1 = __webpack_require__(/*! ../../lib/check_key_type.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nclass FlattenedSign {\n    constructor(payload){\n        if (!(payload instanceof Uint8Array)) {\n            throw new TypeError(\"payload must be an instance of Uint8Array\");\n        }\n        this._payload = payload;\n    }\n    setProtectedHeader(protectedHeader) {\n        if (this._protectedHeader) {\n            throw new TypeError(\"setProtectedHeader can only be called once\");\n        }\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    setUnprotectedHeader(unprotectedHeader) {\n        if (this._unprotectedHeader) {\n            throw new TypeError(\"setUnprotectedHeader can only be called once\");\n        }\n        this._unprotectedHeader = unprotectedHeader;\n        return this;\n    }\n    async sign(key, options) {\n        if (!this._protectedHeader && !this._unprotectedHeader) {\n            throw new errors_js_1.JWSInvalid(\"either setProtectedHeader or setUnprotectedHeader must be called before #sign()\");\n        }\n        if (!(0, is_disjoint_js_1.default)(this._protectedHeader, this._unprotectedHeader)) {\n            throw new errors_js_1.JWSInvalid(\"JWS Protected and JWS Unprotected Header Parameter names must be disjoint\");\n        }\n        const joseHeader = {\n            ...this._protectedHeader,\n            ...this._unprotectedHeader\n        };\n        const extensions = (0, validate_crit_js_1.default)(errors_js_1.JWSInvalid, new Map([\n            [\n                \"b64\",\n                true\n            ]\n        ]), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);\n        let b64 = true;\n        if (extensions.has(\"b64\")) {\n            b64 = this._protectedHeader.b64;\n            if (typeof b64 !== \"boolean\") {\n                throw new errors_js_1.JWSInvalid('The \"b64\" (base64url-encode payload) Header Parameter must be a boolean');\n            }\n        }\n        const { alg } = joseHeader;\n        if (typeof alg !== \"string\" || !alg) {\n            throw new errors_js_1.JWSInvalid('JWS \"alg\" (Algorithm) Header Parameter missing or invalid');\n        }\n        (0, check_key_type_js_1.default)(alg, key, \"sign\");\n        let payload = this._payload;\n        if (b64) {\n            payload = buffer_utils_js_1.encoder.encode((0, base64url_js_1.encode)(payload));\n        }\n        let protectedHeader;\n        if (this._protectedHeader) {\n            protectedHeader = buffer_utils_js_1.encoder.encode((0, base64url_js_1.encode)(JSON.stringify(this._protectedHeader)));\n        } else {\n            protectedHeader = buffer_utils_js_1.encoder.encode(\"\");\n        }\n        const data = (0, buffer_utils_js_1.concat)(protectedHeader, buffer_utils_js_1.encoder.encode(\".\"), payload);\n        const signature = await (0, sign_js_1.default)(alg, key, data);\n        const jws = {\n            signature: (0, base64url_js_1.encode)(signature),\n            payload: \"\"\n        };\n        if (b64) {\n            jws.payload = buffer_utils_js_1.decoder.decode(payload);\n        }\n        if (this._unprotectedHeader) {\n            jws.header = this._unprotectedHeader;\n        }\n        if (this._protectedHeader) {\n            jws.protected = buffer_utils_js_1.decoder.decode(protectedHeader);\n        }\n        return jws;\n    }\n}\nexports.FlattenedSign = FlattenedSign;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.flattenedVerify = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst verify_js_1 = __webpack_require__(/*! ../../runtime/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/verify.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst check_key_type_js_1 = __webpack_require__(/*! ../../lib/check_key_type.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nconst validate_algorithms_js_1 = __webpack_require__(/*! ../../lib/validate_algorithms.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js\");\nasync function flattenedVerify(jws, key, options) {\n    var _a;\n    if (!(0, is_object_js_1.default)(jws)) {\n        throw new errors_js_1.JWSInvalid(\"Flattened JWS must be an object\");\n    }\n    if (jws.protected === undefined && jws.header === undefined) {\n        throw new errors_js_1.JWSInvalid('Flattened JWS must have either of the \"protected\" or \"header\" members');\n    }\n    if (jws.protected !== undefined && typeof jws.protected !== \"string\") {\n        throw new errors_js_1.JWSInvalid(\"JWS Protected Header incorrect type\");\n    }\n    if (jws.payload === undefined) {\n        throw new errors_js_1.JWSInvalid(\"JWS Payload missing\");\n    }\n    if (typeof jws.signature !== \"string\") {\n        throw new errors_js_1.JWSInvalid(\"JWS Signature missing or incorrect type\");\n    }\n    if (jws.header !== undefined && !(0, is_object_js_1.default)(jws.header)) {\n        throw new errors_js_1.JWSInvalid(\"JWS Unprotected Header incorrect type\");\n    }\n    let parsedProt = {};\n    if (jws.protected) {\n        try {\n            const protectedHeader = (0, base64url_js_1.decode)(jws.protected);\n            parsedProt = JSON.parse(buffer_utils_js_1.decoder.decode(protectedHeader));\n        } catch  {\n            throw new errors_js_1.JWSInvalid(\"JWS Protected Header is invalid\");\n        }\n    }\n    if (!(0, is_disjoint_js_1.default)(parsedProt, jws.header)) {\n        throw new errors_js_1.JWSInvalid(\"JWS Protected and JWS Unprotected Header Parameter names must be disjoint\");\n    }\n    const joseHeader = {\n        ...parsedProt,\n        ...jws.header\n    };\n    const extensions = (0, validate_crit_js_1.default)(errors_js_1.JWSInvalid, new Map([\n        [\n            \"b64\",\n            true\n        ]\n    ]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);\n    let b64 = true;\n    if (extensions.has(\"b64\")) {\n        b64 = parsedProt.b64;\n        if (typeof b64 !== \"boolean\") {\n            throw new errors_js_1.JWSInvalid('The \"b64\" (base64url-encode payload) Header Parameter must be a boolean');\n        }\n    }\n    const { alg } = joseHeader;\n    if (typeof alg !== \"string\" || !alg) {\n        throw new errors_js_1.JWSInvalid('JWS \"alg\" (Algorithm) Header Parameter missing or invalid');\n    }\n    const algorithms = options && (0, validate_algorithms_js_1.default)(\"algorithms\", options.algorithms);\n    if (algorithms && !algorithms.has(alg)) {\n        throw new errors_js_1.JOSEAlgNotAllowed('\"alg\" (Algorithm) Header Parameter not allowed');\n    }\n    if (b64) {\n        if (typeof jws.payload !== \"string\") {\n            throw new errors_js_1.JWSInvalid(\"JWS Payload must be a string\");\n        }\n    } else if (typeof jws.payload !== \"string\" && !(jws.payload instanceof Uint8Array)) {\n        throw new errors_js_1.JWSInvalid(\"JWS Payload must be a string or an Uint8Array instance\");\n    }\n    let resolvedKey = false;\n    if (typeof key === \"function\") {\n        key = await key(parsedProt, jws);\n        resolvedKey = true;\n    }\n    (0, check_key_type_js_1.default)(alg, key, \"verify\");\n    const data = (0, buffer_utils_js_1.concat)(buffer_utils_js_1.encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : \"\"), buffer_utils_js_1.encoder.encode(\".\"), typeof jws.payload === \"string\" ? buffer_utils_js_1.encoder.encode(jws.payload) : jws.payload);\n    let signature;\n    try {\n        signature = (0, base64url_js_1.decode)(jws.signature);\n    } catch  {\n        throw new errors_js_1.JWSInvalid(\"Failed to base64url decode the signature\");\n    }\n    const verified = await (0, verify_js_1.default)(alg, key, signature, data);\n    if (!verified) {\n        throw new errors_js_1.JWSSignatureVerificationFailed();\n    }\n    let payload;\n    if (b64) {\n        try {\n            payload = (0, base64url_js_1.decode)(jws.payload);\n        } catch  {\n            throw new errors_js_1.JWSInvalid(\"Failed to base64url decode the payload\");\n        }\n    } else if (typeof jws.payload === \"string\") {\n        payload = buffer_utils_js_1.encoder.encode(jws.payload);\n    } else {\n        payload = jws.payload;\n    }\n    const result = {\n        payload\n    };\n    if (jws.protected !== undefined) {\n        result.protectedHeader = parsedProt;\n    }\n    if (jws.header !== undefined) {\n        result.unprotectedHeader = jws.header;\n    }\n    if (resolvedKey) {\n        return {\n            ...result,\n            key\n        };\n    }\n    return result;\n}\nexports.flattenedVerify = flattenedVerify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/sign.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/sign.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GeneralSign = void 0;\nconst sign_js_1 = __webpack_require__(/*! ../flattened/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nclass IndividualSignature {\n    constructor(sig, key, options){\n        this.parent = sig;\n        this.key = key;\n        this.options = options;\n    }\n    setProtectedHeader(protectedHeader) {\n        if (this.protectedHeader) {\n            throw new TypeError(\"setProtectedHeader can only be called once\");\n        }\n        this.protectedHeader = protectedHeader;\n        return this;\n    }\n    setUnprotectedHeader(unprotectedHeader) {\n        if (this.unprotectedHeader) {\n            throw new TypeError(\"setUnprotectedHeader can only be called once\");\n        }\n        this.unprotectedHeader = unprotectedHeader;\n        return this;\n    }\n    addSignature(...args) {\n        return this.parent.addSignature(...args);\n    }\n    sign(...args) {\n        return this.parent.sign(...args);\n    }\n    done() {\n        return this.parent;\n    }\n}\nclass GeneralSign {\n    constructor(payload){\n        this._signatures = [];\n        this._payload = payload;\n    }\n    addSignature(key, options) {\n        const signature = new IndividualSignature(this, key, options);\n        this._signatures.push(signature);\n        return signature;\n    }\n    async sign() {\n        if (!this._signatures.length) {\n            throw new errors_js_1.JWSInvalid(\"at least one signature must be added\");\n        }\n        const jws = {\n            signatures: [],\n            payload: \"\"\n        };\n        for(let i = 0; i < this._signatures.length; i++){\n            const signature = this._signatures[i];\n            const flattened = new sign_js_1.FlattenedSign(this._payload);\n            flattened.setProtectedHeader(signature.protectedHeader);\n            flattened.setUnprotectedHeader(signature.unprotectedHeader);\n            const { payload, ...rest } = await flattened.sign(signature.key, signature.options);\n            if (i === 0) {\n                jws.payload = payload;\n            } else if (jws.payload !== payload) {\n                throw new errors_js_1.JWSInvalid(\"inconsistent use of JWS Unencoded Payload (RFC7797)\");\n            }\n            jws.signatures.push(rest);\n        }\n        return jws;\n    }\n}\nexports.GeneralSign = GeneralSign;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3cy9nZW5lcmFsL3NpZ24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUs7QUFDM0IsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMsc0hBQXNCO0FBQ2hELE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLCtHQUFzQjtBQUNsRCxNQUFNRTtJQUNGQyxZQUFZQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxDQUFFO1FBQzNCLElBQUksQ0FBQ0MsTUFBTSxHQUFHSDtRQUNkLElBQUksQ0FBQ0MsR0FBRyxHQUFHQTtRQUNYLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtJQUNuQjtJQUNBRSxtQkFBbUJDLGVBQWUsRUFBRTtRQUNoQyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxFQUFFO1lBQ3RCLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBLElBQUksQ0FBQ0QsZUFBZSxHQUFHQTtRQUN2QixPQUFPLElBQUk7SUFDZjtJQUNBRSxxQkFBcUJDLGlCQUFpQixFQUFFO1FBQ3BDLElBQUksSUFBSSxDQUFDQSxpQkFBaUIsRUFBRTtZQUN4QixNQUFNLElBQUlGLFVBQVU7UUFDeEI7UUFDQSxJQUFJLENBQUNFLGlCQUFpQixHQUFHQTtRQUN6QixPQUFPLElBQUk7SUFDZjtJQUNBQyxhQUFhLEdBQUdDLElBQUksRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ1AsTUFBTSxDQUFDTSxZQUFZLElBQUlDO0lBQ3ZDO0lBQ0FDLEtBQUssR0FBR0QsSUFBSSxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUNQLE1BQU0sQ0FBQ1EsSUFBSSxJQUFJRDtJQUMvQjtJQUNBRSxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUNULE1BQU07SUFDdEI7QUFDSjtBQUNBLE1BQU1UO0lBQ0ZLLFlBQVljLE9BQU8sQ0FBRTtRQUNqQixJQUFJLENBQUNDLFdBQVcsR0FBRyxFQUFFO1FBQ3JCLElBQUksQ0FBQ0MsUUFBUSxHQUFHRjtJQUNwQjtJQUNBSixhQUFhUixHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUN2QixNQUFNYyxZQUFZLElBQUlsQixvQkFBb0IsSUFBSSxFQUFFRyxLQUFLQztRQUNyRCxJQUFJLENBQUNZLFdBQVcsQ0FBQ0csSUFBSSxDQUFDRDtRQUN0QixPQUFPQTtJQUNYO0lBQ0EsTUFBTUwsT0FBTztRQUNULElBQUksQ0FBQyxJQUFJLENBQUNHLFdBQVcsQ0FBQ0ksTUFBTSxFQUFFO1lBQzFCLE1BQU0sSUFBSXJCLFlBQVlzQixVQUFVLENBQUM7UUFDckM7UUFDQSxNQUFNQyxNQUFNO1lBQ1JDLFlBQVksRUFBRTtZQUNkUixTQUFTO1FBQ2I7UUFDQSxJQUFLLElBQUlTLElBQUksR0FBR0EsSUFBSSxJQUFJLENBQUNSLFdBQVcsQ0FBQ0ksTUFBTSxFQUFFSSxJQUFLO1lBQzlDLE1BQU1OLFlBQVksSUFBSSxDQUFDRixXQUFXLENBQUNRLEVBQUU7WUFDckMsTUFBTUMsWUFBWSxJQUFJNUIsVUFBVTZCLGFBQWEsQ0FBQyxJQUFJLENBQUNULFFBQVE7WUFDM0RRLFVBQVVuQixrQkFBa0IsQ0FBQ1ksVUFBVVgsZUFBZTtZQUN0RGtCLFVBQVVoQixvQkFBb0IsQ0FBQ1MsVUFBVVIsaUJBQWlCO1lBQzFELE1BQU0sRUFBRUssT0FBTyxFQUFFLEdBQUdZLE1BQU0sR0FBRyxNQUFNRixVQUFVWixJQUFJLENBQUNLLFVBQVVmLEdBQUcsRUFBRWUsVUFBVWQsT0FBTztZQUNsRixJQUFJb0IsTUFBTSxHQUFHO2dCQUNURixJQUFJUCxPQUFPLEdBQUdBO1lBQ2xCLE9BQ0ssSUFBSU8sSUFBSVAsT0FBTyxLQUFLQSxTQUFTO2dCQUM5QixNQUFNLElBQUloQixZQUFZc0IsVUFBVSxDQUFDO1lBQ3JDO1lBQ0FDLElBQUlDLFVBQVUsQ0FBQ0osSUFBSSxDQUFDUTtRQUN4QjtRQUNBLE9BQU9MO0lBQ1g7QUFDSjtBQUNBNUIsbUJBQW1CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandzL2dlbmVyYWwvc2lnbi5qcz81NzA4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZW5lcmFsU2lnbiA9IHZvaWQgMDtcbmNvbnN0IHNpZ25fanNfMSA9IHJlcXVpcmUoXCIuLi9mbGF0dGVuZWQvc2lnbi5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY2xhc3MgSW5kaXZpZHVhbFNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3Ioc2lnLCBrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBzaWc7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBzZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0UHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm90ZWN0ZWRIZWFkZXIgPSBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRVbnByb3RlY3RlZEhlYWRlcih1bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy51bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0VW5wcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVucHJvdGVjdGVkSGVhZGVyID0gdW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRTaWduYXR1cmUoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuYWRkU2lnbmF0dXJlKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBzaWduKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LnNpZ24oLi4uYXJncyk7XG4gICAgfVxuICAgIGRvbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICB9XG59XG5jbGFzcyBHZW5lcmFsU2lnbiB7XG4gICAgY29uc3RydWN0b3IocGF5bG9hZCkge1xuICAgICAgICB0aGlzLl9zaWduYXR1cmVzID0gW107XG4gICAgICAgIHRoaXMuX3BheWxvYWQgPSBwYXlsb2FkO1xuICAgIH1cbiAgICBhZGRTaWduYXR1cmUoa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IG5ldyBJbmRpdmlkdWFsU2lnbmF0dXJlKHRoaXMsIGtleSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3NpZ25hdHVyZXMucHVzaChzaWduYXR1cmUpO1xuICAgICAgICByZXR1cm4gc2lnbmF0dXJlO1xuICAgIH1cbiAgICBhc3luYyBzaWduKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3NpZ25hdHVyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnYXQgbGVhc3Qgb25lIHNpZ25hdHVyZSBtdXN0IGJlIGFkZGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgandzID0ge1xuICAgICAgICAgICAgc2lnbmF0dXJlczogW10sXG4gICAgICAgICAgICBwYXlsb2FkOiAnJyxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9zaWduYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSB0aGlzLl9zaWduYXR1cmVzW2ldO1xuICAgICAgICAgICAgY29uc3QgZmxhdHRlbmVkID0gbmV3IHNpZ25fanNfMS5GbGF0dGVuZWRTaWduKHRoaXMuX3BheWxvYWQpO1xuICAgICAgICAgICAgZmxhdHRlbmVkLnNldFByb3RlY3RlZEhlYWRlcihzaWduYXR1cmUucHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgICAgIGZsYXR0ZW5lZC5zZXRVbnByb3RlY3RlZEhlYWRlcihzaWduYXR1cmUudW5wcm90ZWN0ZWRIZWFkZXIpO1xuICAgICAgICAgICAgY29uc3QgeyBwYXlsb2FkLCAuLi5yZXN0IH0gPSBhd2FpdCBmbGF0dGVuZWQuc2lnbihzaWduYXR1cmUua2V5LCBzaWduYXR1cmUub3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGp3cy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGp3cy5wYXlsb2FkICE9PSBwYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ2luY29uc2lzdGVudCB1c2Ugb2YgSldTIFVuZW5jb2RlZCBQYXlsb2FkIChSRkM3Nzk3KScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgandzLnNpZ25hdHVyZXMucHVzaChyZXN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gandzO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VuZXJhbFNpZ24gPSBHZW5lcmFsU2lnbjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdlbmVyYWxTaWduIiwic2lnbl9qc18xIiwicmVxdWlyZSIsImVycm9yc19qc18xIiwiSW5kaXZpZHVhbFNpZ25hdHVyZSIsImNvbnN0cnVjdG9yIiwic2lnIiwia2V5Iiwib3B0aW9ucyIsInBhcmVudCIsInNldFByb3RlY3RlZEhlYWRlciIsInByb3RlY3RlZEhlYWRlciIsIlR5cGVFcnJvciIsInNldFVucHJvdGVjdGVkSGVhZGVyIiwidW5wcm90ZWN0ZWRIZWFkZXIiLCJhZGRTaWduYXR1cmUiLCJhcmdzIiwic2lnbiIsImRvbmUiLCJwYXlsb2FkIiwiX3NpZ25hdHVyZXMiLCJfcGF5bG9hZCIsInNpZ25hdHVyZSIsInB1c2giLCJsZW5ndGgiLCJKV1NJbnZhbGlkIiwiandzIiwic2lnbmF0dXJlcyIsImkiLCJmbGF0dGVuZWQiLCJGbGF0dGVuZWRTaWduIiwicmVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/verify.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/verify.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generalVerify = void 0;\nconst verify_js_1 = __webpack_require__(/*! ../flattened/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nasync function generalVerify(jws, key, options) {\n    if (!(0, is_object_js_1.default)(jws)) {\n        throw new errors_js_1.JWSInvalid(\"General JWS must be an object\");\n    }\n    if (!Array.isArray(jws.signatures) || !jws.signatures.every(is_object_js_1.default)) {\n        throw new errors_js_1.JWSInvalid(\"JWS Signatures missing or incorrect type\");\n    }\n    for (const signature of jws.signatures){\n        try {\n            return await (0, verify_js_1.flattenedVerify)({\n                header: signature.header,\n                payload: jws.payload,\n                protected: signature.protected,\n                signature: signature.signature\n            }, key, options);\n        } catch  {}\n    }\n    throw new errors_js_1.JWSSignatureVerificationFailed();\n}\nexports.generalVerify = generalVerify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3cy9nZW5lcmFsL3ZlcmlmeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQywwSEFBd0I7QUFDcEQsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsK0dBQXNCO0FBQ2xELE1BQU1FLGlCQUFpQkYsbUJBQU9BLENBQUMsbUhBQXdCO0FBQ3ZELGVBQWVGLGNBQWNLLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxPQUFPO0lBQzFDLElBQUksQ0FBQyxDQUFDLEdBQUdILGVBQWVJLE9BQU8sRUFBRUgsTUFBTTtRQUNuQyxNQUFNLElBQUlGLFlBQVlNLFVBQVUsQ0FBQztJQUNyQztJQUNBLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDTixJQUFJTyxVQUFVLEtBQUssQ0FBQ1AsSUFBSU8sVUFBVSxDQUFDQyxLQUFLLENBQUNULGVBQWVJLE9BQU8sR0FBRztRQUNqRixNQUFNLElBQUlMLFlBQVlNLFVBQVUsQ0FBQztJQUNyQztJQUNBLEtBQUssTUFBTUssYUFBYVQsSUFBSU8sVUFBVSxDQUFFO1FBQ3BDLElBQUk7WUFDQSxPQUFPLE1BQU0sQ0FBQyxHQUFHWCxZQUFZYyxlQUFlLEVBQUU7Z0JBQzFDQyxRQUFRRixVQUFVRSxNQUFNO2dCQUN4QkMsU0FBU1osSUFBSVksT0FBTztnQkFDcEJDLFdBQVdKLFVBQVVJLFNBQVM7Z0JBQzlCSixXQUFXQSxVQUFVQSxTQUFTO1lBQ2xDLEdBQUdSLEtBQUtDO1FBQ1osRUFDQSxPQUFNLENBQ047SUFDSjtJQUNBLE1BQU0sSUFBSUosWUFBWWdCLDhCQUE4QjtBQUN4RDtBQUNBckIscUJBQXFCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandzL2dlbmVyYWwvdmVyaWZ5LmpzPzEwM2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYWxWZXJpZnkgPSB2b2lkIDA7XG5jb25zdCB2ZXJpZnlfanNfMSA9IHJlcXVpcmUoXCIuLi9mbGF0dGVuZWQvdmVyaWZ5LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhbFZlcmlmeShqd3MsIGtleSwgb3B0aW9ucykge1xuICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKGp3cykpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ0dlbmVyYWwgSldTIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShqd3Muc2lnbmF0dXJlcykgfHwgIWp3cy5zaWduYXR1cmVzLmV2ZXJ5KGlzX29iamVjdF9qc18xLmRlZmF1bHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NJbnZhbGlkKCdKV1MgU2lnbmF0dXJlcyBtaXNzaW5nIG9yIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2lnbmF0dXJlIG9mIGp3cy5zaWduYXR1cmVzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgKDAsIHZlcmlmeV9qc18xLmZsYXR0ZW5lZFZlcmlmeSkoe1xuICAgICAgICAgICAgICAgIGhlYWRlcjogc2lnbmF0dXJlLmhlYWRlcixcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBqd3MucGF5bG9hZCxcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQ6IHNpZ25hdHVyZS5wcm90ZWN0ZWQsXG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmUuc2lnbmF0dXJlLFxuICAgICAgICAgICAgfSwga2V5LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU1NpZ25hdHVyZVZlcmlmaWNhdGlvbkZhaWxlZCgpO1xufVxuZXhwb3J0cy5nZW5lcmFsVmVyaWZ5ID0gZ2VuZXJhbFZlcmlmeTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdlbmVyYWxWZXJpZnkiLCJ2ZXJpZnlfanNfMSIsInJlcXVpcmUiLCJlcnJvcnNfanNfMSIsImlzX29iamVjdF9qc18xIiwiandzIiwia2V5Iiwib3B0aW9ucyIsImRlZmF1bHQiLCJKV1NJbnZhbGlkIiwiQXJyYXkiLCJpc0FycmF5Iiwic2lnbmF0dXJlcyIsImV2ZXJ5Iiwic2lnbmF0dXJlIiwiZmxhdHRlbmVkVmVyaWZ5IiwiaGVhZGVyIiwicGF5bG9hZCIsInByb3RlY3RlZCIsIkpXU1NpZ25hdHVyZVZlcmlmaWNhdGlvbkZhaWxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/decrypt.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/decrypt.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.jwtDecrypt = void 0;\nconst decrypt_js_1 = __webpack_require__(/*! ../jwe/compact/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js\");\nconst jwt_claims_set_js_1 = __webpack_require__(/*! ../lib/jwt_claims_set.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nasync function jwtDecrypt(jwt, key, options) {\n    const decrypted = await (0, decrypt_js_1.compactDecrypt)(jwt, key, options);\n    const payload = (0, jwt_claims_set_js_1.default)(decrypted.protectedHeader, decrypted.plaintext, options);\n    const { protectedHeader } = decrypted;\n    if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {\n        throw new errors_js_1.JWTClaimValidationFailed('replicated \"iss\" claim header parameter mismatch', \"iss\", \"mismatch\");\n    }\n    if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {\n        throw new errors_js_1.JWTClaimValidationFailed('replicated \"sub\" claim header parameter mismatch', \"sub\", \"mismatch\");\n    }\n    if (protectedHeader.aud !== undefined && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {\n        throw new errors_js_1.JWTClaimValidationFailed('replicated \"aud\" claim header parameter mismatch', \"aud\", \"mismatch\");\n    }\n    const result = {\n        payload,\n        protectedHeader\n    };\n    if (typeof key === \"function\") {\n        return {\n            ...result,\n            key: decrypted.key\n        };\n    }\n    return result;\n}\nexports.jwtDecrypt = jwtDecrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC9kZWNyeXB0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLGVBQWVDLG1CQUFPQSxDQUFDLDRIQUEyQjtBQUN4RCxNQUFNQyxzQkFBc0JELG1CQUFPQSxDQUFDLDBIQUEwQjtBQUM5RCxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw0R0FBbUI7QUFDL0MsZUFBZUYsV0FBV0ssR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE9BQU87SUFDdkMsTUFBTUMsWUFBWSxNQUFNLENBQUMsR0FBR1AsYUFBYVEsY0FBYyxFQUFFSixLQUFLQyxLQUFLQztJQUNuRSxNQUFNRyxVQUFVLENBQUMsR0FBR1Asb0JBQW9CUSxPQUFPLEVBQUVILFVBQVVJLGVBQWUsRUFBRUosVUFBVUssU0FBUyxFQUFFTjtJQUNqRyxNQUFNLEVBQUVLLGVBQWUsRUFBRSxHQUFHSjtJQUM1QixJQUFJSSxnQkFBZ0JFLEdBQUcsS0FBS0MsYUFBYUgsZ0JBQWdCRSxHQUFHLEtBQUtKLFFBQVFJLEdBQUcsRUFBRTtRQUMxRSxNQUFNLElBQUlWLFlBQVlZLHdCQUF3QixDQUFDLG9EQUFvRCxPQUFPO0lBQzlHO0lBQ0EsSUFBSUosZ0JBQWdCSyxHQUFHLEtBQUtGLGFBQWFILGdCQUFnQkssR0FBRyxLQUFLUCxRQUFRTyxHQUFHLEVBQUU7UUFDMUUsTUFBTSxJQUFJYixZQUFZWSx3QkFBd0IsQ0FBQyxvREFBb0QsT0FBTztJQUM5RztJQUNBLElBQUlKLGdCQUFnQk0sR0FBRyxLQUFLSCxhQUN4QkksS0FBS0MsU0FBUyxDQUFDUixnQkFBZ0JNLEdBQUcsTUFBTUMsS0FBS0MsU0FBUyxDQUFDVixRQUFRUSxHQUFHLEdBQUc7UUFDckUsTUFBTSxJQUFJZCxZQUFZWSx3QkFBd0IsQ0FBQyxvREFBb0QsT0FBTztJQUM5RztJQUNBLE1BQU1LLFNBQVM7UUFBRVg7UUFBU0U7SUFBZ0I7SUFDMUMsSUFBSSxPQUFPTixRQUFRLFlBQVk7UUFDM0IsT0FBTztZQUFFLEdBQUdlLE1BQU07WUFBRWYsS0FBS0UsVUFBVUYsR0FBRztRQUFDO0lBQzNDO0lBQ0EsT0FBT2U7QUFDWDtBQUNBdkIsa0JBQWtCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvand0L2RlY3J5cHQuanM/NmUwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuand0RGVjcnlwdCA9IHZvaWQgMDtcbmNvbnN0IGRlY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi9qd2UvY29tcGFjdC9kZWNyeXB0LmpzXCIpO1xuY29uc3Qgand0X2NsYWltc19zZXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvand0X2NsYWltc19zZXQuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGp3dERlY3J5cHQoand0LCBrZXksIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWNyeXB0ZWQgPSBhd2FpdCAoMCwgZGVjcnlwdF9qc18xLmNvbXBhY3REZWNyeXB0KShqd3QsIGtleSwgb3B0aW9ucyk7XG4gICAgY29uc3QgcGF5bG9hZCA9ICgwLCBqd3RfY2xhaW1zX3NldF9qc18xLmRlZmF1bHQpKGRlY3J5cHRlZC5wcm90ZWN0ZWRIZWFkZXIsIGRlY3J5cHRlZC5wbGFpbnRleHQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHsgcHJvdGVjdGVkSGVhZGVyIH0gPSBkZWNyeXB0ZWQ7XG4gICAgaWYgKHByb3RlY3RlZEhlYWRlci5pc3MgIT09IHVuZGVmaW5lZCAmJiBwcm90ZWN0ZWRIZWFkZXIuaXNzICE9PSBwYXlsb2FkLmlzcykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdyZXBsaWNhdGVkIFwiaXNzXCIgY2xhaW0gaGVhZGVyIHBhcmFtZXRlciBtaXNtYXRjaCcsICdpc3MnLCAnbWlzbWF0Y2gnKTtcbiAgICB9XG4gICAgaWYgKHByb3RlY3RlZEhlYWRlci5zdWIgIT09IHVuZGVmaW5lZCAmJiBwcm90ZWN0ZWRIZWFkZXIuc3ViICE9PSBwYXlsb2FkLnN1Yikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdyZXBsaWNhdGVkIFwic3ViXCIgY2xhaW0gaGVhZGVyIHBhcmFtZXRlciBtaXNtYXRjaCcsICdzdWInLCAnbWlzbWF0Y2gnKTtcbiAgICB9XG4gICAgaWYgKHByb3RlY3RlZEhlYWRlci5hdWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBKU09OLnN0cmluZ2lmeShwcm90ZWN0ZWRIZWFkZXIuYXVkKSAhPT0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZC5hdWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3JlcGxpY2F0ZWQgXCJhdWRcIiBjbGFpbSBoZWFkZXIgcGFyYW1ldGVyIG1pc21hdGNoJywgJ2F1ZCcsICdtaXNtYXRjaCcpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7IHBheWxvYWQsIHByb3RlY3RlZEhlYWRlciB9O1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnJlc3VsdCwga2V5OiBkZWNyeXB0ZWQua2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmp3dERlY3J5cHQgPSBqd3REZWNyeXB0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiand0RGVjcnlwdCIsImRlY3J5cHRfanNfMSIsInJlcXVpcmUiLCJqd3RfY2xhaW1zX3NldF9qc18xIiwiZXJyb3JzX2pzXzEiLCJqd3QiLCJrZXkiLCJvcHRpb25zIiwiZGVjcnlwdGVkIiwiY29tcGFjdERlY3J5cHQiLCJwYXlsb2FkIiwiZGVmYXVsdCIsInByb3RlY3RlZEhlYWRlciIsInBsYWludGV4dCIsImlzcyIsInVuZGVmaW5lZCIsIkpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCIsInN1YiIsImF1ZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXN1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/encrypt.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/encrypt.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.EncryptJWT = void 0;\nconst encrypt_js_1 = __webpack_require__(/*! ../jwe/compact/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst produce_js_1 = __webpack_require__(/*! ./produce.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js\");\nclass EncryptJWT extends produce_js_1.ProduceJWT {\n    setProtectedHeader(protectedHeader) {\n        if (this._protectedHeader) {\n            throw new TypeError(\"setProtectedHeader can only be called once\");\n        }\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    setKeyManagementParameters(parameters) {\n        if (this._keyManagementParameters) {\n            throw new TypeError(\"setKeyManagementParameters can only be called once\");\n        }\n        this._keyManagementParameters = parameters;\n        return this;\n    }\n    setContentEncryptionKey(cek) {\n        if (this._cek) {\n            throw new TypeError(\"setContentEncryptionKey can only be called once\");\n        }\n        this._cek = cek;\n        return this;\n    }\n    setInitializationVector(iv) {\n        if (this._iv) {\n            throw new TypeError(\"setInitializationVector can only be called once\");\n        }\n        this._iv = iv;\n        return this;\n    }\n    replicateIssuerAsHeader() {\n        this._replicateIssuerAsHeader = true;\n        return this;\n    }\n    replicateSubjectAsHeader() {\n        this._replicateSubjectAsHeader = true;\n        return this;\n    }\n    replicateAudienceAsHeader() {\n        this._replicateAudienceAsHeader = true;\n        return this;\n    }\n    async encrypt(key, options) {\n        const enc = new encrypt_js_1.CompactEncrypt(buffer_utils_js_1.encoder.encode(JSON.stringify(this._payload)));\n        if (this._replicateIssuerAsHeader) {\n            this._protectedHeader = {\n                ...this._protectedHeader,\n                iss: this._payload.iss\n            };\n        }\n        if (this._replicateSubjectAsHeader) {\n            this._protectedHeader = {\n                ...this._protectedHeader,\n                sub: this._payload.sub\n            };\n        }\n        if (this._replicateAudienceAsHeader) {\n            this._protectedHeader = {\n                ...this._protectedHeader,\n                aud: this._payload.aud\n            };\n        }\n        enc.setProtectedHeader(this._protectedHeader);\n        if (this._iv) {\n            enc.setInitializationVector(this._iv);\n        }\n        if (this._cek) {\n            enc.setContentEncryptionKey(this._cek);\n        }\n        if (this._keyManagementParameters) {\n            enc.setKeyManagementParameters(this._keyManagementParameters);\n        }\n        return enc.encrypt(key, options);\n    }\n}\nexports.EncryptJWT = EncryptJWT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC9lbmNyeXB0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLGVBQWVDLG1CQUFPQSxDQUFDLDRIQUEyQjtBQUN4RCxNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDLHNIQUF3QjtBQUMxRCxNQUFNRSxlQUFlRixtQkFBT0EsQ0FBQyx1R0FBYztBQUMzQyxNQUFNRixtQkFBbUJJLGFBQWFDLFVBQVU7SUFDNUNDLG1CQUFtQkMsZUFBZSxFQUFFO1FBQ2hDLElBQUksSUFBSSxDQUFDQyxnQkFBZ0IsRUFBRTtZQUN2QixNQUFNLElBQUlDLFVBQVU7UUFDeEI7UUFDQSxJQUFJLENBQUNELGdCQUFnQixHQUFHRDtRQUN4QixPQUFPLElBQUk7SUFDZjtJQUNBRywyQkFBMkJDLFVBQVUsRUFBRTtRQUNuQyxJQUFJLElBQUksQ0FBQ0Msd0JBQXdCLEVBQUU7WUFDL0IsTUFBTSxJQUFJSCxVQUFVO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDRyx3QkFBd0IsR0FBR0Q7UUFDaEMsT0FBTyxJQUFJO0lBQ2Y7SUFDQUUsd0JBQXdCQyxHQUFHLEVBQUU7UUFDekIsSUFBSSxJQUFJLENBQUNDLElBQUksRUFBRTtZQUNYLE1BQU0sSUFBSU4sVUFBVTtRQUN4QjtRQUNBLElBQUksQ0FBQ00sSUFBSSxHQUFHRDtRQUNaLE9BQU8sSUFBSTtJQUNmO0lBQ0FFLHdCQUF3QkMsRUFBRSxFQUFFO1FBQ3hCLElBQUksSUFBSSxDQUFDQyxHQUFHLEVBQUU7WUFDVixNQUFNLElBQUlULFVBQVU7UUFDeEI7UUFDQSxJQUFJLENBQUNTLEdBQUcsR0FBR0Q7UUFDWCxPQUFPLElBQUk7SUFDZjtJQUNBRSwwQkFBMEI7UUFDdEIsSUFBSSxDQUFDQyx3QkFBd0IsR0FBRztRQUNoQyxPQUFPLElBQUk7SUFDZjtJQUNBQywyQkFBMkI7UUFDdkIsSUFBSSxDQUFDQyx5QkFBeUIsR0FBRztRQUNqQyxPQUFPLElBQUk7SUFDZjtJQUNBQyw0QkFBNEI7UUFDeEIsSUFBSSxDQUFDQywwQkFBMEIsR0FBRztRQUNsQyxPQUFPLElBQUk7SUFDZjtJQUNBLE1BQU1DLFFBQVFDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO1FBQ3hCLE1BQU1DLE1BQU0sSUFBSTNCLGFBQWE0QixjQUFjLENBQUMxQixrQkFBa0IyQixPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsS0FBS0MsU0FBUyxDQUFDLElBQUksQ0FBQ0MsUUFBUTtRQUN6RyxJQUFJLElBQUksQ0FBQ2Qsd0JBQXdCLEVBQUU7WUFDL0IsSUFBSSxDQUFDWixnQkFBZ0IsR0FBRztnQkFBRSxHQUFHLElBQUksQ0FBQ0EsZ0JBQWdCO2dCQUFFMkIsS0FBSyxJQUFJLENBQUNELFFBQVEsQ0FBQ0MsR0FBRztZQUFDO1FBQy9FO1FBQ0EsSUFBSSxJQUFJLENBQUNiLHlCQUF5QixFQUFFO1lBQ2hDLElBQUksQ0FBQ2QsZ0JBQWdCLEdBQUc7Z0JBQUUsR0FBRyxJQUFJLENBQUNBLGdCQUFnQjtnQkFBRTRCLEtBQUssSUFBSSxDQUFDRixRQUFRLENBQUNFLEdBQUc7WUFBQztRQUMvRTtRQUNBLElBQUksSUFBSSxDQUFDWiwwQkFBMEIsRUFBRTtZQUNqQyxJQUFJLENBQUNoQixnQkFBZ0IsR0FBRztnQkFBRSxHQUFHLElBQUksQ0FBQ0EsZ0JBQWdCO2dCQUFFNkIsS0FBSyxJQUFJLENBQUNILFFBQVEsQ0FBQ0csR0FBRztZQUFDO1FBQy9FO1FBQ0FULElBQUl0QixrQkFBa0IsQ0FBQyxJQUFJLENBQUNFLGdCQUFnQjtRQUM1QyxJQUFJLElBQUksQ0FBQ1UsR0FBRyxFQUFFO1lBQ1ZVLElBQUlaLHVCQUF1QixDQUFDLElBQUksQ0FBQ0UsR0FBRztRQUN4QztRQUNBLElBQUksSUFBSSxDQUFDSCxJQUFJLEVBQUU7WUFDWGEsSUFBSWYsdUJBQXVCLENBQUMsSUFBSSxDQUFDRSxJQUFJO1FBQ3pDO1FBQ0EsSUFBSSxJQUFJLENBQUNILHdCQUF3QixFQUFFO1lBQy9CZ0IsSUFBSWxCLDBCQUEwQixDQUFDLElBQUksQ0FBQ0Usd0JBQXdCO1FBQ2hFO1FBQ0EsT0FBT2dCLElBQUlILE9BQU8sQ0FBQ0MsS0FBS0M7SUFDNUI7QUFDSjtBQUNBN0Isa0JBQWtCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvand0L2VuY3J5cHQuanM/ODIxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW5jcnlwdEpXVCA9IHZvaWQgMDtcbmNvbnN0IGVuY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi9qd2UvY29tcGFjdC9lbmNyeXB0LmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IHByb2R1Y2VfanNfMSA9IHJlcXVpcmUoXCIuL3Byb2R1Y2UuanNcIik7XG5jbGFzcyBFbmNyeXB0SldUIGV4dGVuZHMgcHJvZHVjZV9qc18xLlByb2R1Y2VKV1Qge1xuICAgIHNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0UHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyID0gcHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICAgICAgICBpZiAodGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fa2V5TWFuYWdlbWVudFBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0Q29udGVudEVuY3J5cHRpb25LZXkoY2VrKSB7XG4gICAgICAgIGlmICh0aGlzLl9jZWspIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NldENvbnRlbnRFbmNyeXB0aW9uS2V5IGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2VrID0gY2VrO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0SW5pdGlhbGl6YXRpb25WZWN0b3IoaXYpIHtcbiAgICAgICAgaWYgKHRoaXMuX2l2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRJbml0aWFsaXphdGlvblZlY3RvciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2l2ID0gaXY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXBsaWNhdGVJc3N1ZXJBc0hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5fcmVwbGljYXRlSXNzdWVyQXNIZWFkZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVwbGljYXRlU3ViamVjdEFzSGVhZGVyKCkge1xuICAgICAgICB0aGlzLl9yZXBsaWNhdGVTdWJqZWN0QXNIZWFkZXIgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVwbGljYXRlQXVkaWVuY2VBc0hlYWRlcigpIHtcbiAgICAgICAgdGhpcy5fcmVwbGljYXRlQXVkaWVuY2VBc0hlYWRlciA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhc3luYyBlbmNyeXB0KGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBlbmMgPSBuZXcgZW5jcnlwdF9qc18xLkNvbXBhY3RFbmNyeXB0KGJ1ZmZlcl91dGlsc19qc18xLmVuY29kZXIuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHRoaXMuX3BheWxvYWQpKSk7XG4gICAgICAgIGlmICh0aGlzLl9yZXBsaWNhdGVJc3N1ZXJBc0hlYWRlcikge1xuICAgICAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyID0geyAuLi50aGlzLl9wcm90ZWN0ZWRIZWFkZXIsIGlzczogdGhpcy5fcGF5bG9hZC5pc3MgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcmVwbGljYXRlU3ViamVjdEFzSGVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSB7IC4uLnRoaXMuX3Byb3RlY3RlZEhlYWRlciwgc3ViOiB0aGlzLl9wYXlsb2FkLnN1YiB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yZXBsaWNhdGVBdWRpZW5jZUFzSGVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSB7IC4uLnRoaXMuX3Byb3RlY3RlZEhlYWRlciwgYXVkOiB0aGlzLl9wYXlsb2FkLmF1ZCB9O1xuICAgICAgICB9XG4gICAgICAgIGVuYy5zZXRQcm90ZWN0ZWRIZWFkZXIodGhpcy5fcHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgaWYgKHRoaXMuX2l2KSB7XG4gICAgICAgICAgICBlbmMuc2V0SW5pdGlhbGl6YXRpb25WZWN0b3IodGhpcy5faXYpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jZWspIHtcbiAgICAgICAgICAgIGVuYy5zZXRDb250ZW50RW5jcnlwdGlvbktleSh0aGlzLl9jZWspO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9rZXlNYW5hZ2VtZW50UGFyYW1ldGVycykge1xuICAgICAgICAgICAgZW5jLnNldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzKHRoaXMuX2tleU1hbmFnZW1lbnRQYXJhbWV0ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5jLmVuY3J5cHQoa2V5LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLkVuY3J5cHRKV1QgPSBFbmNyeXB0SldUO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRW5jcnlwdEpXVCIsImVuY3J5cHRfanNfMSIsInJlcXVpcmUiLCJidWZmZXJfdXRpbHNfanNfMSIsInByb2R1Y2VfanNfMSIsIlByb2R1Y2VKV1QiLCJzZXRQcm90ZWN0ZWRIZWFkZXIiLCJwcm90ZWN0ZWRIZWFkZXIiLCJfcHJvdGVjdGVkSGVhZGVyIiwiVHlwZUVycm9yIiwic2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMiLCJwYXJhbWV0ZXJzIiwiX2tleU1hbmFnZW1lbnRQYXJhbWV0ZXJzIiwic2V0Q29udGVudEVuY3J5cHRpb25LZXkiLCJjZWsiLCJfY2VrIiwic2V0SW5pdGlhbGl6YXRpb25WZWN0b3IiLCJpdiIsIl9pdiIsInJlcGxpY2F0ZUlzc3VlckFzSGVhZGVyIiwiX3JlcGxpY2F0ZUlzc3VlckFzSGVhZGVyIiwicmVwbGljYXRlU3ViamVjdEFzSGVhZGVyIiwiX3JlcGxpY2F0ZVN1YmplY3RBc0hlYWRlciIsInJlcGxpY2F0ZUF1ZGllbmNlQXNIZWFkZXIiLCJfcmVwbGljYXRlQXVkaWVuY2VBc0hlYWRlciIsImVuY3J5cHQiLCJrZXkiLCJvcHRpb25zIiwiZW5jIiwiQ29tcGFjdEVuY3J5cHQiLCJlbmNvZGVyIiwiZW5jb2RlIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9wYXlsb2FkIiwiaXNzIiwic3ViIiwiYXVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ProduceJWT = void 0;\nconst epoch_js_1 = __webpack_require__(/*! ../lib/epoch.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst secs_js_1 = __webpack_require__(/*! ../lib/secs.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js\");\nclass ProduceJWT {\n    constructor(payload){\n        if (!(0, is_object_js_1.default)(payload)) {\n            throw new TypeError(\"JWT Claims Set MUST be an object\");\n        }\n        this._payload = payload;\n    }\n    setIssuer(issuer) {\n        this._payload = {\n            ...this._payload,\n            iss: issuer\n        };\n        return this;\n    }\n    setSubject(subject) {\n        this._payload = {\n            ...this._payload,\n            sub: subject\n        };\n        return this;\n    }\n    setAudience(audience) {\n        this._payload = {\n            ...this._payload,\n            aud: audience\n        };\n        return this;\n    }\n    setJti(jwtId) {\n        this._payload = {\n            ...this._payload,\n            jti: jwtId\n        };\n        return this;\n    }\n    setNotBefore(input) {\n        if (typeof input === \"number\") {\n            this._payload = {\n                ...this._payload,\n                nbf: input\n            };\n        } else {\n            this._payload = {\n                ...this._payload,\n                nbf: (0, epoch_js_1.default)(new Date()) + (0, secs_js_1.default)(input)\n            };\n        }\n        return this;\n    }\n    setExpirationTime(input) {\n        if (typeof input === \"number\") {\n            this._payload = {\n                ...this._payload,\n                exp: input\n            };\n        } else {\n            this._payload = {\n                ...this._payload,\n                exp: (0, epoch_js_1.default)(new Date()) + (0, secs_js_1.default)(input)\n            };\n        }\n        return this;\n    }\n    setIssuedAt(input) {\n        if (typeof input === \"undefined\") {\n            this._payload = {\n                ...this._payload,\n                iat: (0, epoch_js_1.default)(new Date())\n            };\n        } else {\n            this._payload = {\n                ...this._payload,\n                iat: input\n            };\n        }\n        return this;\n    }\n}\nexports.ProduceJWT = ProduceJWT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC9wcm9kdWNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBRyxLQUFLO0FBQzFCLE1BQU1HLGFBQWFDLG1CQUFPQSxDQUFDLHdHQUFpQjtBQUM1QyxNQUFNQyxpQkFBaUJELG1CQUFPQSxDQUFDLGdIQUFxQjtBQUNwRCxNQUFNRSxZQUFZRixtQkFBT0EsQ0FBQyxzR0FBZ0I7QUFDMUMsTUFBTUY7SUFDRkssWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLElBQUksQ0FBQyxDQUFDLEdBQUdILGVBQWVJLE9BQU8sRUFBRUQsVUFBVTtZQUN2QyxNQUFNLElBQUlFLFVBQVU7UUFDeEI7UUFDQSxJQUFJLENBQUNDLFFBQVEsR0FBR0g7SUFDcEI7SUFDQUksVUFBVUMsTUFBTSxFQUFFO1FBQ2QsSUFBSSxDQUFDRixRQUFRLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ0EsUUFBUTtZQUFFRyxLQUFLRDtRQUFPO1FBQ2hELE9BQU8sSUFBSTtJQUNmO0lBQ0FFLFdBQVdDLE9BQU8sRUFBRTtRQUNoQixJQUFJLENBQUNMLFFBQVEsR0FBRztZQUFFLEdBQUcsSUFBSSxDQUFDQSxRQUFRO1lBQUVNLEtBQUtEO1FBQVE7UUFDakQsT0FBTyxJQUFJO0lBQ2Y7SUFDQUUsWUFBWUMsUUFBUSxFQUFFO1FBQ2xCLElBQUksQ0FBQ1IsUUFBUSxHQUFHO1lBQUUsR0FBRyxJQUFJLENBQUNBLFFBQVE7WUFBRVMsS0FBS0Q7UUFBUztRQUNsRCxPQUFPLElBQUk7SUFDZjtJQUNBRSxPQUFPQyxLQUFLLEVBQUU7UUFDVixJQUFJLENBQUNYLFFBQVEsR0FBRztZQUFFLEdBQUcsSUFBSSxDQUFDQSxRQUFRO1lBQUVZLEtBQUtEO1FBQU07UUFDL0MsT0FBTyxJQUFJO0lBQ2Y7SUFDQUUsYUFBYUMsS0FBSyxFQUFFO1FBQ2hCLElBQUksT0FBT0EsVUFBVSxVQUFVO1lBQzNCLElBQUksQ0FBQ2QsUUFBUSxHQUFHO2dCQUFFLEdBQUcsSUFBSSxDQUFDQSxRQUFRO2dCQUFFZSxLQUFLRDtZQUFNO1FBQ25ELE9BQ0s7WUFDRCxJQUFJLENBQUNkLFFBQVEsR0FBRztnQkFBRSxHQUFHLElBQUksQ0FBQ0EsUUFBUTtnQkFBRWUsS0FBSyxDQUFDLEdBQUd2QixXQUFXTSxPQUFPLEVBQUUsSUFBSWtCLFVBQVUsQ0FBQyxHQUFHckIsVUFBVUcsT0FBTyxFQUFFZ0I7WUFBTztRQUNqSDtRQUNBLE9BQU8sSUFBSTtJQUNmO0lBQ0FHLGtCQUFrQkgsS0FBSyxFQUFFO1FBQ3JCLElBQUksT0FBT0EsVUFBVSxVQUFVO1lBQzNCLElBQUksQ0FBQ2QsUUFBUSxHQUFHO2dCQUFFLEdBQUcsSUFBSSxDQUFDQSxRQUFRO2dCQUFFa0IsS0FBS0o7WUFBTTtRQUNuRCxPQUNLO1lBQ0QsSUFBSSxDQUFDZCxRQUFRLEdBQUc7Z0JBQUUsR0FBRyxJQUFJLENBQUNBLFFBQVE7Z0JBQUVrQixLQUFLLENBQUMsR0FBRzFCLFdBQVdNLE9BQU8sRUFBRSxJQUFJa0IsVUFBVSxDQUFDLEdBQUdyQixVQUFVRyxPQUFPLEVBQUVnQjtZQUFPO1FBQ2pIO1FBQ0EsT0FBTyxJQUFJO0lBQ2Y7SUFDQUssWUFBWUwsS0FBSyxFQUFFO1FBQ2YsSUFBSSxPQUFPQSxVQUFVLGFBQWE7WUFDOUIsSUFBSSxDQUFDZCxRQUFRLEdBQUc7Z0JBQUUsR0FBRyxJQUFJLENBQUNBLFFBQVE7Z0JBQUVvQixLQUFLLENBQUMsR0FBRzVCLFdBQVdNLE9BQU8sRUFBRSxJQUFJa0I7WUFBUTtRQUNqRixPQUNLO1lBQ0QsSUFBSSxDQUFDaEIsUUFBUSxHQUFHO2dCQUFFLEdBQUcsSUFBSSxDQUFDQSxRQUFRO2dCQUFFb0IsS0FBS047WUFBTTtRQUNuRDtRQUNBLE9BQU8sSUFBSTtJQUNmO0FBQ0o7QUFDQXpCLGtCQUFrQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC9wcm9kdWNlLmpzPzY4ZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByb2R1Y2VKV1QgPSB2b2lkIDA7XG5jb25zdCBlcG9jaF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9lcG9jaC5qc1wiKTtcbmNvbnN0IGlzX29iamVjdF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pc19vYmplY3QuanNcIik7XG5jb25zdCBzZWNzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL3NlY3MuanNcIik7XG5jbGFzcyBQcm9kdWNlSldUIHtcbiAgICBjb25zdHJ1Y3RvcihwYXlsb2FkKSB7XG4gICAgICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKHBheWxvYWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKV1QgQ2xhaW1zIFNldCBNVVNUIGJlIGFuIG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BheWxvYWQgPSBwYXlsb2FkO1xuICAgIH1cbiAgICBzZXRJc3N1ZXIoaXNzdWVyKSB7XG4gICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGlzczogaXNzdWVyIH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRTdWJqZWN0KHN1YmplY3QpIHtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgc3ViOiBzdWJqZWN0IH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRBdWRpZW5jZShhdWRpZW5jZSkge1xuICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBhdWQ6IGF1ZGllbmNlIH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRKdGkoand0SWQpIHtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwganRpOiBqd3RJZCB9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0Tm90QmVmb3JlKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBuYmY6IGlucHV0IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBuYmY6ICgwLCBlcG9jaF9qc18xLmRlZmF1bHQpKG5ldyBEYXRlKCkpICsgKDAsIHNlY3NfanNfMS5kZWZhdWx0KShpbnB1dCkgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0RXhwaXJhdGlvblRpbWUoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGV4cDogaW5wdXQgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGV4cDogKDAsIGVwb2NoX2pzXzEuZGVmYXVsdCkobmV3IERhdGUoKSkgKyAoMCwgc2Vjc19qc18xLmRlZmF1bHQpKGlucHV0KSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRJc3N1ZWRBdChpbnB1dCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgaWF0OiAoMCwgZXBvY2hfanNfMS5kZWZhdWx0KShuZXcgRGF0ZSgpKSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgaWF0OiBpbnB1dCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvZHVjZUpXVCA9IFByb2R1Y2VKV1Q7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQcm9kdWNlSldUIiwiZXBvY2hfanNfMSIsInJlcXVpcmUiLCJpc19vYmplY3RfanNfMSIsInNlY3NfanNfMSIsImNvbnN0cnVjdG9yIiwicGF5bG9hZCIsImRlZmF1bHQiLCJUeXBlRXJyb3IiLCJfcGF5bG9hZCIsInNldElzc3VlciIsImlzc3VlciIsImlzcyIsInNldFN1YmplY3QiLCJzdWJqZWN0Iiwic3ViIiwic2V0QXVkaWVuY2UiLCJhdWRpZW5jZSIsImF1ZCIsInNldEp0aSIsImp3dElkIiwianRpIiwic2V0Tm90QmVmb3JlIiwiaW5wdXQiLCJuYmYiLCJEYXRlIiwic2V0RXhwaXJhdGlvblRpbWUiLCJleHAiLCJzZXRJc3N1ZWRBdCIsImlhdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/sign.js":
/*!********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/sign.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SignJWT = void 0;\nconst sign_js_1 = __webpack_require__(/*! ../jws/compact/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst produce_js_1 = __webpack_require__(/*! ./produce.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js\");\nclass SignJWT extends produce_js_1.ProduceJWT {\n    setProtectedHeader(protectedHeader) {\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    async sign(key, options) {\n        var _a;\n        const sig = new sign_js_1.CompactSign(buffer_utils_js_1.encoder.encode(JSON.stringify(this._payload)));\n        sig.setProtectedHeader(this._protectedHeader);\n        if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) && this._protectedHeader.crit.includes(\"b64\") && this._protectedHeader.b64 === false) {\n            throw new errors_js_1.JWTInvalid(\"JWTs MUST NOT use unencoded payload\");\n        }\n        return sig.sign(key, options);\n    }\n}\nexports.SignJWT = SignJWT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC9zaWduLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUcsS0FBSztBQUN2QixNQUFNRyxZQUFZQyxtQkFBT0EsQ0FBQyxzSEFBd0I7QUFDbEQsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsNEdBQW1CO0FBQy9DLE1BQU1FLG9CQUFvQkYsbUJBQU9BLENBQUMsc0hBQXdCO0FBQzFELE1BQU1HLGVBQWVILG1CQUFPQSxDQUFDLHVHQUFjO0FBQzNDLE1BQU1GLGdCQUFnQkssYUFBYUMsVUFBVTtJQUN6Q0MsbUJBQW1CQyxlQUFlLEVBQUU7UUFDaEMsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0Q7UUFDeEIsT0FBTyxJQUFJO0lBQ2Y7SUFDQSxNQUFNRSxLQUFLQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUNyQixJQUFJQztRQUNKLE1BQU1DLE1BQU0sSUFBSWIsVUFBVWMsV0FBVyxDQUFDWCxrQkFBa0JZLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLQyxTQUFTLENBQUMsSUFBSSxDQUFDQyxRQUFRO1FBQ25HTixJQUFJUCxrQkFBa0IsQ0FBQyxJQUFJLENBQUNFLGdCQUFnQjtRQUM1QyxJQUFJWSxNQUFNQyxPQUFPLENBQUMsQ0FBQ1QsS0FBSyxJQUFJLENBQUNKLGdCQUFnQixNQUFNLFFBQVFJLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1UsSUFBSSxLQUN2RixJQUFJLENBQUNkLGdCQUFnQixDQUFDYyxJQUFJLENBQUNDLFFBQVEsQ0FBQyxVQUNwQyxJQUFJLENBQUNmLGdCQUFnQixDQUFDZ0IsR0FBRyxLQUFLLE9BQU87WUFDckMsTUFBTSxJQUFJdEIsWUFBWXVCLFVBQVUsQ0FBQztRQUNyQztRQUNBLE9BQU9aLElBQUlKLElBQUksQ0FBQ0MsS0FBS0M7SUFDekI7QUFDSjtBQUNBZCxlQUFlLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvand0L3NpZ24uanM/MmY4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2lnbkpXVCA9IHZvaWQgMDtcbmNvbnN0IHNpZ25fanNfMSA9IHJlcXVpcmUoXCIuLi9qd3MvY29tcGFjdC9zaWduLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgcHJvZHVjZV9qc18xID0gcmVxdWlyZShcIi4vcHJvZHVjZS5qc1wiKTtcbmNsYXNzIFNpZ25KV1QgZXh0ZW5kcyBwcm9kdWNlX2pzXzEuUHJvZHVjZUpXVCB7XG4gICAgc2V0UHJvdGVjdGVkSGVhZGVyKHByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhc3luYyBzaWduKGtleSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHNpZyA9IG5ldyBzaWduX2pzXzEuQ29tcGFjdFNpZ24oYnVmZmVyX3V0aWxzX2pzXzEuZW5jb2Rlci5lbmNvZGUoSlNPTi5zdHJpbmdpZnkodGhpcy5fcGF5bG9hZCkpKTtcbiAgICAgICAgc2lnLnNldFByb3RlY3RlZEhlYWRlcih0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSgoX2EgPSB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jcml0KSAmJlxuICAgICAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyLmNyaXQuaW5jbHVkZXMoJ2I2NCcpICYmXG4gICAgICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIuYjY0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0pXVHMgTVVTVCBOT1QgdXNlIHVuZW5jb2RlZCBwYXlsb2FkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpZy5zaWduKGtleSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5TaWduSldUID0gU2lnbkpXVDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNpZ25KV1QiLCJzaWduX2pzXzEiLCJyZXF1aXJlIiwiZXJyb3JzX2pzXzEiLCJidWZmZXJfdXRpbHNfanNfMSIsInByb2R1Y2VfanNfMSIsIlByb2R1Y2VKV1QiLCJzZXRQcm90ZWN0ZWRIZWFkZXIiLCJwcm90ZWN0ZWRIZWFkZXIiLCJfcHJvdGVjdGVkSGVhZGVyIiwic2lnbiIsImtleSIsIm9wdGlvbnMiLCJfYSIsInNpZyIsIkNvbXBhY3RTaWduIiwiZW5jb2RlciIsImVuY29kZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJfcGF5bG9hZCIsIkFycmF5IiwiaXNBcnJheSIsImNyaXQiLCJpbmNsdWRlcyIsImI2NCIsIkpXVEludmFsaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/unsecured.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/unsecured.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnsecuredJWT = void 0;\nconst base64url = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst jwt_claims_set_js_1 = __webpack_require__(/*! ../lib/jwt_claims_set.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js\");\nconst produce_js_1 = __webpack_require__(/*! ./produce.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js\");\nclass UnsecuredJWT extends produce_js_1.ProduceJWT {\n    encode() {\n        const header = base64url.encode(JSON.stringify({\n            alg: \"none\"\n        }));\n        const payload = base64url.encode(JSON.stringify(this._payload));\n        return `${header}.${payload}.`;\n    }\n    static decode(jwt, options) {\n        if (typeof jwt !== \"string\") {\n            throw new errors_js_1.JWTInvalid(\"Unsecured JWT must be a string\");\n        }\n        const { 0: encodedHeader, 1: encodedPayload, 2: signature, length } = jwt.split(\".\");\n        if (length !== 3 || signature !== \"\") {\n            throw new errors_js_1.JWTInvalid(\"Invalid Unsecured JWT\");\n        }\n        let header;\n        try {\n            header = JSON.parse(buffer_utils_js_1.decoder.decode(base64url.decode(encodedHeader)));\n            if (header.alg !== \"none\") throw new Error();\n        } catch  {\n            throw new errors_js_1.JWTInvalid(\"Invalid Unsecured JWT\");\n        }\n        const payload = (0, jwt_claims_set_js_1.default)(header, base64url.decode(encodedPayload), options);\n        return {\n            payload,\n            header\n        };\n    }\n}\nexports.UnsecuredJWT = UnsecuredJWT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC91bnNlY3VyZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUs7QUFDNUIsTUFBTUcsWUFBWUMsbUJBQU9BLENBQUMsd0hBQXlCO0FBQ25ELE1BQU1DLG9CQUFvQkQsbUJBQU9BLENBQUMsc0hBQXdCO0FBQzFELE1BQU1FLGNBQWNGLG1CQUFPQSxDQUFDLDRHQUFtQjtBQUMvQyxNQUFNRyxzQkFBc0JILG1CQUFPQSxDQUFDLDBIQUEwQjtBQUM5RCxNQUFNSSxlQUFlSixtQkFBT0EsQ0FBQyx1R0FBYztBQUMzQyxNQUFNRixxQkFBcUJNLGFBQWFDLFVBQVU7SUFDOUNDLFNBQVM7UUFDTCxNQUFNQyxTQUFTUixVQUFVTyxNQUFNLENBQUNFLEtBQUtDLFNBQVMsQ0FBQztZQUFFQyxLQUFLO1FBQU87UUFDN0QsTUFBTUMsVUFBVVosVUFBVU8sTUFBTSxDQUFDRSxLQUFLQyxTQUFTLENBQUMsSUFBSSxDQUFDRyxRQUFRO1FBQzdELE9BQU8sQ0FBQyxFQUFFTCxPQUFPLENBQUMsRUFBRUksUUFBUSxDQUFDLENBQUM7SUFDbEM7SUFDQSxPQUFPRSxPQUFPQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUN4QixJQUFJLE9BQU9ELFFBQVEsVUFBVTtZQUN6QixNQUFNLElBQUlaLFlBQVljLFVBQVUsQ0FBQztRQUNyQztRQUNBLE1BQU0sRUFBRSxHQUFHQyxhQUFhLEVBQUUsR0FBR0MsY0FBYyxFQUFFLEdBQUdDLFNBQVMsRUFBRUMsTUFBTSxFQUFFLEdBQUdOLElBQUlPLEtBQUssQ0FBQztRQUNoRixJQUFJRCxXQUFXLEtBQUtELGNBQWMsSUFBSTtZQUNsQyxNQUFNLElBQUlqQixZQUFZYyxVQUFVLENBQUM7UUFDckM7UUFDQSxJQUFJVDtRQUNKLElBQUk7WUFDQUEsU0FBU0MsS0FBS2MsS0FBSyxDQUFDckIsa0JBQWtCc0IsT0FBTyxDQUFDVixNQUFNLENBQUNkLFVBQVVjLE1BQU0sQ0FBQ0k7WUFDdEUsSUFBSVYsT0FBT0csR0FBRyxLQUFLLFFBQ2YsTUFBTSxJQUFJYztRQUNsQixFQUNBLE9BQU07WUFDRixNQUFNLElBQUl0QixZQUFZYyxVQUFVLENBQUM7UUFDckM7UUFDQSxNQUFNTCxVQUFVLENBQUMsR0FBR1Isb0JBQW9Cc0IsT0FBTyxFQUFFbEIsUUFBUVIsVUFBVWMsTUFBTSxDQUFDSyxpQkFBaUJIO1FBQzNGLE9BQU87WUFBRUo7WUFBU0o7UUFBTztJQUM3QjtBQUNKO0FBQ0FYLG9CQUFvQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC91bnNlY3VyZWQuanM/ZWE5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVW5zZWN1cmVkSldUID0gdm9pZCAwO1xuY29uc3QgYmFzZTY0dXJsID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3Qgand0X2NsYWltc19zZXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvand0X2NsYWltc19zZXQuanNcIik7XG5jb25zdCBwcm9kdWNlX2pzXzEgPSByZXF1aXJlKFwiLi9wcm9kdWNlLmpzXCIpO1xuY2xhc3MgVW5zZWN1cmVkSldUIGV4dGVuZHMgcHJvZHVjZV9qc18xLlByb2R1Y2VKV1Qge1xuICAgIGVuY29kZSgpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gYmFzZTY0dXJsLmVuY29kZShKU09OLnN0cmluZ2lmeSh7IGFsZzogJ25vbmUnIH0pKTtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IGJhc2U2NHVybC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkodGhpcy5fcGF5bG9hZCkpO1xuICAgICAgICByZXR1cm4gYCR7aGVhZGVyfS4ke3BheWxvYWR9LmA7XG4gICAgfVxuICAgIHN0YXRpYyBkZWNvZGUoand0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygand0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ1Vuc2VjdXJlZCBKV1QgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgMDogZW5jb2RlZEhlYWRlciwgMTogZW5jb2RlZFBheWxvYWQsIDI6IHNpZ25hdHVyZSwgbGVuZ3RoIH0gPSBqd3Quc3BsaXQoJy4nKTtcbiAgICAgICAgaWYgKGxlbmd0aCAhPT0gMyB8fCBzaWduYXR1cmUgIT09ICcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnSW52YWxpZCBVbnNlY3VyZWQgSldUJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGhlYWRlcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhlYWRlciA9IEpTT04ucGFyc2UoYnVmZmVyX3V0aWxzX2pzXzEuZGVjb2Rlci5kZWNvZGUoYmFzZTY0dXJsLmRlY29kZShlbmNvZGVkSGVhZGVyKSkpO1xuICAgICAgICAgICAgaWYgKGhlYWRlci5hbGcgIT09ICdub25lJylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnSW52YWxpZCBVbnNlY3VyZWQgSldUJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF5bG9hZCA9ICgwLCBqd3RfY2xhaW1zX3NldF9qc18xLmRlZmF1bHQpKGhlYWRlciwgYmFzZTY0dXJsLmRlY29kZShlbmNvZGVkUGF5bG9hZCksIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4geyBwYXlsb2FkLCBoZWFkZXIgfTtcbiAgICB9XG59XG5leHBvcnRzLlVuc2VjdXJlZEpXVCA9IFVuc2VjdXJlZEpXVDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVuc2VjdXJlZEpXVCIsImJhc2U2NHVybCIsInJlcXVpcmUiLCJidWZmZXJfdXRpbHNfanNfMSIsImVycm9yc19qc18xIiwiand0X2NsYWltc19zZXRfanNfMSIsInByb2R1Y2VfanNfMSIsIlByb2R1Y2VKV1QiLCJlbmNvZGUiLCJoZWFkZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiYWxnIiwicGF5bG9hZCIsIl9wYXlsb2FkIiwiZGVjb2RlIiwiand0Iiwib3B0aW9ucyIsIkpXVEludmFsaWQiLCJlbmNvZGVkSGVhZGVyIiwiZW5jb2RlZFBheWxvYWQiLCJzaWduYXR1cmUiLCJsZW5ndGgiLCJzcGxpdCIsInBhcnNlIiwiZGVjb2RlciIsIkVycm9yIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/unsecured.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/verify.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/verify.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.jwtVerify = void 0;\nconst verify_js_1 = __webpack_require__(/*! ../jws/compact/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js\");\nconst jwt_claims_set_js_1 = __webpack_require__(/*! ../lib/jwt_claims_set.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nasync function jwtVerify(jwt, key, options) {\n    var _a;\n    const verified = await (0, verify_js_1.compactVerify)(jwt, key, options);\n    if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes(\"b64\")) && verified.protectedHeader.b64 === false) {\n        throw new errors_js_1.JWTInvalid(\"JWTs MUST NOT use unencoded payload\");\n    }\n    const payload = (0, jwt_claims_set_js_1.default)(verified.protectedHeader, verified.payload, options);\n    const result = {\n        payload,\n        protectedHeader: verified.protectedHeader\n    };\n    if (typeof key === \"function\") {\n        return {\n            ...result,\n            key: verified.key\n        };\n    }\n    return result;\n}\nexports.jwtVerify = jwtVerify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC92ZXJpZnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsMEhBQTBCO0FBQ3RELE1BQU1DLHNCQUFzQkQsbUJBQU9BLENBQUMsMEhBQTBCO0FBQzlELE1BQU1FLGNBQWNGLG1CQUFPQSxDQUFDLDRHQUFtQjtBQUMvQyxlQUFlRixVQUFVSyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsT0FBTztJQUN0QyxJQUFJQztJQUNKLE1BQU1DLFdBQVcsTUFBTSxDQUFDLEdBQUdSLFlBQVlTLGFBQWEsRUFBRUwsS0FBS0MsS0FBS0M7SUFDaEUsSUFBSSxDQUFDLENBQUNDLEtBQUtDLFNBQVNFLGVBQWUsQ0FBQ0MsSUFBSSxNQUFNLFFBQVFKLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ssUUFBUSxDQUFDLE1BQUssS0FBTUosU0FBU0UsZUFBZSxDQUFDRyxHQUFHLEtBQUssT0FBTztRQUMxSSxNQUFNLElBQUlWLFlBQVlXLFVBQVUsQ0FBQztJQUNyQztJQUNBLE1BQU1DLFVBQVUsQ0FBQyxHQUFHYixvQkFBb0JjLE9BQU8sRUFBRVIsU0FBU0UsZUFBZSxFQUFFRixTQUFTTyxPQUFPLEVBQUVUO0lBQzdGLE1BQU1XLFNBQVM7UUFBRUY7UUFBU0wsaUJBQWlCRixTQUFTRSxlQUFlO0lBQUM7SUFDcEUsSUFBSSxPQUFPTCxRQUFRLFlBQVk7UUFDM0IsT0FBTztZQUFFLEdBQUdZLE1BQU07WUFBRVosS0FBS0csU0FBU0gsR0FBRztRQUFDO0lBQzFDO0lBQ0EsT0FBT1k7QUFDWDtBQUNBcEIsaUJBQWlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvand0L3ZlcmlmeS5qcz85ZTFhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5qd3RWZXJpZnkgPSB2b2lkIDA7XG5jb25zdCB2ZXJpZnlfanNfMSA9IHJlcXVpcmUoXCIuLi9qd3MvY29tcGFjdC92ZXJpZnkuanNcIik7XG5jb25zdCBqd3RfY2xhaW1zX3NldF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9qd3RfY2xhaW1zX3NldC5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gand0VmVyaWZ5KGp3dCwga2V5LCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHZlcmlmaWVkID0gYXdhaXQgKDAsIHZlcmlmeV9qc18xLmNvbXBhY3RWZXJpZnkpKGp3dCwga2V5LCBvcHRpb25zKTtcbiAgICBpZiAoKChfYSA9IHZlcmlmaWVkLnByb3RlY3RlZEhlYWRlci5jcml0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5jbHVkZXMoJ2I2NCcpKSAmJiB2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIuYjY0ID09PSBmYWxzZSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnSldUcyBNVVNUIE5PVCB1c2UgdW5lbmNvZGVkIHBheWxvYWQnKTtcbiAgICB9XG4gICAgY29uc3QgcGF5bG9hZCA9ICgwLCBqd3RfY2xhaW1zX3NldF9qc18xLmRlZmF1bHQpKHZlcmlmaWVkLnByb3RlY3RlZEhlYWRlciwgdmVyaWZpZWQucGF5bG9hZCwgb3B0aW9ucyk7XG4gICAgY29uc3QgcmVzdWx0ID0geyBwYXlsb2FkLCBwcm90ZWN0ZWRIZWFkZXI6IHZlcmlmaWVkLnByb3RlY3RlZEhlYWRlciB9O1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnJlc3VsdCwga2V5OiB2ZXJpZmllZC5rZXkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuand0VmVyaWZ5ID0gand0VmVyaWZ5O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiand0VmVyaWZ5IiwidmVyaWZ5X2pzXzEiLCJyZXF1aXJlIiwiand0X2NsYWltc19zZXRfanNfMSIsImVycm9yc19qc18xIiwiand0Iiwia2V5Iiwib3B0aW9ucyIsIl9hIiwidmVyaWZpZWQiLCJjb21wYWN0VmVyaWZ5IiwicHJvdGVjdGVkSGVhZGVyIiwiY3JpdCIsImluY2x1ZGVzIiwiYjY0IiwiSldUSW52YWxpZCIsInBheWxvYWQiLCJkZWZhdWx0IiwicmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.exportJWK = exports.exportPKCS8 = exports.exportSPKI = void 0;\nconst asn1_js_1 = __webpack_require__(/*! ../runtime/asn1.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js\");\nconst asn1_js_2 = __webpack_require__(/*! ../runtime/asn1.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js\");\nconst key_to_jwk_js_1 = __webpack_require__(/*! ../runtime/key_to_jwk.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/key_to_jwk.js\");\nasync function exportSPKI(key) {\n    return (0, asn1_js_1.toSPKI)(key);\n}\nexports.exportSPKI = exportSPKI;\nasync function exportPKCS8(key) {\n    return (0, asn1_js_2.toPKCS8)(key);\n}\nexports.exportPKCS8 = exportPKCS8;\nasync function exportJWK(key) {\n    return (0, key_to_jwk_js_1.default)(key);\n}\nexports.exportJWK = exportJWK;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9leHBvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHQSxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUcsS0FBSztBQUNwRSxNQUFNSyxZQUFZQyxtQkFBT0EsQ0FBQyw4R0FBb0I7QUFDOUMsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMsOEdBQW9CO0FBQzlDLE1BQU1FLGtCQUFrQkYsbUJBQU9BLENBQUMsMEhBQTBCO0FBQzFELGVBQWVGLFdBQVdLLEdBQUc7SUFDekIsT0FBTyxDQUFDLEdBQUdKLFVBQVVLLE1BQU0sRUFBRUQ7QUFDakM7QUFDQVQsa0JBQWtCLEdBQUdJO0FBQ3JCLGVBQWVELFlBQVlNLEdBQUc7SUFDMUIsT0FBTyxDQUFDLEdBQUdGLFVBQVVJLE9BQU8sRUFBRUY7QUFDbEM7QUFDQVQsbUJBQW1CLEdBQUdHO0FBQ3RCLGVBQWVELFVBQVVPLEdBQUc7SUFDeEIsT0FBTyxDQUFDLEdBQUdELGdCQUFnQkksT0FBTyxFQUFFSDtBQUN4QztBQUNBVCxpQkFBaUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9rZXkvZXhwb3J0LmpzP2JjYjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4cG9ydEpXSyA9IGV4cG9ydHMuZXhwb3J0UEtDUzggPSBleHBvcnRzLmV4cG9ydFNQS0kgPSB2b2lkIDA7XG5jb25zdCBhc24xX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9hc24xLmpzXCIpO1xuY29uc3QgYXNuMV9qc18yID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvYXNuMS5qc1wiKTtcbmNvbnN0IGtleV90b19qd2tfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2tleV90b19qd2suanNcIik7XG5hc3luYyBmdW5jdGlvbiBleHBvcnRTUEtJKGtleSkge1xuICAgIHJldHVybiAoMCwgYXNuMV9qc18xLnRvU1BLSSkoa2V5KTtcbn1cbmV4cG9ydHMuZXhwb3J0U1BLSSA9IGV4cG9ydFNQS0k7XG5hc3luYyBmdW5jdGlvbiBleHBvcnRQS0NTOChrZXkpIHtcbiAgICByZXR1cm4gKDAsIGFzbjFfanNfMi50b1BLQ1M4KShrZXkpO1xufVxuZXhwb3J0cy5leHBvcnRQS0NTOCA9IGV4cG9ydFBLQ1M4O1xuYXN5bmMgZnVuY3Rpb24gZXhwb3J0SldLKGtleSkge1xuICAgIHJldHVybiAoMCwga2V5X3RvX2p3a19qc18xLmRlZmF1bHQpKGtleSk7XG59XG5leHBvcnRzLmV4cG9ydEpXSyA9IGV4cG9ydEpXSztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV4cG9ydEpXSyIsImV4cG9ydFBLQ1M4IiwiZXhwb3J0U1BLSSIsImFzbjFfanNfMSIsInJlcXVpcmUiLCJhc24xX2pzXzIiLCJrZXlfdG9fandrX2pzXzEiLCJrZXkiLCJ0b1NQS0kiLCJ0b1BLQ1M4IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_key_pair.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_key_pair.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generateKeyPair = void 0;\nconst generate_js_1 = __webpack_require__(/*! ../runtime/generate.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js\");\nasync function generateKeyPair(alg, options) {\n    return (0, generate_js_1.generateKeyPair)(alg, options);\n}\nexports.generateKeyPair = generateKeyPair;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9nZW5lcmF0ZV9rZXlfcGFpci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUcsS0FBSztBQUMvQixNQUFNRyxnQkFBZ0JDLG1CQUFPQSxDQUFDLHNIQUF3QjtBQUN0RCxlQUFlRixnQkFBZ0JHLEdBQUcsRUFBRUMsT0FBTztJQUN2QyxPQUFPLENBQUMsR0FBR0gsY0FBY0QsZUFBZSxFQUFFRyxLQUFLQztBQUNuRDtBQUNBTix1QkFBdUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9rZXkvZ2VuZXJhdGVfa2V5X3BhaXIuanM/NDcxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhdGVLZXlQYWlyID0gdm9pZCAwO1xuY29uc3QgZ2VuZXJhdGVfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2dlbmVyYXRlLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVLZXlQYWlyKGFsZywgb3B0aW9ucykge1xuICAgIHJldHVybiAoMCwgZ2VuZXJhdGVfanNfMS5nZW5lcmF0ZUtleVBhaXIpKGFsZywgb3B0aW9ucyk7XG59XG5leHBvcnRzLmdlbmVyYXRlS2V5UGFpciA9IGdlbmVyYXRlS2V5UGFpcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdlbmVyYXRlS2V5UGFpciIsImdlbmVyYXRlX2pzXzEiLCJyZXF1aXJlIiwiYWxnIiwib3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_key_pair.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_secret.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_secret.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generateSecret = void 0;\nconst generate_js_1 = __webpack_require__(/*! ../runtime/generate.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js\");\nasync function generateSecret(alg, options) {\n    return (0, generate_js_1.generateSecret)(alg, options);\n}\nexports.generateSecret = generateSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9nZW5lcmF0ZV9zZWNyZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUcsZ0JBQWdCQyxtQkFBT0EsQ0FBQyxzSEFBd0I7QUFDdEQsZUFBZUYsZUFBZUcsR0FBRyxFQUFFQyxPQUFPO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHSCxjQUFjRCxjQUFjLEVBQUVHLEtBQUtDO0FBQ2xEO0FBQ0FOLHNCQUFzQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9nZW5lcmF0ZV9zZWNyZXQuanM/NGJlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhdGVTZWNyZXQgPSB2b2lkIDA7XG5jb25zdCBnZW5lcmF0ZV9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvZ2VuZXJhdGUuanNcIik7XG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVNlY3JldChhbGcsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKDAsIGdlbmVyYXRlX2pzXzEuZ2VuZXJhdGVTZWNyZXQpKGFsZywgb3B0aW9ucyk7XG59XG5leHBvcnRzLmdlbmVyYXRlU2VjcmV0ID0gZ2VuZXJhdGVTZWNyZXQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZW5lcmF0ZVNlY3JldCIsImdlbmVyYXRlX2pzXzEiLCJyZXF1aXJlIiwiYWxnIiwib3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_secret.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.importJWK = exports.importPKCS8 = exports.importX509 = exports.importSPKI = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst asn1_js_1 = __webpack_require__(/*! ../runtime/asn1.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js\");\nconst jwk_to_key_js_1 = __webpack_require__(/*! ../runtime/jwk_to_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/jwk_to_key.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nasync function importSPKI(spki, alg, options) {\n    if (typeof spki !== \"string\" || spki.indexOf(\"-----BEGIN PUBLIC KEY-----\") !== 0) {\n        throw new TypeError('\"spki\" must be SPKI formatted string');\n    }\n    return (0, asn1_js_1.fromSPKI)(spki, alg, options);\n}\nexports.importSPKI = importSPKI;\nasync function importX509(x509, alg, options) {\n    if (typeof x509 !== \"string\" || x509.indexOf(\"-----BEGIN CERTIFICATE-----\") !== 0) {\n        throw new TypeError('\"x509\" must be X.509 formatted string');\n    }\n    return (0, asn1_js_1.fromX509)(x509, alg, options);\n}\nexports.importX509 = importX509;\nasync function importPKCS8(pkcs8, alg, options) {\n    if (typeof pkcs8 !== \"string\" || pkcs8.indexOf(\"-----BEGIN PRIVATE KEY-----\") !== 0) {\n        throw new TypeError('\"pkcs8\" must be PKCS#8 formatted string');\n    }\n    return (0, asn1_js_1.fromPKCS8)(pkcs8, alg, options);\n}\nexports.importPKCS8 = importPKCS8;\nasync function importJWK(jwk, alg, octAsKeyObject) {\n    var _a;\n    if (!(0, is_object_js_1.default)(jwk)) {\n        throw new TypeError(\"JWK must be an object\");\n    }\n    alg || (alg = jwk.alg);\n    switch(jwk.kty){\n        case \"oct\":\n            if (typeof jwk.k !== \"string\" || !jwk.k) {\n                throw new TypeError('missing \"k\" (Key Value) Parameter value');\n            }\n            octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : octAsKeyObject = jwk.ext !== true;\n            if (octAsKeyObject) {\n                return (0, jwk_to_key_js_1.default)({\n                    ...jwk,\n                    alg,\n                    ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false\n                });\n            }\n            return (0, base64url_js_1.decode)(jwk.k);\n        case \"RSA\":\n            if (jwk.oth !== undefined) {\n                throw new errors_js_1.JOSENotSupported('RSA JWK \"oth\" (Other Primes Info) Parameter value is not supported');\n            }\n        case \"EC\":\n        case \"OKP\":\n            return (0, jwk_to_key_js_1.default)({\n                ...jwk,\n                alg\n            });\n        default:\n            throw new errors_js_1.JOSENotSupported('Unsupported \"kty\" (Key Type) Parameter value');\n    }\n}\nexports.importJWK = importJWK;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9pbXBvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHQSxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDekYsTUFBTU0saUJBQWlCQyxtQkFBT0EsQ0FBQyx3SEFBeUI7QUFDeEQsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUMsOEdBQW9CO0FBQzlDLE1BQU1FLGtCQUFrQkYsbUJBQU9BLENBQUMsMEhBQTBCO0FBQzFELE1BQU1HLGNBQWNILG1CQUFPQSxDQUFDLDRHQUFtQjtBQUMvQyxNQUFNSSxpQkFBaUJKLG1CQUFPQSxDQUFDLGdIQUFxQjtBQUNwRCxlQUFlRixXQUFXTyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsT0FBTztJQUN4QyxJQUFJLE9BQU9GLFNBQVMsWUFBWUEsS0FBS0csT0FBTyxDQUFDLGtDQUFrQyxHQUFHO1FBQzlFLE1BQU0sSUFBSUMsVUFBVTtJQUN4QjtJQUNBLE9BQU8sQ0FBQyxHQUFHUixVQUFVUyxRQUFRLEVBQUVMLE1BQU1DLEtBQUtDO0FBQzlDO0FBQ0FkLGtCQUFrQixHQUFHSztBQUNyQixlQUFlRCxXQUFXYyxJQUFJLEVBQUVMLEdBQUcsRUFBRUMsT0FBTztJQUN4QyxJQUFJLE9BQU9JLFNBQVMsWUFBWUEsS0FBS0gsT0FBTyxDQUFDLG1DQUFtQyxHQUFHO1FBQy9FLE1BQU0sSUFBSUMsVUFBVTtJQUN4QjtJQUNBLE9BQU8sQ0FBQyxHQUFHUixVQUFVVyxRQUFRLEVBQUVELE1BQU1MLEtBQUtDO0FBQzlDO0FBQ0FkLGtCQUFrQixHQUFHSTtBQUNyQixlQUFlRCxZQUFZaUIsS0FBSyxFQUFFUCxHQUFHLEVBQUVDLE9BQU87SUFDMUMsSUFBSSxPQUFPTSxVQUFVLFlBQVlBLE1BQU1MLE9BQU8sQ0FBQyxtQ0FBbUMsR0FBRztRQUNqRixNQUFNLElBQUlDLFVBQVU7SUFDeEI7SUFDQSxPQUFPLENBQUMsR0FBR1IsVUFBVWEsU0FBUyxFQUFFRCxPQUFPUCxLQUFLQztBQUNoRDtBQUNBZCxtQkFBbUIsR0FBR0c7QUFDdEIsZUFBZUQsVUFBVW9CLEdBQUcsRUFBRVQsR0FBRyxFQUFFVSxjQUFjO0lBQzdDLElBQUlDO0lBQ0osSUFBSSxDQUFDLENBQUMsR0FBR2IsZUFBZWMsT0FBTyxFQUFFSCxNQUFNO1FBQ25DLE1BQU0sSUFBSU4sVUFBVTtJQUN4QjtJQUNBSCxPQUFRQSxDQUFBQSxNQUFNUyxJQUFJVCxHQUFHO0lBQ3JCLE9BQVFTLElBQUlJLEdBQUc7UUFDWCxLQUFLO1lBQ0QsSUFBSSxPQUFPSixJQUFJSyxDQUFDLEtBQUssWUFBWSxDQUFDTCxJQUFJSyxDQUFDLEVBQUU7Z0JBQ3JDLE1BQU0sSUFBSVgsVUFBVTtZQUN4QjtZQUNBTyxtQkFBbUIsUUFBUUEsbUJBQW1CLEtBQUssSUFBSUEsaUJBQWtCQSxpQkFBaUJELElBQUlNLEdBQUcsS0FBSztZQUN0RyxJQUFJTCxnQkFBZ0I7Z0JBQ2hCLE9BQU8sQ0FBQyxHQUFHZCxnQkFBZ0JnQixPQUFPLEVBQUU7b0JBQUUsR0FBR0gsR0FBRztvQkFBRVQ7b0JBQUtlLEtBQUssQ0FBQ0osS0FBS0YsSUFBSU0sR0FBRyxNQUFNLFFBQVFKLE9BQU8sS0FBSyxJQUFJQSxLQUFLO2dCQUFNO1lBQ2xIO1lBQ0EsT0FBTyxDQUFDLEdBQUdsQixlQUFldUIsTUFBTSxFQUFFUCxJQUFJSyxDQUFDO1FBQzNDLEtBQUs7WUFDRCxJQUFJTCxJQUFJUSxHQUFHLEtBQUtDLFdBQVc7Z0JBQ3ZCLE1BQU0sSUFBSXJCLFlBQVlzQixnQkFBZ0IsQ0FBQztZQUMzQztRQUNKLEtBQUs7UUFDTCxLQUFLO1lBQ0QsT0FBTyxDQUFDLEdBQUd2QixnQkFBZ0JnQixPQUFPLEVBQUU7Z0JBQUUsR0FBR0gsR0FBRztnQkFBRVQ7WUFBSTtRQUN0RDtZQUNJLE1BQU0sSUFBSUgsWUFBWXNCLGdCQUFnQixDQUFDO0lBQy9DO0FBQ0o7QUFDQWhDLGlCQUFpQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9pbXBvcnQuanM/NTQxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW1wb3J0SldLID0gZXhwb3J0cy5pbXBvcnRQS0NTOCA9IGV4cG9ydHMuaW1wb3J0WDUwOSA9IGV4cG9ydHMuaW1wb3J0U1BLSSA9IHZvaWQgMDtcbmNvbnN0IGJhc2U2NHVybF9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzXCIpO1xuY29uc3QgYXNuMV9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvYXNuMS5qc1wiKTtcbmNvbnN0IGp3a190b19rZXlfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2p3a190b19rZXkuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGlzX29iamVjdF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pc19vYmplY3QuanNcIik7XG5hc3luYyBmdW5jdGlvbiBpbXBvcnRTUEtJKHNwa2ksIGFsZywgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygc3BraSAhPT0gJ3N0cmluZycgfHwgc3BraS5pbmRleE9mKCctLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLScpICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic3BraVwiIG11c3QgYmUgU1BLSSBmb3JtYXR0ZWQgc3RyaW5nJyk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgYXNuMV9qc18xLmZyb21TUEtJKShzcGtpLCBhbGcsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5pbXBvcnRTUEtJID0gaW1wb3J0U1BLSTtcbmFzeW5jIGZ1bmN0aW9uIGltcG9ydFg1MDkoeDUwOSwgYWxnLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiB4NTA5ICE9PSAnc3RyaW5nJyB8fCB4NTA5LmluZGV4T2YoJy0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLScpICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wieDUwOVwiIG11c3QgYmUgWC41MDkgZm9ybWF0dGVkIHN0cmluZycpO1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGFzbjFfanNfMS5mcm9tWDUwOSkoeDUwOSwgYWxnLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuaW1wb3J0WDUwOSA9IGltcG9ydFg1MDk7XG5hc3luYyBmdW5jdGlvbiBpbXBvcnRQS0NTOChwa2NzOCwgYWxnLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBwa2NzOCAhPT0gJ3N0cmluZycgfHwgcGtjczguaW5kZXhPZignLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tJykgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJwa2NzOFwiIG11c3QgYmUgUEtDUyM4IGZvcm1hdHRlZCBzdHJpbmcnKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBhc24xX2pzXzEuZnJvbVBLQ1M4KShwa2NzOCwgYWxnLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuaW1wb3J0UEtDUzggPSBpbXBvcnRQS0NTODtcbmFzeW5jIGZ1bmN0aW9uIGltcG9ydEpXSyhqd2ssIGFsZywgb2N0QXNLZXlPYmplY3QpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkoandrKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKV0sgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgYWxnIHx8IChhbGcgPSBqd2suYWxnKTtcbiAgICBzd2l0Y2ggKGp3ay5rdHkpIHtcbiAgICAgICAgY2FzZSAnb2N0JzpcbiAgICAgICAgICAgIGlmICh0eXBlb2YgandrLmsgIT09ICdzdHJpbmcnIHx8ICFqd2suaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pc3NpbmcgXCJrXCIgKEtleSBWYWx1ZSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvY3RBc0tleU9iamVjdCAhPT0gbnVsbCAmJiBvY3RBc0tleU9iamVjdCAhPT0gdm9pZCAwID8gb2N0QXNLZXlPYmplY3QgOiAob2N0QXNLZXlPYmplY3QgPSBqd2suZXh0ICE9PSB0cnVlKTtcbiAgICAgICAgICAgIGlmIChvY3RBc0tleU9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgandrX3RvX2tleV9qc18xLmRlZmF1bHQpKHsgLi4uandrLCBhbGcsIGV4dDogKF9hID0gandrLmV4dCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkoandrLmspO1xuICAgICAgICBjYXNlICdSU0EnOlxuICAgICAgICAgICAgaWYgKGp3ay5vdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKCdSU0EgSldLIFwib3RoXCIgKE90aGVyIFByaW1lcyBJbmZvKSBQYXJhbWV0ZXIgdmFsdWUgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlICdFQyc6XG4gICAgICAgIGNhc2UgJ09LUCc6XG4gICAgICAgICAgICByZXR1cm4gKDAsIGp3a190b19rZXlfanNfMS5kZWZhdWx0KSh7IC4uLmp3aywgYWxnIH0pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIFwia3R5XCIgKEtleSBUeXBlKSBQYXJhbWV0ZXIgdmFsdWUnKTtcbiAgICB9XG59XG5leHBvcnRzLmltcG9ydEpXSyA9IGltcG9ydEpXSztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImltcG9ydEpXSyIsImltcG9ydFBLQ1M4IiwiaW1wb3J0WDUwOSIsImltcG9ydFNQS0kiLCJiYXNlNjR1cmxfanNfMSIsInJlcXVpcmUiLCJhc24xX2pzXzEiLCJqd2tfdG9fa2V5X2pzXzEiLCJlcnJvcnNfanNfMSIsImlzX29iamVjdF9qc18xIiwic3BraSIsImFsZyIsIm9wdGlvbnMiLCJpbmRleE9mIiwiVHlwZUVycm9yIiwiZnJvbVNQS0kiLCJ4NTA5IiwiZnJvbVg1MDkiLCJwa2NzOCIsImZyb21QS0NTOCIsImp3ayIsIm9jdEFzS2V5T2JqZWN0IiwiX2EiLCJkZWZhdWx0Iiwia3R5IiwiayIsImV4dCIsImRlY29kZSIsIm90aCIsInVuZGVmaW5lZCIsIkpPU0VOb3RTdXBwb3J0ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.unwrap = exports.wrap = void 0;\nconst encrypt_js_1 = __webpack_require__(/*! ../runtime/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js\");\nconst decrypt_js_1 = __webpack_require__(/*! ../runtime/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js\");\nconst iv_js_1 = __webpack_require__(/*! ./iv.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nasync function wrap(alg, key, cek, iv) {\n    const jweAlgorithm = alg.slice(0, 7);\n    iv || (iv = (0, iv_js_1.default)(jweAlgorithm));\n    const { ciphertext: encryptedKey, tag } = await (0, encrypt_js_1.default)(jweAlgorithm, cek, key, iv, new Uint8Array(0));\n    return {\n        encryptedKey,\n        iv: (0, base64url_js_1.encode)(iv),\n        tag: (0, base64url_js_1.encode)(tag)\n    };\n}\nexports.wrap = wrap;\nasync function unwrap(alg, key, encryptedKey, iv, tag) {\n    const jweAlgorithm = alg.slice(0, 7);\n    return (0, decrypt_js_1.default)(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));\n}\nexports.unwrap = unwrap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9hZXNnY21rdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHQSxZQUFZLEdBQUcsS0FBSztBQUNyQyxNQUFNSSxlQUFlQyxtQkFBT0EsQ0FBQyxvSEFBdUI7QUFDcEQsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUMsb0hBQXVCO0FBQ3BELE1BQU1FLFVBQVVGLG1CQUFPQSxDQUFDLDZGQUFTO0FBQ2pDLE1BQU1HLGlCQUFpQkgsbUJBQU9BLENBQUMsd0hBQXlCO0FBQ3hELGVBQWVGLEtBQUtNLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEVBQUU7SUFDakMsTUFBTUMsZUFBZUosSUFBSUssS0FBSyxDQUFDLEdBQUc7SUFDbENGLE1BQU9BLENBQUFBLEtBQUssQ0FBQyxHQUFHTCxRQUFRUSxPQUFPLEVBQUVGLGFBQVk7SUFDN0MsTUFBTSxFQUFFRyxZQUFZQyxZQUFZLEVBQUVDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHZCxhQUFhVyxPQUFPLEVBQUVGLGNBQWNGLEtBQUtELEtBQUtFLElBQUksSUFBSU8sV0FBVztJQUNySCxPQUFPO1FBQUVGO1FBQWNMLElBQUksQ0FBQyxHQUFHSixlQUFlWSxNQUFNLEVBQUVSO1FBQUtNLEtBQUssQ0FBQyxHQUFHVixlQUFlWSxNQUFNLEVBQUVGO0lBQUs7QUFDcEc7QUFDQWxCLFlBQVksR0FBR0c7QUFDZixlQUFlRCxPQUFPTyxHQUFHLEVBQUVDLEdBQUcsRUFBRU8sWUFBWSxFQUFFTCxFQUFFLEVBQUVNLEdBQUc7SUFDakQsTUFBTUwsZUFBZUosSUFBSUssS0FBSyxDQUFDLEdBQUc7SUFDbEMsT0FBTyxDQUFDLEdBQUdSLGFBQWFTLE9BQU8sRUFBRUYsY0FBY0gsS0FBS08sY0FBY0wsSUFBSU0sS0FBSyxJQUFJQyxXQUFXO0FBQzlGO0FBQ0FuQixjQUFjLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL2Flc2djbWt3LmpzP2U1NTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVud3JhcCA9IGV4cG9ydHMud3JhcCA9IHZvaWQgMDtcbmNvbnN0IGVuY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2VuY3J5cHQuanNcIik7XG5jb25zdCBkZWNyeXB0X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9kZWNyeXB0LmpzXCIpO1xuY29uc3QgaXZfanNfMSA9IHJlcXVpcmUoXCIuL2l2LmpzXCIpO1xuY29uc3QgYmFzZTY0dXJsX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9iYXNlNjR1cmwuanNcIik7XG5hc3luYyBmdW5jdGlvbiB3cmFwKGFsZywga2V5LCBjZWssIGl2KSB7XG4gICAgY29uc3QgandlQWxnb3JpdGhtID0gYWxnLnNsaWNlKDAsIDcpO1xuICAgIGl2IHx8IChpdiA9ICgwLCBpdl9qc18xLmRlZmF1bHQpKGp3ZUFsZ29yaXRobSkpO1xuICAgIGNvbnN0IHsgY2lwaGVydGV4dDogZW5jcnlwdGVkS2V5LCB0YWcgfSA9IGF3YWl0ICgwLCBlbmNyeXB0X2pzXzEuZGVmYXVsdCkoandlQWxnb3JpdGhtLCBjZWssIGtleSwgaXYsIG5ldyBVaW50OEFycmF5KDApKTtcbiAgICByZXR1cm4geyBlbmNyeXB0ZWRLZXksIGl2OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShpdiksIHRhZzogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkodGFnKSB9O1xufVxuZXhwb3J0cy53cmFwID0gd3JhcDtcbmFzeW5jIGZ1bmN0aW9uIHVud3JhcChhbGcsIGtleSwgZW5jcnlwdGVkS2V5LCBpdiwgdGFnKSB7XG4gICAgY29uc3QgandlQWxnb3JpdGhtID0gYWxnLnNsaWNlKDAsIDcpO1xuICAgIHJldHVybiAoMCwgZGVjcnlwdF9qc18xLmRlZmF1bHQpKGp3ZUFsZ29yaXRobSwga2V5LCBlbmNyeXB0ZWRLZXksIGl2LCB0YWcsIG5ldyBVaW50OEFycmF5KDApKTtcbn1cbmV4cG9ydHMudW53cmFwID0gdW53cmFwO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidW53cmFwIiwid3JhcCIsImVuY3J5cHRfanNfMSIsInJlcXVpcmUiLCJkZWNyeXB0X2pzXzEiLCJpdl9qc18xIiwiYmFzZTY0dXJsX2pzXzEiLCJhbGciLCJrZXkiLCJjZWsiLCJpdiIsImp3ZUFsZ29yaXRobSIsInNsaWNlIiwiZGVmYXVsdCIsImNpcGhlcnRleHQiLCJlbmNyeXB0ZWRLZXkiLCJ0YWciLCJVaW50OEFycmF5IiwiZW5jb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.concatKdf = exports.lengthAndInput = exports.uint32be = exports.uint64be = exports.p2s = exports.concat = exports.decoder = exports.encoder = void 0;\nconst digest_js_1 = __webpack_require__(/*! ../runtime/digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js\");\nexports.encoder = new TextEncoder();\nexports.decoder = new TextDecoder();\nconst MAX_INT32 = 2 ** 32;\nfunction concat(...buffers) {\n    const size = buffers.reduce((acc, { length })=>acc + length, 0);\n    const buf = new Uint8Array(size);\n    let i = 0;\n    buffers.forEach((buffer)=>{\n        buf.set(buffer, i);\n        i += buffer.length;\n    });\n    return buf;\n}\nexports.concat = concat;\nfunction p2s(alg, p2sInput) {\n    return concat(exports.encoder.encode(alg), new Uint8Array([\n        0\n    ]), p2sInput);\n}\nexports.p2s = p2s;\nfunction writeUInt32BE(buf, value, offset) {\n    if (value < 0 || value >= MAX_INT32) {\n        throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);\n    }\n    buf.set([\n        value >>> 24,\n        value >>> 16,\n        value >>> 8,\n        value & 0xff\n    ], offset);\n}\nfunction uint64be(value) {\n    const high = Math.floor(value / MAX_INT32);\n    const low = value % MAX_INT32;\n    const buf = new Uint8Array(8);\n    writeUInt32BE(buf, high, 0);\n    writeUInt32BE(buf, low, 4);\n    return buf;\n}\nexports.uint64be = uint64be;\nfunction uint32be(value) {\n    const buf = new Uint8Array(4);\n    writeUInt32BE(buf, value);\n    return buf;\n}\nexports.uint32be = uint32be;\nfunction lengthAndInput(input) {\n    return concat(uint32be(input.length), input);\n}\nexports.lengthAndInput = lengthAndInput;\nasync function concatKdf(secret, bits, value) {\n    const iterations = Math.ceil((bits >> 3) / 32);\n    const res = new Uint8Array(iterations * 32);\n    for(let iter = 0; iter < iterations; iter++){\n        const buf = new Uint8Array(4 + secret.length + value.length);\n        buf.set(uint32be(iter + 1));\n        buf.set(secret, 4);\n        buf.set(value, 4 + secret.length);\n        res.set(await (0, digest_js_1.default)(\"sha256\", buf), iter * 32);\n    }\n    return res.slice(0, bits >> 3);\n}\nexports.concatKdf = concatKdf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9idWZmZXJfdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHQSxzQkFBc0IsR0FBR0EsZ0JBQWdCLEdBQUdBLGdCQUFnQixHQUFHQSxXQUFXLEdBQUdBLGNBQWMsR0FBR0EsZUFBZSxHQUFHQSxlQUFlLEdBQUcsS0FBSztBQUMzSixNQUFNVSxjQUFjQyxtQkFBT0EsQ0FBQyxrSEFBc0I7QUFDbERYLGVBQWUsR0FBRyxJQUFJWTtBQUN0QlosZUFBZSxHQUFHLElBQUlhO0FBQ3RCLE1BQU1DLFlBQVksS0FBSztBQUN2QixTQUFTUCxPQUFPLEdBQUdRLE9BQU87SUFDdEIsTUFBTUMsT0FBT0QsUUFBUUUsTUFBTSxDQUFDLENBQUNDLEtBQUssRUFBRUMsTUFBTSxFQUFFLEdBQUtELE1BQU1DLFFBQVE7SUFDL0QsTUFBTUMsTUFBTSxJQUFJQyxXQUFXTDtJQUMzQixJQUFJTSxJQUFJO0lBQ1JQLFFBQVFRLE9BQU8sQ0FBQyxDQUFDQztRQUNiSixJQUFJSyxHQUFHLENBQUNELFFBQVFGO1FBQ2hCQSxLQUFLRSxPQUFPTCxNQUFNO0lBQ3RCO0lBQ0EsT0FBT0M7QUFDWDtBQUNBcEIsY0FBYyxHQUFHTztBQUNqQixTQUFTRCxJQUFJb0IsR0FBRyxFQUFFQyxRQUFRO0lBQ3RCLE9BQU9wQixPQUFPUCxRQUFRUyxPQUFPLENBQUNtQixNQUFNLENBQUNGLE1BQU0sSUFBSUwsV0FBVztRQUFDO0tBQUUsR0FBR007QUFDcEU7QUFDQTNCLFdBQVcsR0FBR007QUFDZCxTQUFTdUIsY0FBY1QsR0FBRyxFQUFFbkIsS0FBSyxFQUFFNkIsTUFBTTtJQUNyQyxJQUFJN0IsUUFBUSxLQUFLQSxTQUFTYSxXQUFXO1FBQ2pDLE1BQU0sSUFBSWlCLFdBQVcsQ0FBQywwQkFBMEIsRUFBRWpCLFlBQVksRUFBRSxXQUFXLEVBQUViLE1BQU0sQ0FBQztJQUN4RjtJQUNBbUIsSUFBSUssR0FBRyxDQUFDO1FBQUN4QixVQUFVO1FBQUlBLFVBQVU7UUFBSUEsVUFBVTtRQUFHQSxRQUFRO0tBQUssRUFBRTZCO0FBQ3JFO0FBQ0EsU0FBU3pCLFNBQVNKLEtBQUs7SUFDbkIsTUFBTStCLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ2pDLFFBQVFhO0lBQ2hDLE1BQU1xQixNQUFNbEMsUUFBUWE7SUFDcEIsTUFBTU0sTUFBTSxJQUFJQyxXQUFXO0lBQzNCUSxjQUFjVCxLQUFLWSxNQUFNO0lBQ3pCSCxjQUFjVCxLQUFLZSxLQUFLO0lBQ3hCLE9BQU9mO0FBQ1g7QUFDQXBCLGdCQUFnQixHQUFHSztBQUNuQixTQUFTRCxTQUFTSCxLQUFLO0lBQ25CLE1BQU1tQixNQUFNLElBQUlDLFdBQVc7SUFDM0JRLGNBQWNULEtBQUtuQjtJQUNuQixPQUFPbUI7QUFDWDtBQUNBcEIsZ0JBQWdCLEdBQUdJO0FBQ25CLFNBQVNELGVBQWVpQyxLQUFLO0lBQ3pCLE9BQU83QixPQUFPSCxTQUFTZ0MsTUFBTWpCLE1BQU0sR0FBR2lCO0FBQzFDO0FBQ0FwQyxzQkFBc0IsR0FBR0c7QUFDekIsZUFBZUQsVUFBVW1DLE1BQU0sRUFBRUMsSUFBSSxFQUFFckMsS0FBSztJQUN4QyxNQUFNc0MsYUFBYU4sS0FBS08sSUFBSSxDQUFDLENBQUNGLFFBQVEsS0FBSztJQUMzQyxNQUFNRyxNQUFNLElBQUlwQixXQUFXa0IsYUFBYTtJQUN4QyxJQUFLLElBQUlHLE9BQU8sR0FBR0EsT0FBT0gsWUFBWUcsT0FBUTtRQUMxQyxNQUFNdEIsTUFBTSxJQUFJQyxXQUFXLElBQUlnQixPQUFPbEIsTUFBTSxHQUFHbEIsTUFBTWtCLE1BQU07UUFDM0RDLElBQUlLLEdBQUcsQ0FBQ3JCLFNBQVNzQyxPQUFPO1FBQ3hCdEIsSUFBSUssR0FBRyxDQUFDWSxRQUFRO1FBQ2hCakIsSUFBSUssR0FBRyxDQUFDeEIsT0FBTyxJQUFJb0MsT0FBT2xCLE1BQU07UUFDaENzQixJQUFJaEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHZixZQUFZaUMsT0FBTyxFQUFFLFVBQVV2QixNQUFNc0IsT0FBTztJQUNsRTtJQUNBLE9BQU9ELElBQUlHLEtBQUssQ0FBQyxHQUFHTixRQUFRO0FBQ2hDO0FBQ0F0QyxpQkFBaUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvYnVmZmVyX3V0aWxzLmpzP2YxYzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmNhdEtkZiA9IGV4cG9ydHMubGVuZ3RoQW5kSW5wdXQgPSBleHBvcnRzLnVpbnQzMmJlID0gZXhwb3J0cy51aW50NjRiZSA9IGV4cG9ydHMucDJzID0gZXhwb3J0cy5jb25jYXQgPSBleHBvcnRzLmRlY29kZXIgPSBleHBvcnRzLmVuY29kZXIgPSB2b2lkIDA7XG5jb25zdCBkaWdlc3RfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2RpZ2VzdC5qc1wiKTtcbmV4cG9ydHMuZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuZXhwb3J0cy5kZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5jb25zdCBNQVhfSU5UMzIgPSAyICoqIDMyO1xuZnVuY3Rpb24gY29uY2F0KC4uLmJ1ZmZlcnMpIHtcbiAgICBjb25zdCBzaXplID0gYnVmZmVycy5yZWR1Y2UoKGFjYywgeyBsZW5ndGggfSkgPT4gYWNjICsgbGVuZ3RoLCAwKTtcbiAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICBsZXQgaSA9IDA7XG4gICAgYnVmZmVycy5mb3JFYWNoKChidWZmZXIpID0+IHtcbiAgICAgICAgYnVmLnNldChidWZmZXIsIGkpO1xuICAgICAgICBpICs9IGJ1ZmZlci5sZW5ndGg7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuZnVuY3Rpb24gcDJzKGFsZywgcDJzSW5wdXQpIHtcbiAgICByZXR1cm4gY29uY2F0KGV4cG9ydHMuZW5jb2Rlci5lbmNvZGUoYWxnKSwgbmV3IFVpbnQ4QXJyYXkoWzBdKSwgcDJzSW5wdXQpO1xufVxuZXhwb3J0cy5wMnMgPSBwMnM7XG5mdW5jdGlvbiB3cml0ZVVJbnQzMkJFKGJ1ZiwgdmFsdWUsIG9mZnNldCkge1xuICAgIGlmICh2YWx1ZSA8IDAgfHwgdmFsdWUgPj0gTUFYX0lOVDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB2YWx1ZSBtdXN0IGJlID49IDAgYW5kIDw9ICR7TUFYX0lOVDMyIC0gMX0uIFJlY2VpdmVkICR7dmFsdWV9YCk7XG4gICAgfVxuICAgIGJ1Zi5zZXQoW3ZhbHVlID4+PiAyNCwgdmFsdWUgPj4+IDE2LCB2YWx1ZSA+Pj4gOCwgdmFsdWUgJiAweGZmXSwgb2Zmc2V0KTtcbn1cbmZ1bmN0aW9uIHVpbnQ2NGJlKHZhbHVlKSB7XG4gICAgY29uc3QgaGlnaCA9IE1hdGguZmxvb3IodmFsdWUgLyBNQVhfSU5UMzIpO1xuICAgIGNvbnN0IGxvdyA9IHZhbHVlICUgTUFYX0lOVDMyO1xuICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDgpO1xuICAgIHdyaXRlVUludDMyQkUoYnVmLCBoaWdoLCAwKTtcbiAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgbG93LCA0KTtcbiAgICByZXR1cm4gYnVmO1xufVxuZXhwb3J0cy51aW50NjRiZSA9IHVpbnQ2NGJlO1xuZnVuY3Rpb24gdWludDMyYmUodmFsdWUpIHtcbiAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgdmFsdWUpO1xuICAgIHJldHVybiBidWY7XG59XG5leHBvcnRzLnVpbnQzMmJlID0gdWludDMyYmU7XG5mdW5jdGlvbiBsZW5ndGhBbmRJbnB1dChpbnB1dCkge1xuICAgIHJldHVybiBjb25jYXQodWludDMyYmUoaW5wdXQubGVuZ3RoKSwgaW5wdXQpO1xufVxuZXhwb3J0cy5sZW5ndGhBbmRJbnB1dCA9IGxlbmd0aEFuZElucHV0O1xuYXN5bmMgZnVuY3Rpb24gY29uY2F0S2RmKHNlY3JldCwgYml0cywgdmFsdWUpIHtcbiAgICBjb25zdCBpdGVyYXRpb25zID0gTWF0aC5jZWlsKChiaXRzID4+IDMpIC8gMzIpO1xuICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KGl0ZXJhdGlvbnMgKiAzMik7XG4gICAgZm9yIChsZXQgaXRlciA9IDA7IGl0ZXIgPCBpdGVyYXRpb25zOyBpdGVyKyspIHtcbiAgICAgICAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkoNCArIHNlY3JldC5sZW5ndGggKyB2YWx1ZS5sZW5ndGgpO1xuICAgICAgICBidWYuc2V0KHVpbnQzMmJlKGl0ZXIgKyAxKSk7XG4gICAgICAgIGJ1Zi5zZXQoc2VjcmV0LCA0KTtcbiAgICAgICAgYnVmLnNldCh2YWx1ZSwgNCArIHNlY3JldC5sZW5ndGgpO1xuICAgICAgICByZXMuc2V0KGF3YWl0ICgwLCBkaWdlc3RfanNfMS5kZWZhdWx0KSgnc2hhMjU2JywgYnVmKSwgaXRlciAqIDMyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5zbGljZSgwLCBiaXRzID4+IDMpO1xufVxuZXhwb3J0cy5jb25jYXRLZGYgPSBjb25jYXRLZGY7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb25jYXRLZGYiLCJsZW5ndGhBbmRJbnB1dCIsInVpbnQzMmJlIiwidWludDY0YmUiLCJwMnMiLCJjb25jYXQiLCJkZWNvZGVyIiwiZW5jb2RlciIsImRpZ2VzdF9qc18xIiwicmVxdWlyZSIsIlRleHRFbmNvZGVyIiwiVGV4dERlY29kZXIiLCJNQVhfSU5UMzIiLCJidWZmZXJzIiwic2l6ZSIsInJlZHVjZSIsImFjYyIsImxlbmd0aCIsImJ1ZiIsIlVpbnQ4QXJyYXkiLCJpIiwiZm9yRWFjaCIsImJ1ZmZlciIsInNldCIsImFsZyIsInAyc0lucHV0IiwiZW5jb2RlIiwid3JpdGVVSW50MzJCRSIsIm9mZnNldCIsIlJhbmdlRXJyb3IiLCJoaWdoIiwiTWF0aCIsImZsb29yIiwibG93IiwiaW5wdXQiLCJzZWNyZXQiLCJiaXRzIiwiaXRlcmF0aW9ucyIsImNlaWwiLCJyZXMiLCJpdGVyIiwiZGVmYXVsdCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.bitLength = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst random_js_1 = __webpack_require__(/*! ../runtime/random.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\");\nfunction bitLength(alg) {\n    switch(alg){\n        case \"A128GCM\":\n            return 128;\n        case \"A192GCM\":\n            return 192;\n        case \"A256GCM\":\n        case \"A128CBC-HS256\":\n            return 256;\n        case \"A192CBC-HS384\":\n            return 384;\n        case \"A256CBC-HS512\":\n            return 512;\n        default:\n            throw new errors_js_1.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);\n    }\n}\nexports.bitLength = bitLength;\nexports[\"default\"] = (alg)=>(0, random_js_1.default)(new Uint8Array(bitLength(alg) >> 3));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jZWsuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsTUFBTUcsY0FBY0MsbUJBQU9BLENBQUMsNEdBQW1CO0FBQy9DLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLGtIQUFzQjtBQUNsRCxTQUFTRixVQUFVSSxHQUFHO0lBQ2xCLE9BQVFBO1FBQ0osS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7UUFDTCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWDtZQUNJLE1BQU0sSUFBSUgsWUFBWUksZ0JBQWdCLENBQUMsQ0FBQywyQkFBMkIsRUFBRUQsSUFBSSxDQUFDO0lBQ2xGO0FBQ0o7QUFDQU4saUJBQWlCLEdBQUdFO0FBQ3BCRixrQkFBZSxHQUFHLENBQUNNLE1BQVEsQ0FBQyxHQUFHRCxZQUFZRyxPQUFPLEVBQUUsSUFBSUMsV0FBV1AsVUFBVUksUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jZWsuanM/MmIyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYml0TGVuZ3RoID0gdm9pZCAwO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCByYW5kb21fanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL3JhbmRvbS5qc1wiKTtcbmZ1bmN0aW9uIGJpdExlbmd0aChhbGcpIHtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdBMTI4R0NNJzpcbiAgICAgICAgICAgIHJldHVybiAxMjg7XG4gICAgICAgIGNhc2UgJ0ExOTJHQ00nOlxuICAgICAgICAgICAgcmV0dXJuIDE5MjtcbiAgICAgICAgY2FzZSAnQTI1NkdDTSc6XG4gICAgICAgIGNhc2UgJ0ExMjhDQkMtSFMyNTYnOlxuICAgICAgICAgICAgcmV0dXJuIDI1NjtcbiAgICAgICAgY2FzZSAnQTE5MkNCQy1IUzM4NCc6XG4gICAgICAgICAgICByZXR1cm4gMzg0O1xuICAgICAgICBjYXNlICdBMjU2Q0JDLUhTNTEyJzpcbiAgICAgICAgICAgIHJldHVybiA1MTI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgVW5zdXBwb3J0ZWQgSldFIEFsZ29yaXRobTogJHthbGd9YCk7XG4gICAgfVxufVxuZXhwb3J0cy5iaXRMZW5ndGggPSBiaXRMZW5ndGg7XG5leHBvcnRzLmRlZmF1bHQgPSAoYWxnKSA9PiAoMCwgcmFuZG9tX2pzXzEuZGVmYXVsdCkobmV3IFVpbnQ4QXJyYXkoYml0TGVuZ3RoKGFsZykgPj4gMykpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYml0TGVuZ3RoIiwiZXJyb3JzX2pzXzEiLCJyZXF1aXJlIiwicmFuZG9tX2pzXzEiLCJhbGciLCJKT1NFTm90U3VwcG9ydGVkIiwiZGVmYXVsdCIsIlVpbnQ4QXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst iv_js_1 = __webpack_require__(/*! ./iv.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js\");\nconst checkIvLength = (enc, iv)=>{\n    if (iv.length << 3 !== (0, iv_js_1.bitLength)(enc)) {\n        throw new errors_js_1.JWEInvalid(\"Invalid Initialization Vector length\");\n    }\n};\nexports[\"default\"] = checkIvLength;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19pdl9sZW5ndGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsY0FBY0MsbUJBQU9BLENBQUMsNEdBQW1CO0FBQy9DLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLDZGQUFTO0FBQ2pDLE1BQU1FLGdCQUFnQixDQUFDQyxLQUFLQztJQUN4QixJQUFJQSxHQUFHQyxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUdKLFFBQVFLLFNBQVMsRUFBRUgsTUFBTTtRQUNoRCxNQUFNLElBQUlKLFlBQVlRLFVBQVUsQ0FBQztJQUNyQztBQUNKO0FBQ0FWLGtCQUFlLEdBQUdLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL2NoZWNrX2l2X2xlbmd0aC5qcz9kYmIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBpdl9qc18xID0gcmVxdWlyZShcIi4vaXYuanNcIik7XG5jb25zdCBjaGVja0l2TGVuZ3RoID0gKGVuYywgaXYpID0+IHtcbiAgICBpZiAoaXYubGVuZ3RoIDw8IDMgIT09ICgwLCBpdl9qc18xLmJpdExlbmd0aCkoZW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSW52YWxpZCBJbml0aWFsaXphdGlvbiBWZWN0b3IgbGVuZ3RoJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrSXZMZW5ndGg7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlcnJvcnNfanNfMSIsInJlcXVpcmUiLCJpdl9qc18xIiwiY2hlY2tJdkxlbmd0aCIsImVuYyIsIml2IiwibGVuZ3RoIiwiYml0TGVuZ3RoIiwiSldFSW52YWxpZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst invalid_key_input_js_1 = __webpack_require__(/*! ./invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ../runtime/is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst symmetricTypeCheck = (alg, key)=>{\n    if (key instanceof Uint8Array) return;\n    if (!(0, is_key_like_js_1.default)(key)) {\n        throw new TypeError((0, invalid_key_input_js_1.withAlg)(alg, key, ...is_key_like_js_1.types, \"Uint8Array\"));\n    }\n    if (key.type !== \"secret\") {\n        throw new TypeError(`${is_key_like_js_1.types.join(\" or \")} instances for symmetric algorithms must be of type \"secret\"`);\n    }\n};\nconst asymmetricTypeCheck = (alg, key, usage)=>{\n    if (!(0, is_key_like_js_1.default)(key)) {\n        throw new TypeError((0, invalid_key_input_js_1.withAlg)(alg, key, ...is_key_like_js_1.types));\n    }\n    if (key.type === \"secret\") {\n        throw new TypeError(`${is_key_like_js_1.types.join(\" or \")} instances for asymmetric algorithms must not be of type \"secret\"`);\n    }\n    if (usage === \"sign\" && key.type === \"public\") {\n        throw new TypeError(`${is_key_like_js_1.types.join(\" or \")} instances for asymmetric algorithm signing must be of type \"private\"`);\n    }\n    if (usage === \"decrypt\" && key.type === \"public\") {\n        throw new TypeError(`${is_key_like_js_1.types.join(\" or \")} instances for asymmetric algorithm decryption must be of type \"private\"`);\n    }\n    if (key.algorithm && usage === \"verify\" && key.type === \"private\") {\n        throw new TypeError(`${is_key_like_js_1.types.join(\" or \")} instances for asymmetric algorithm verifying must be of type \"public\"`);\n    }\n    if (key.algorithm && usage === \"encrypt\" && key.type === \"private\") {\n        throw new TypeError(`${is_key_like_js_1.types.join(\" or \")} instances for asymmetric algorithm encryption must be of type \"public\"`);\n    }\n};\nconst checkKeyType = (alg, key, usage)=>{\n    const symmetric = alg.startsWith(\"HS\") || alg === \"dir\" || alg.startsWith(\"PBES2\") || /^A\\d{3}(?:GCM)?KW$/.test(alg);\n    if (symmetric) {\n        symmetricTypeCheck(alg, key);\n    } else {\n        asymmetricTypeCheck(alg, key, usage);\n    }\n};\nexports[\"default\"] = checkKeyType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19rZXlfdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyx5QkFBeUJDLG1CQUFPQSxDQUFDLDJIQUF3QjtBQUMvRCxNQUFNQyxtQkFBbUJELG1CQUFPQSxDQUFDLDRIQUEyQjtBQUM1RCxNQUFNRSxxQkFBcUIsQ0FBQ0MsS0FBS0M7SUFDN0IsSUFBSUEsZUFBZUMsWUFDZjtJQUNKLElBQUksQ0FBQyxDQUFDLEdBQUdKLGlCQUFpQkssT0FBTyxFQUFFRixNQUFNO1FBQ3JDLE1BQU0sSUFBSUcsVUFBVSxDQUFDLEdBQUdSLHVCQUF1QlMsT0FBTyxFQUFFTCxLQUFLQyxRQUFRSCxpQkFBaUJRLEtBQUssRUFBRTtJQUNqRztJQUNBLElBQUlMLElBQUlNLElBQUksS0FBSyxVQUFVO1FBQ3ZCLE1BQU0sSUFBSUgsVUFBVSxDQUFDLEVBQUVOLGlCQUFpQlEsS0FBSyxDQUFDRSxJQUFJLENBQUMsUUFBUSw0REFBNEQsQ0FBQztJQUM1SDtBQUNKO0FBQ0EsTUFBTUMsc0JBQXNCLENBQUNULEtBQUtDLEtBQUtTO0lBQ25DLElBQUksQ0FBQyxDQUFDLEdBQUdaLGlCQUFpQkssT0FBTyxFQUFFRixNQUFNO1FBQ3JDLE1BQU0sSUFBSUcsVUFBVSxDQUFDLEdBQUdSLHVCQUF1QlMsT0FBTyxFQUFFTCxLQUFLQyxRQUFRSCxpQkFBaUJRLEtBQUs7SUFDL0Y7SUFDQSxJQUFJTCxJQUFJTSxJQUFJLEtBQUssVUFBVTtRQUN2QixNQUFNLElBQUlILFVBQVUsQ0FBQyxFQUFFTixpQkFBaUJRLEtBQUssQ0FBQ0UsSUFBSSxDQUFDLFFBQVEsaUVBQWlFLENBQUM7SUFDakk7SUFDQSxJQUFJRSxVQUFVLFVBQVVULElBQUlNLElBQUksS0FBSyxVQUFVO1FBQzNDLE1BQU0sSUFBSUgsVUFBVSxDQUFDLEVBQUVOLGlCQUFpQlEsS0FBSyxDQUFDRSxJQUFJLENBQUMsUUFBUSxxRUFBcUUsQ0FBQztJQUNySTtJQUNBLElBQUlFLFVBQVUsYUFBYVQsSUFBSU0sSUFBSSxLQUFLLFVBQVU7UUFDOUMsTUFBTSxJQUFJSCxVQUFVLENBQUMsRUFBRU4saUJBQWlCUSxLQUFLLENBQUNFLElBQUksQ0FBQyxRQUFRLHdFQUF3RSxDQUFDO0lBQ3hJO0lBQ0EsSUFBSVAsSUFBSVUsU0FBUyxJQUFJRCxVQUFVLFlBQVlULElBQUlNLElBQUksS0FBSyxXQUFXO1FBQy9ELE1BQU0sSUFBSUgsVUFBVSxDQUFDLEVBQUVOLGlCQUFpQlEsS0FBSyxDQUFDRSxJQUFJLENBQUMsUUFBUSxzRUFBc0UsQ0FBQztJQUN0STtJQUNBLElBQUlQLElBQUlVLFNBQVMsSUFBSUQsVUFBVSxhQUFhVCxJQUFJTSxJQUFJLEtBQUssV0FBVztRQUNoRSxNQUFNLElBQUlILFVBQVUsQ0FBQyxFQUFFTixpQkFBaUJRLEtBQUssQ0FBQ0UsSUFBSSxDQUFDLFFBQVEsdUVBQXVFLENBQUM7SUFDdkk7QUFDSjtBQUNBLE1BQU1JLGVBQWUsQ0FBQ1osS0FBS0MsS0FBS1M7SUFDNUIsTUFBTUcsWUFBWWIsSUFBSWMsVUFBVSxDQUFDLFNBQzdCZCxRQUFRLFNBQ1JBLElBQUljLFVBQVUsQ0FBQyxZQUNmLHFCQUFxQkMsSUFBSSxDQUFDZjtJQUM5QixJQUFJYSxXQUFXO1FBQ1hkLG1CQUFtQkMsS0FBS0M7SUFDNUIsT0FDSztRQUNEUSxvQkFBb0JULEtBQUtDLEtBQUtTO0lBQ2xDO0FBQ0o7QUFDQWhCLGtCQUFlLEdBQUdrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19rZXlfdHlwZS5qcz80NWYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaW52YWxpZF9rZXlfaW5wdXRfanNfMSA9IHJlcXVpcmUoXCIuL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2lzX2tleV9saWtlLmpzXCIpO1xuY29uc3Qgc3ltbWV0cmljVHlwZUNoZWNrID0gKGFsZywga2V5KSA9PiB7XG4gICAgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoISgwLCBpc19rZXlfbGlrZV9qc18xLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS53aXRoQWxnKShhbGcsIGtleSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcywgJ1VpbnQ4QXJyYXknKSk7XG4gICAgfVxuICAgIGlmIChrZXkudHlwZSAhPT0gJ3NlY3JldCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtpc19rZXlfbGlrZV9qc18xLnR5cGVzLmpvaW4oJyBvciAnKX0gaW5zdGFuY2VzIGZvciBzeW1tZXRyaWMgYWxnb3JpdGhtcyBtdXN0IGJlIG9mIHR5cGUgXCJzZWNyZXRcImApO1xuICAgIH1cbn07XG5jb25zdCBhc3ltbWV0cmljVHlwZUNoZWNrID0gKGFsZywga2V5LCB1c2FnZSkgPT4ge1xuICAgIGlmICghKDAsIGlzX2tleV9saWtlX2pzXzEuZGVmYXVsdCkoa2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLndpdGhBbGcpKGFsZywga2V5LCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzKSk7XG4gICAgfVxuICAgIGlmIChrZXkudHlwZSA9PT0gJ3NlY3JldCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtpc19rZXlfbGlrZV9qc18xLnR5cGVzLmpvaW4oJyBvciAnKX0gaW5zdGFuY2VzIGZvciBhc3ltbWV0cmljIGFsZ29yaXRobXMgbXVzdCBub3QgYmUgb2YgdHlwZSBcInNlY3JldFwiYCk7XG4gICAgfVxuICAgIGlmICh1c2FnZSA9PT0gJ3NpZ24nICYmIGtleS50eXBlID09PSAncHVibGljJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2lzX2tleV9saWtlX2pzXzEudHlwZXMuam9pbignIG9yICcpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtIHNpZ25pbmcgbXVzdCBiZSBvZiB0eXBlIFwicHJpdmF0ZVwiYCk7XG4gICAgfVxuICAgIGlmICh1c2FnZSA9PT0gJ2RlY3J5cHQnICYmIGtleS50eXBlID09PSAncHVibGljJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2lzX2tleV9saWtlX2pzXzEudHlwZXMuam9pbignIG9yICcpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtIGRlY3J5cHRpb24gbXVzdCBiZSBvZiB0eXBlIFwicHJpdmF0ZVwiYCk7XG4gICAgfVxuICAgIGlmIChrZXkuYWxnb3JpdGhtICYmIHVzYWdlID09PSAndmVyaWZ5JyAmJiBrZXkudHlwZSA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7aXNfa2V5X2xpa2VfanNfMS50eXBlcy5qb2luKCcgb3IgJyl9IGluc3RhbmNlcyBmb3IgYXN5bW1ldHJpYyBhbGdvcml0aG0gdmVyaWZ5aW5nIG11c3QgYmUgb2YgdHlwZSBcInB1YmxpY1wiYCk7XG4gICAgfVxuICAgIGlmIChrZXkuYWxnb3JpdGhtICYmIHVzYWdlID09PSAnZW5jcnlwdCcgJiYga2V5LnR5cGUgPT09ICdwcml2YXRlJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2lzX2tleV9saWtlX2pzXzEudHlwZXMuam9pbignIG9yICcpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtIGVuY3J5cHRpb24gbXVzdCBiZSBvZiB0eXBlIFwicHVibGljXCJgKTtcbiAgICB9XG59O1xuY29uc3QgY2hlY2tLZXlUeXBlID0gKGFsZywga2V5LCB1c2FnZSkgPT4ge1xuICAgIGNvbnN0IHN5bW1ldHJpYyA9IGFsZy5zdGFydHNXaXRoKCdIUycpIHx8XG4gICAgICAgIGFsZyA9PT0gJ2RpcicgfHxcbiAgICAgICAgYWxnLnN0YXJ0c1dpdGgoJ1BCRVMyJykgfHxcbiAgICAgICAgL15BXFxkezN9KD86R0NNKT9LVyQvLnRlc3QoYWxnKTtcbiAgICBpZiAoc3ltbWV0cmljKSB7XG4gICAgICAgIHN5bW1ldHJpY1R5cGVDaGVjayhhbGcsIGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhc3ltbWV0cmljVHlwZUNoZWNrKGFsZywga2V5LCB1c2FnZSk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrS2V5VHlwZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImludmFsaWRfa2V5X2lucHV0X2pzXzEiLCJyZXF1aXJlIiwiaXNfa2V5X2xpa2VfanNfMSIsInN5bW1ldHJpY1R5cGVDaGVjayIsImFsZyIsImtleSIsIlVpbnQ4QXJyYXkiLCJkZWZhdWx0IiwiVHlwZUVycm9yIiwid2l0aEFsZyIsInR5cGVzIiwidHlwZSIsImpvaW4iLCJhc3ltbWV0cmljVHlwZUNoZWNrIiwidXNhZ2UiLCJhbGdvcml0aG0iLCJjaGVja0tleVR5cGUiLCJzeW1tZXRyaWMiLCJzdGFydHNXaXRoIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_p2s.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_p2s.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction checkP2s(p2s) {\n    if (!(p2s instanceof Uint8Array) || p2s.length < 8) {\n        throw new errors_js_1.JWEInvalid(\"PBES2 Salt Input must be 8 or more octets\");\n    }\n}\nexports[\"default\"] = checkP2s;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19wMnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsY0FBY0MsbUJBQU9BLENBQUMsNEdBQW1CO0FBQy9DLFNBQVNDLFNBQVNDLEdBQUc7SUFDakIsSUFBSSxDQUFFQSxDQUFBQSxlQUFlQyxVQUFTLEtBQU1ELElBQUlFLE1BQU0sR0FBRyxHQUFHO1FBQ2hELE1BQU0sSUFBSUwsWUFBWU0sVUFBVSxDQUFDO0lBQ3JDO0FBQ0o7QUFDQVIsa0JBQWUsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvY2hlY2tfcDJzLmpzP2QzMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmZ1bmN0aW9uIGNoZWNrUDJzKHAycykge1xuICAgIGlmICghKHAycyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHx8IHAycy5sZW5ndGggPCA4KSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdQQkVTMiBTYWx0IElucHV0IG11c3QgYmUgOCBvciBtb3JlIG9jdGV0cycpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrUDJzO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXJyb3JzX2pzXzEiLCJyZXF1aXJlIiwiY2hlY2tQMnMiLCJwMnMiLCJVaW50OEFycmF5IiwibGVuZ3RoIiwiSldFSW52YWxpZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_p2s.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.checkEncCryptoKey = exports.checkSigCryptoKey = void 0;\nfunction unusable(name, prop = \"algorithm.name\") {\n    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);\n}\nfunction isAlgorithm(algorithm, name) {\n    return algorithm.name === name;\n}\nfunction getHashLength(hash) {\n    return parseInt(hash.name.slice(4), 10);\n}\nfunction getNamedCurve(alg) {\n    switch(alg){\n        case \"ES256\":\n            return \"P-256\";\n        case \"ES384\":\n            return \"P-384\";\n        case \"ES512\":\n            return \"P-521\";\n        default:\n            throw new Error(\"unreachable\");\n    }\n}\nfunction checkUsage(key, usages) {\n    if (usages.length && !usages.some((expected)=>key.usages.includes(expected))) {\n        let msg = \"CryptoKey does not support this operation, its usages must include \";\n        if (usages.length > 2) {\n            const last = usages.pop();\n            msg += `one of ${usages.join(\", \")}, or ${last}.`;\n        } else if (usages.length === 2) {\n            msg += `one of ${usages[0]} or ${usages[1]}.`;\n        } else {\n            msg += `${usages[0]}.`;\n        }\n        throw new TypeError(msg);\n    }\n}\nfunction checkSigCryptoKey(key, alg, ...usages) {\n    switch(alg){\n        case \"HS256\":\n        case \"HS384\":\n        case \"HS512\":\n            {\n                if (!isAlgorithm(key.algorithm, \"HMAC\")) throw unusable(\"HMAC\");\n                const expected = parseInt(alg.slice(2), 10);\n                const actual = getHashLength(key.algorithm.hash);\n                if (actual !== expected) throw unusable(`SHA-${expected}`, \"algorithm.hash\");\n                break;\n            }\n        case \"RS256\":\n        case \"RS384\":\n        case \"RS512\":\n            {\n                if (!isAlgorithm(key.algorithm, \"RSASSA-PKCS1-v1_5\")) throw unusable(\"RSASSA-PKCS1-v1_5\");\n                const expected = parseInt(alg.slice(2), 10);\n                const actual = getHashLength(key.algorithm.hash);\n                if (actual !== expected) throw unusable(`SHA-${expected}`, \"algorithm.hash\");\n                break;\n            }\n        case \"PS256\":\n        case \"PS384\":\n        case \"PS512\":\n            {\n                if (!isAlgorithm(key.algorithm, \"RSA-PSS\")) throw unusable(\"RSA-PSS\");\n                const expected = parseInt(alg.slice(2), 10);\n                const actual = getHashLength(key.algorithm.hash);\n                if (actual !== expected) throw unusable(`SHA-${expected}`, \"algorithm.hash\");\n                break;\n            }\n        case \"EdDSA\":\n            {\n                if (key.algorithm.name !== \"Ed25519\" && key.algorithm.name !== \"Ed448\") {\n                    throw unusable(\"Ed25519 or Ed448\");\n                }\n                break;\n            }\n        case \"ES256\":\n        case \"ES384\":\n        case \"ES512\":\n            {\n                if (!isAlgorithm(key.algorithm, \"ECDSA\")) throw unusable(\"ECDSA\");\n                const expected = getNamedCurve(alg);\n                const actual = key.algorithm.namedCurve;\n                if (actual !== expected) throw unusable(expected, \"algorithm.namedCurve\");\n                break;\n            }\n        default:\n            throw new TypeError(\"CryptoKey does not support this operation\");\n    }\n    checkUsage(key, usages);\n}\nexports.checkSigCryptoKey = checkSigCryptoKey;\nfunction checkEncCryptoKey(key, alg, ...usages) {\n    switch(alg){\n        case \"A128GCM\":\n        case \"A192GCM\":\n        case \"A256GCM\":\n            {\n                if (!isAlgorithm(key.algorithm, \"AES-GCM\")) throw unusable(\"AES-GCM\");\n                const expected = parseInt(alg.slice(1, 4), 10);\n                const actual = key.algorithm.length;\n                if (actual !== expected) throw unusable(expected, \"algorithm.length\");\n                break;\n            }\n        case \"A128KW\":\n        case \"A192KW\":\n        case \"A256KW\":\n            {\n                if (!isAlgorithm(key.algorithm, \"AES-KW\")) throw unusable(\"AES-KW\");\n                const expected = parseInt(alg.slice(1, 4), 10);\n                const actual = key.algorithm.length;\n                if (actual !== expected) throw unusable(expected, \"algorithm.length\");\n                break;\n            }\n        case \"ECDH\":\n            {\n                switch(key.algorithm.name){\n                    case \"ECDH\":\n                    case \"X25519\":\n                    case \"X448\":\n                        break;\n                    default:\n                        throw unusable(\"ECDH, X25519, or X448\");\n                }\n                break;\n            }\n        case \"PBES2-HS256+A128KW\":\n        case \"PBES2-HS384+A192KW\":\n        case \"PBES2-HS512+A256KW\":\n            if (!isAlgorithm(key.algorithm, \"PBKDF2\")) throw unusable(\"PBKDF2\");\n            break;\n        case \"RSA-OAEP\":\n        case \"RSA-OAEP-256\":\n        case \"RSA-OAEP-384\":\n        case \"RSA-OAEP-512\":\n            {\n                if (!isAlgorithm(key.algorithm, \"RSA-OAEP\")) throw unusable(\"RSA-OAEP\");\n                const expected = parseInt(alg.slice(9), 10) || 1;\n                const actual = getHashLength(key.algorithm.hash);\n                if (actual !== expected) throw unusable(`SHA-${expected}`, \"algorithm.hash\");\n                break;\n            }\n        default:\n            throw new TypeError(\"CryptoKey does not support this operation\");\n    }\n    checkUsage(key, usages);\n}\nexports.checkEncCryptoKey = checkEncCryptoKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/decrypt_key_management.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/decrypt_key_management.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst aeskw_js_1 = __webpack_require__(/*! ../runtime/aeskw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js\");\nconst ECDH = __webpack_require__(/*! ../runtime/ecdhes.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js\");\nconst pbes2kw_js_1 = __webpack_require__(/*! ../runtime/pbes2kw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js\");\nconst rsaes_js_1 = __webpack_require__(/*! ../runtime/rsaes.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst cek_js_1 = __webpack_require__(/*! ../lib/cek.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\");\nconst import_js_1 = __webpack_require__(/*! ../key/import.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\");\nconst check_key_type_js_1 = __webpack_require__(/*! ./check_key_type.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\");\nconst is_object_js_1 = __webpack_require__(/*! ./is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst aesgcmkw_js_1 = __webpack_require__(/*! ./aesgcmkw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js\");\nasync function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {\n    (0, check_key_type_js_1.default)(alg, key, \"decrypt\");\n    switch(alg){\n        case \"dir\":\n            {\n                if (encryptedKey !== undefined) throw new errors_js_1.JWEInvalid(\"Encountered unexpected JWE Encrypted Key\");\n                return key;\n            }\n        case \"ECDH-ES\":\n            if (encryptedKey !== undefined) throw new errors_js_1.JWEInvalid(\"Encountered unexpected JWE Encrypted Key\");\n        case \"ECDH-ES+A128KW\":\n        case \"ECDH-ES+A192KW\":\n        case \"ECDH-ES+A256KW\":\n            {\n                if (!(0, is_object_js_1.default)(joseHeader.epk)) throw new errors_js_1.JWEInvalid(`JOSE Header \"epk\" (Ephemeral Public Key) missing or invalid`);\n                if (!ECDH.ecdhAllowed(key)) throw new errors_js_1.JOSENotSupported(\"ECDH with the provided key is not allowed or not supported by your javascript runtime\");\n                const epk = await (0, import_js_1.importJWK)(joseHeader.epk, alg);\n                let partyUInfo;\n                let partyVInfo;\n                if (joseHeader.apu !== undefined) {\n                    if (typeof joseHeader.apu !== \"string\") throw new errors_js_1.JWEInvalid(`JOSE Header \"apu\" (Agreement PartyUInfo) invalid`);\n                    try {\n                        partyUInfo = (0, base64url_js_1.decode)(joseHeader.apu);\n                    } catch  {\n                        throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the apu\");\n                    }\n                }\n                if (joseHeader.apv !== undefined) {\n                    if (typeof joseHeader.apv !== \"string\") throw new errors_js_1.JWEInvalid(`JOSE Header \"apv\" (Agreement PartyVInfo) invalid`);\n                    try {\n                        partyVInfo = (0, base64url_js_1.decode)(joseHeader.apv);\n                    } catch  {\n                        throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the apv\");\n                    }\n                }\n                const sharedSecret = await ECDH.deriveKey(epk, key, alg === \"ECDH-ES\" ? joseHeader.enc : alg, alg === \"ECDH-ES\" ? (0, cek_js_1.bitLength)(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);\n                if (alg === \"ECDH-ES\") return sharedSecret;\n                if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid(\"JWE Encrypted Key missing\");\n                return (0, aeskw_js_1.unwrap)(alg.slice(-6), sharedSecret, encryptedKey);\n            }\n        case \"RSA1_5\":\n        case \"RSA-OAEP\":\n        case \"RSA-OAEP-256\":\n        case \"RSA-OAEP-384\":\n        case \"RSA-OAEP-512\":\n            {\n                if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid(\"JWE Encrypted Key missing\");\n                return (0, rsaes_js_1.decrypt)(alg, key, encryptedKey);\n            }\n        case \"PBES2-HS256+A128KW\":\n        case \"PBES2-HS384+A192KW\":\n        case \"PBES2-HS512+A256KW\":\n            {\n                if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid(\"JWE Encrypted Key missing\");\n                if (typeof joseHeader.p2c !== \"number\") throw new errors_js_1.JWEInvalid(`JOSE Header \"p2c\" (PBES2 Count) missing or invalid`);\n                const p2cLimit = (options === null || options === void 0 ? void 0 : options.maxPBES2Count) || 10000;\n                if (joseHeader.p2c > p2cLimit) throw new errors_js_1.JWEInvalid(`JOSE Header \"p2c\" (PBES2 Count) out is of acceptable bounds`);\n                if (typeof joseHeader.p2s !== \"string\") throw new errors_js_1.JWEInvalid(`JOSE Header \"p2s\" (PBES2 Salt) missing or invalid`);\n                let p2s;\n                try {\n                    p2s = (0, base64url_js_1.decode)(joseHeader.p2s);\n                } catch  {\n                    throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the p2s\");\n                }\n                return (0, pbes2kw_js_1.decrypt)(alg, key, encryptedKey, joseHeader.p2c, p2s);\n            }\n        case \"A128KW\":\n        case \"A192KW\":\n        case \"A256KW\":\n            {\n                if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid(\"JWE Encrypted Key missing\");\n                return (0, aeskw_js_1.unwrap)(alg, key, encryptedKey);\n            }\n        case \"A128GCMKW\":\n        case \"A192GCMKW\":\n        case \"A256GCMKW\":\n            {\n                if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid(\"JWE Encrypted Key missing\");\n                if (typeof joseHeader.iv !== \"string\") throw new errors_js_1.JWEInvalid(`JOSE Header \"iv\" (Initialization Vector) missing or invalid`);\n                if (typeof joseHeader.tag !== \"string\") throw new errors_js_1.JWEInvalid(`JOSE Header \"tag\" (Authentication Tag) missing or invalid`);\n                let iv;\n                try {\n                    iv = (0, base64url_js_1.decode)(joseHeader.iv);\n                } catch  {\n                    throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the iv\");\n                }\n                let tag;\n                try {\n                    tag = (0, base64url_js_1.decode)(joseHeader.tag);\n                } catch  {\n                    throw new errors_js_1.JWEInvalid(\"Failed to base64url decode the tag\");\n                }\n                return (0, aesgcmkw_js_1.unwrap)(alg, key, encryptedKey, iv, tag);\n            }\n        default:\n            {\n                throw new errors_js_1.JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n            }\n    }\n}\nexports[\"default\"] = decryptKeyManagement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/decrypt_key_management.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst aeskw_js_1 = __webpack_require__(/*! ../runtime/aeskw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js\");\nconst ECDH = __webpack_require__(/*! ../runtime/ecdhes.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js\");\nconst pbes2kw_js_1 = __webpack_require__(/*! ../runtime/pbes2kw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js\");\nconst rsaes_js_1 = __webpack_require__(/*! ../runtime/rsaes.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst cek_js_1 = __webpack_require__(/*! ../lib/cek.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst export_js_1 = __webpack_require__(/*! ../key/export.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js\");\nconst check_key_type_js_1 = __webpack_require__(/*! ./check_key_type.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\");\nconst aesgcmkw_js_1 = __webpack_require__(/*! ./aesgcmkw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js\");\nasync function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {\n    let encryptedKey;\n    let parameters;\n    let cek;\n    (0, check_key_type_js_1.default)(alg, key, \"encrypt\");\n    switch(alg){\n        case \"dir\":\n            {\n                cek = key;\n                break;\n            }\n        case \"ECDH-ES\":\n        case \"ECDH-ES+A128KW\":\n        case \"ECDH-ES+A192KW\":\n        case \"ECDH-ES+A256KW\":\n            {\n                if (!ECDH.ecdhAllowed(key)) {\n                    throw new errors_js_1.JOSENotSupported(\"ECDH with the provided key is not allowed or not supported by your javascript runtime\");\n                }\n                const { apu, apv } = providedParameters;\n                let { epk: ephemeralKey } = providedParameters;\n                ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);\n                const { x, y, crv, kty } = await (0, export_js_1.exportJWK)(ephemeralKey);\n                const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === \"ECDH-ES\" ? enc : alg, alg === \"ECDH-ES\" ? (0, cek_js_1.bitLength)(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n                parameters = {\n                    epk: {\n                        x,\n                        crv,\n                        kty\n                    }\n                };\n                if (kty === \"EC\") parameters.epk.y = y;\n                if (apu) parameters.apu = (0, base64url_js_1.encode)(apu);\n                if (apv) parameters.apv = (0, base64url_js_1.encode)(apv);\n                if (alg === \"ECDH-ES\") {\n                    cek = sharedSecret;\n                    break;\n                }\n                cek = providedCek || (0, cek_js_1.default)(enc);\n                const kwAlg = alg.slice(-6);\n                encryptedKey = await (0, aeskw_js_1.wrap)(kwAlg, sharedSecret, cek);\n                break;\n            }\n        case \"RSA1_5\":\n        case \"RSA-OAEP\":\n        case \"RSA-OAEP-256\":\n        case \"RSA-OAEP-384\":\n        case \"RSA-OAEP-512\":\n            {\n                cek = providedCek || (0, cek_js_1.default)(enc);\n                encryptedKey = await (0, rsaes_js_1.encrypt)(alg, key, cek);\n                break;\n            }\n        case \"PBES2-HS256+A128KW\":\n        case \"PBES2-HS384+A192KW\":\n        case \"PBES2-HS512+A256KW\":\n            {\n                cek = providedCek || (0, cek_js_1.default)(enc);\n                const { p2c, p2s } = providedParameters;\n                ({ encryptedKey, ...parameters } = await (0, pbes2kw_js_1.encrypt)(alg, key, cek, p2c, p2s));\n                break;\n            }\n        case \"A128KW\":\n        case \"A192KW\":\n        case \"A256KW\":\n            {\n                cek = providedCek || (0, cek_js_1.default)(enc);\n                encryptedKey = await (0, aeskw_js_1.wrap)(alg, key, cek);\n                break;\n            }\n        case \"A128GCMKW\":\n        case \"A192GCMKW\":\n        case \"A256GCMKW\":\n            {\n                cek = providedCek || (0, cek_js_1.default)(enc);\n                const { iv } = providedParameters;\n                ({ encryptedKey, ...parameters } = await (0, aesgcmkw_js_1.wrap)(alg, key, cek, iv));\n                break;\n            }\n        default:\n            {\n                throw new errors_js_1.JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n            }\n    }\n    return {\n        cek,\n        encryptedKey,\n        parameters\n    };\n}\nexports[\"default\"] = encryptKeyManagement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = (date)=>Math.floor(date.getTime() / 1000);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9lcG9jaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWUsR0FBRyxDQUFDRyxPQUFTQyxLQUFLQyxLQUFLLENBQUNGLEtBQUtHLE9BQU8sS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9lcG9jaC5qcz9iZThmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gKGRhdGUpID0+IE1hdGguZmxvb3IoZGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJkYXRlIiwiTWF0aCIsImZsb29yIiwiZ2V0VGltZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.withAlg = void 0;\nfunction message(msg, actual, ...types) {\n    if (types.length > 2) {\n        const last = types.pop();\n        msg += `one of type ${types.join(\", \")}, or ${last}.`;\n    } else if (types.length === 2) {\n        msg += `one of type ${types[0]} or ${types[1]}.`;\n    } else {\n        msg += `of type ${types[0]}.`;\n    }\n    if (actual == null) {\n        msg += ` Received ${actual}`;\n    } else if (typeof actual === \"function\" && actual.name) {\n        msg += ` Received function ${actual.name}`;\n    } else if (typeof actual === \"object\" && actual != null) {\n        if (actual.constructor && actual.constructor.name) {\n            msg += ` Received an instance of ${actual.constructor.name}`;\n        }\n    }\n    return msg;\n}\nexports[\"default\"] = (actual, ...types)=>{\n    return message(\"Key must be \", actual, ...types);\n};\nfunction withAlg(alg, actual, ...types) {\n    return message(`Key for the ${alg} algorithm must be `, actual, ...types);\n}\nexports.withAlg = withAlg;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHLEtBQUs7QUFDdkIsU0FBU0csUUFBUUMsR0FBRyxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsS0FBSztJQUNsQyxJQUFJQSxNQUFNQyxNQUFNLEdBQUcsR0FBRztRQUNsQixNQUFNQyxPQUFPRixNQUFNRyxHQUFHO1FBQ3RCTCxPQUFPLENBQUMsWUFBWSxFQUFFRSxNQUFNSSxJQUFJLENBQUMsTUFBTSxLQUFLLEVBQUVGLEtBQUssQ0FBQyxDQUFDO0lBQ3pELE9BQ0ssSUFBSUYsTUFBTUMsTUFBTSxLQUFLLEdBQUc7UUFDekJILE9BQU8sQ0FBQyxZQUFZLEVBQUVFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFQSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNwRCxPQUNLO1FBQ0RGLE9BQU8sQ0FBQyxRQUFRLEVBQUVFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pDO0lBQ0EsSUFBSUQsVUFBVSxNQUFNO1FBQ2hCRCxPQUFPLENBQUMsVUFBVSxFQUFFQyxPQUFPLENBQUM7SUFDaEMsT0FDSyxJQUFJLE9BQU9BLFdBQVcsY0FBY0EsT0FBT00sSUFBSSxFQUFFO1FBQ2xEUCxPQUFPLENBQUMsbUJBQW1CLEVBQUVDLE9BQU9NLElBQUksQ0FBQyxDQUFDO0lBQzlDLE9BQ0ssSUFBSSxPQUFPTixXQUFXLFlBQVlBLFVBQVUsTUFBTTtRQUNuRCxJQUFJQSxPQUFPTyxXQUFXLElBQUlQLE9BQU9PLFdBQVcsQ0FBQ0QsSUFBSSxFQUFFO1lBQy9DUCxPQUFPLENBQUMseUJBQXlCLEVBQUVDLE9BQU9PLFdBQVcsQ0FBQ0QsSUFBSSxDQUFDLENBQUM7UUFDaEU7SUFDSjtJQUNBLE9BQU9QO0FBQ1g7QUFDQUosa0JBQWUsR0FBRyxDQUFDSyxRQUFRLEdBQUdDO0lBQzFCLE9BQU9ILFFBQVEsZ0JBQWdCRSxXQUFXQztBQUM5QztBQUNBLFNBQVNKLFFBQVFZLEdBQUcsRUFBRVQsTUFBTSxFQUFFLEdBQUdDLEtBQUs7SUFDbEMsT0FBT0gsUUFBUSxDQUFDLFlBQVksRUFBRVcsSUFBSSxtQkFBbUIsQ0FBQyxFQUFFVCxXQUFXQztBQUN2RTtBQUNBTixlQUFlLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL2ludmFsaWRfa2V5X2lucHV0LmpzPzRkMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpdGhBbGcgPSB2b2lkIDA7XG5mdW5jdGlvbiBtZXNzYWdlKG1zZywgYWN0dWFsLCAuLi50eXBlcykge1xuICAgIGlmICh0eXBlcy5sZW5ndGggPiAyKSB7XG4gICAgICAgIGNvbnN0IGxhc3QgPSB0eXBlcy5wb3AoKTtcbiAgICAgICAgbXNnICs9IGBvbmUgb2YgdHlwZSAke3R5cGVzLmpvaW4oJywgJyl9LCBvciAke2xhc3R9LmA7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBtc2cgKz0gYG9uZSBvZiB0eXBlICR7dHlwZXNbMF19IG9yICR7dHlwZXNbMV19LmA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtc2cgKz0gYG9mIHR5cGUgJHt0eXBlc1swXX0uYDtcbiAgICB9XG4gICAgaWYgKGFjdHVhbCA9PSBudWxsKSB7XG4gICAgICAgIG1zZyArPSBgIFJlY2VpdmVkICR7YWN0dWFsfWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBhY3R1YWwgPT09ICdmdW5jdGlvbicgJiYgYWN0dWFsLm5hbWUpIHtcbiAgICAgICAgbXNnICs9IGAgUmVjZWl2ZWQgZnVuY3Rpb24gJHthY3R1YWwubmFtZX1gO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgYWN0dWFsID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYWN0dWFsLmNvbnN0cnVjdG9yICYmIGFjdHVhbC5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICAgICAgICBtc2cgKz0gYCBSZWNlaXZlZCBhbiBpbnN0YW5jZSBvZiAke2FjdHVhbC5jb25zdHJ1Y3Rvci5uYW1lfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1zZztcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IChhY3R1YWwsIC4uLnR5cGVzKSA9PiB7XG4gICAgcmV0dXJuIG1lc3NhZ2UoJ0tleSBtdXN0IGJlICcsIGFjdHVhbCwgLi4udHlwZXMpO1xufTtcbmZ1bmN0aW9uIHdpdGhBbGcoYWxnLCBhY3R1YWwsIC4uLnR5cGVzKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UoYEtleSBmb3IgdGhlICR7YWxnfSBhbGdvcml0aG0gbXVzdCBiZSBgLCBhY3R1YWwsIC4uLnR5cGVzKTtcbn1cbmV4cG9ydHMud2l0aEFsZyA9IHdpdGhBbGc7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3aXRoQWxnIiwibWVzc2FnZSIsIm1zZyIsImFjdHVhbCIsInR5cGVzIiwibGVuZ3RoIiwibGFzdCIsInBvcCIsImpvaW4iLCJuYW1lIiwiY29uc3RydWN0b3IiLCJkZWZhdWx0IiwiYWxnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst isDisjoint = (...headers)=>{\n    const sources = headers.filter(Boolean);\n    if (sources.length === 0 || sources.length === 1) {\n        return true;\n    }\n    let acc;\n    for (const header of sources){\n        const parameters = Object.keys(header);\n        if (!acc || acc.size === 0) {\n            acc = new Set(parameters);\n            continue;\n        }\n        for (const parameter of parameters){\n            if (acc.has(parameter)) {\n                return false;\n            }\n            acc.add(parameter);\n        }\n    }\n    return true;\n};\nexports[\"default\"] = isDisjoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pc19kaXNqb2ludC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxhQUFhLENBQUMsR0FBR0M7SUFDbkIsTUFBTUMsVUFBVUQsUUFBUUUsTUFBTSxDQUFDQztJQUMvQixJQUFJRixRQUFRRyxNQUFNLEtBQUssS0FBS0gsUUFBUUcsTUFBTSxLQUFLLEdBQUc7UUFDOUMsT0FBTztJQUNYO0lBQ0EsSUFBSUM7SUFDSixLQUFLLE1BQU1DLFVBQVVMLFFBQVM7UUFDMUIsTUFBTU0sYUFBYVosT0FBT2EsSUFBSSxDQUFDRjtRQUMvQixJQUFJLENBQUNELE9BQU9BLElBQUlJLElBQUksS0FBSyxHQUFHO1lBQ3hCSixNQUFNLElBQUlLLElBQUlIO1lBQ2Q7UUFDSjtRQUNBLEtBQUssTUFBTUksYUFBYUosV0FBWTtZQUNoQyxJQUFJRixJQUFJTyxHQUFHLENBQUNELFlBQVk7Z0JBQ3BCLE9BQU87WUFDWDtZQUNBTixJQUFJUSxHQUFHLENBQUNGO1FBQ1o7SUFDSjtJQUNBLE9BQU87QUFDWDtBQUNBZCxrQkFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pc19kaXNqb2ludC5qcz8yMmJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNEaXNqb2ludCA9ICguLi5oZWFkZXJzKSA9PiB7XG4gICAgY29uc3Qgc291cmNlcyA9IGhlYWRlcnMuZmlsdGVyKEJvb2xlYW4pO1xuICAgIGlmIChzb3VyY2VzLmxlbmd0aCA9PT0gMCB8fCBzb3VyY2VzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IGFjYztcbiAgICBmb3IgKGNvbnN0IGhlYWRlciBvZiBzb3VyY2VzKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBPYmplY3Qua2V5cyhoZWFkZXIpO1xuICAgICAgICBpZiAoIWFjYyB8fCBhY2Muc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgYWNjID0gbmV3IFNldChwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW1ldGVyIG9mIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIGlmIChhY2MuaGFzKHBhcmFtZXRlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2MuYWRkKHBhcmFtZXRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNEaXNqb2ludDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzRGlzam9pbnQiLCJoZWFkZXJzIiwic291cmNlcyIsImZpbHRlciIsIkJvb2xlYW4iLCJsZW5ndGgiLCJhY2MiLCJoZWFkZXIiLCJwYXJhbWV0ZXJzIiwia2V5cyIsInNpemUiLCJTZXQiLCJwYXJhbWV0ZXIiLCJoYXMiLCJhZGQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction isObjectLike(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction isObject(input) {\n    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== \"[object Object]\") {\n        return false;\n    }\n    if (Object.getPrototypeOf(input) === null) {\n        return true;\n    }\n    let proto = input;\n    while(Object.getPrototypeOf(proto) !== null){\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(input) === proto;\n}\nexports[\"default\"] = isObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pc19vYmplY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsU0FBU0MsYUFBYUQsS0FBSztJQUN2QixPQUFPLE9BQU9BLFVBQVUsWUFBWUEsVUFBVTtBQUNsRDtBQUNBLFNBQVNFLFNBQVNDLEtBQUs7SUFDbkIsSUFBSSxDQUFDRixhQUFhRSxVQUFVTixPQUFPTyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDSCxXQUFXLG1CQUFtQjtRQUNyRixPQUFPO0lBQ1g7SUFDQSxJQUFJTixPQUFPVSxjQUFjLENBQUNKLFdBQVcsTUFBTTtRQUN2QyxPQUFPO0lBQ1g7SUFDQSxJQUFJSyxRQUFRTDtJQUNaLE1BQU9OLE9BQU9VLGNBQWMsQ0FBQ0MsV0FBVyxLQUFNO1FBQzFDQSxRQUFRWCxPQUFPVSxjQUFjLENBQUNDO0lBQ2xDO0lBQ0EsT0FBT1gsT0FBT1UsY0FBYyxDQUFDSixXQUFXSztBQUM1QztBQUNBVCxrQkFBZSxHQUFHRyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pc19vYmplY3QuanM/ZmJkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xufVxuZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICBpZiAoIWlzT2JqZWN0TGlrZShpbnB1dCkgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGlucHV0KSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IHByb3RvID0gaW5wdXQ7XG4gICAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICAgICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKGlucHV0KSA9PT0gcHJvdG87XG59XG5leHBvcnRzLmRlZmF1bHQgPSBpc09iamVjdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzT2JqZWN0TGlrZSIsImlzT2JqZWN0IiwiaW5wdXQiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJnZXRQcm90b3R5cGVPZiIsInByb3RvIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js":
/*!******************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.bitLength = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst random_js_1 = __webpack_require__(/*! ../runtime/random.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\");\nfunction bitLength(alg) {\n    switch(alg){\n        case \"A128GCM\":\n        case \"A128GCMKW\":\n        case \"A192GCM\":\n        case \"A192GCMKW\":\n        case \"A256GCM\":\n        case \"A256GCMKW\":\n            return 96;\n        case \"A128CBC-HS256\":\n        case \"A192CBC-HS384\":\n        case \"A256CBC-HS512\":\n            return 128;\n        default:\n            throw new errors_js_1.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);\n    }\n}\nexports.bitLength = bitLength;\nexports[\"default\"] = (alg)=>(0, random_js_1.default)(new Uint8Array(bitLength(alg) >> 3));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pdi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQyw0R0FBbUI7QUFDL0MsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsa0hBQXNCO0FBQ2xELFNBQVNGLFVBQVVJLEdBQUc7SUFDbEIsT0FBUUE7UUFDSixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0QsT0FBTztRQUNYO1lBQ0ksTUFBTSxJQUFJSCxZQUFZSSxnQkFBZ0IsQ0FBQyxDQUFDLDJCQUEyQixFQUFFRCxJQUFJLENBQUM7SUFDbEY7QUFDSjtBQUNBTixpQkFBaUIsR0FBR0U7QUFDcEJGLGtCQUFlLEdBQUcsQ0FBQ00sTUFBUSxDQUFDLEdBQUdELFlBQVlHLE9BQU8sRUFBRSxJQUFJQyxXQUFXUCxVQUFVSSxRQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL2l2LmpzPzFhZmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJpdExlbmd0aCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgcmFuZG9tX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9yYW5kb20uanNcIik7XG5mdW5jdGlvbiBiaXRMZW5ndGgoYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgIGNhc2UgJ0ExMjhHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ00nOlxuICAgICAgICBjYXNlICdBMTkyR0NNS1cnOlxuICAgICAgICBjYXNlICdBMjU2R0NNJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTUtXJzpcbiAgICAgICAgICAgIHJldHVybiA5NjtcbiAgICAgICAgY2FzZSAnQTEyOENCQy1IUzI1Nic6XG4gICAgICAgIGNhc2UgJ0ExOTJDQkMtSFMzODQnOlxuICAgICAgICBjYXNlICdBMjU2Q0JDLUhTNTEyJzpcbiAgICAgICAgICAgIHJldHVybiAxMjg7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgVW5zdXBwb3J0ZWQgSldFIEFsZ29yaXRobTogJHthbGd9YCk7XG4gICAgfVxufVxuZXhwb3J0cy5iaXRMZW5ndGggPSBiaXRMZW5ndGg7XG5leHBvcnRzLmRlZmF1bHQgPSAoYWxnKSA9PiAoMCwgcmFuZG9tX2pzXzEuZGVmYXVsdCkobmV3IFVpbnQ4QXJyYXkoYml0TGVuZ3RoKGFsZykgPj4gMykpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYml0TGVuZ3RoIiwiZXJyb3JzX2pzXzEiLCJyZXF1aXJlIiwicmFuZG9tX2pzXzEiLCJhbGciLCJKT1NFTm90U3VwcG9ydGVkIiwiZGVmYXVsdCIsIlVpbnQ4QXJyYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ./buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst epoch_js_1 = __webpack_require__(/*! ./epoch.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js\");\nconst secs_js_1 = __webpack_require__(/*! ./secs.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js\");\nconst is_object_js_1 = __webpack_require__(/*! ./is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst normalizeTyp = (value)=>value.toLowerCase().replace(/^application\\//, \"\");\nconst checkAudiencePresence = (audPayload, audOption)=>{\n    if (typeof audPayload === \"string\") {\n        return audOption.includes(audPayload);\n    }\n    if (Array.isArray(audPayload)) {\n        return audOption.some(Set.prototype.has.bind(new Set(audPayload)));\n    }\n    return false;\n};\nexports[\"default\"] = (protectedHeader, encodedPayload, options = {})=>{\n    const { typ } = options;\n    if (typ && (typeof protectedHeader.typ !== \"string\" || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {\n        throw new errors_js_1.JWTClaimValidationFailed('unexpected \"typ\" JWT header value', \"typ\", \"check_failed\");\n    }\n    let payload;\n    try {\n        payload = JSON.parse(buffer_utils_js_1.decoder.decode(encodedPayload));\n    } catch  {}\n    if (!(0, is_object_js_1.default)(payload)) {\n        throw new errors_js_1.JWTInvalid(\"JWT Claims Set must be a top-level JSON object\");\n    }\n    const { requiredClaims = [], issuer, subject, audience, maxTokenAge } = options;\n    if (maxTokenAge !== undefined) requiredClaims.push(\"iat\");\n    if (audience !== undefined) requiredClaims.push(\"aud\");\n    if (subject !== undefined) requiredClaims.push(\"sub\");\n    if (issuer !== undefined) requiredClaims.push(\"iss\");\n    for (const claim of new Set(requiredClaims.reverse())){\n        if (!(claim in payload)) {\n            throw new errors_js_1.JWTClaimValidationFailed(`missing required \"${claim}\" claim`, claim, \"missing\");\n        }\n    }\n    if (issuer && !(Array.isArray(issuer) ? issuer : [\n        issuer\n    ]).includes(payload.iss)) {\n        throw new errors_js_1.JWTClaimValidationFailed('unexpected \"iss\" claim value', \"iss\", \"check_failed\");\n    }\n    if (subject && payload.sub !== subject) {\n        throw new errors_js_1.JWTClaimValidationFailed('unexpected \"sub\" claim value', \"sub\", \"check_failed\");\n    }\n    if (audience && !checkAudiencePresence(payload.aud, typeof audience === \"string\" ? [\n        audience\n    ] : audience)) {\n        throw new errors_js_1.JWTClaimValidationFailed('unexpected \"aud\" claim value', \"aud\", \"check_failed\");\n    }\n    let tolerance;\n    switch(typeof options.clockTolerance){\n        case \"string\":\n            tolerance = (0, secs_js_1.default)(options.clockTolerance);\n            break;\n        case \"number\":\n            tolerance = options.clockTolerance;\n            break;\n        case \"undefined\":\n            tolerance = 0;\n            break;\n        default:\n            throw new TypeError(\"Invalid clockTolerance option type\");\n    }\n    const { currentDate } = options;\n    const now = (0, epoch_js_1.default)(currentDate || new Date());\n    if ((payload.iat !== undefined || maxTokenAge) && typeof payload.iat !== \"number\") {\n        throw new errors_js_1.JWTClaimValidationFailed('\"iat\" claim must be a number', \"iat\", \"invalid\");\n    }\n    if (payload.nbf !== undefined) {\n        if (typeof payload.nbf !== \"number\") {\n            throw new errors_js_1.JWTClaimValidationFailed('\"nbf\" claim must be a number', \"nbf\", \"invalid\");\n        }\n        if (payload.nbf > now + tolerance) {\n            throw new errors_js_1.JWTClaimValidationFailed('\"nbf\" claim timestamp check failed', \"nbf\", \"check_failed\");\n        }\n    }\n    if (payload.exp !== undefined) {\n        if (typeof payload.exp !== \"number\") {\n            throw new errors_js_1.JWTClaimValidationFailed('\"exp\" claim must be a number', \"exp\", \"invalid\");\n        }\n        if (payload.exp <= now - tolerance) {\n            throw new errors_js_1.JWTExpired('\"exp\" claim timestamp check failed', \"exp\", \"check_failed\");\n        }\n    }\n    if (maxTokenAge) {\n        const age = now - payload.iat;\n        const max = typeof maxTokenAge === \"number\" ? maxTokenAge : (0, secs_js_1.default)(maxTokenAge);\n        if (age - tolerance > max) {\n            throw new errors_js_1.JWTExpired('\"iat\" claim timestamp check failed (too far in the past)', \"iat\", \"check_failed\");\n        }\n        if (age < 0 - tolerance) {\n            throw new errors_js_1.JWTClaimValidationFailed('\"iat\" claim timestamp check failed (it should be in the past)', \"iat\", \"check_failed\");\n        }\n    }\n    return payload;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js":
/*!********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst minute = 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\nconst year = day * 365.25;\nconst REGEX = /^(\\d+|\\d+\\.\\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;\nexports[\"default\"] = (str)=>{\n    const matched = REGEX.exec(str);\n    if (!matched) {\n        throw new TypeError(\"Invalid time period format\");\n    }\n    const value = parseFloat(matched[1]);\n    const unit = matched[2].toLowerCase();\n    switch(unit){\n        case \"sec\":\n        case \"secs\":\n        case \"second\":\n        case \"seconds\":\n        case \"s\":\n            return Math.round(value);\n        case \"minute\":\n        case \"minutes\":\n        case \"min\":\n        case \"mins\":\n        case \"m\":\n            return Math.round(value * minute);\n        case \"hour\":\n        case \"hours\":\n        case \"hr\":\n        case \"hrs\":\n        case \"h\":\n            return Math.round(value * hour);\n        case \"day\":\n        case \"days\":\n        case \"d\":\n            return Math.round(value * day);\n        case \"week\":\n        case \"weeks\":\n        case \"w\":\n            return Math.round(value * week);\n        default:\n            return Math.round(value * year);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9zZWNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFNBQVM7QUFDZixNQUFNQyxPQUFPRCxTQUFTO0FBQ3RCLE1BQU1FLE1BQU1ELE9BQU87QUFDbkIsTUFBTUUsT0FBT0QsTUFBTTtBQUNuQixNQUFNRSxPQUFPRixNQUFNO0FBQ25CLE1BQU1HLFFBQVE7QUFDZFAsa0JBQWUsR0FBRyxDQUFDUztJQUNmLE1BQU1DLFVBQVVILE1BQU1JLElBQUksQ0FBQ0Y7SUFDM0IsSUFBSSxDQUFDQyxTQUFTO1FBQ1YsTUFBTSxJQUFJRSxVQUFVO0lBQ3hCO0lBQ0EsTUFBTVgsUUFBUVksV0FBV0gsT0FBTyxDQUFDLEVBQUU7SUFDbkMsTUFBTUksT0FBT0osT0FBTyxDQUFDLEVBQUUsQ0FBQ0ssV0FBVztJQUNuQyxPQUFRRDtRQUNKLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0QsT0FBT0UsS0FBS0MsS0FBSyxDQUFDaEI7UUFDdEIsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPZSxLQUFLQyxLQUFLLENBQUNoQixRQUFRQztRQUM5QixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNELE9BQU9jLEtBQUtDLEtBQUssQ0FBQ2hCLFFBQVFFO1FBQzlCLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNELE9BQU9hLEtBQUtDLEtBQUssQ0FBQ2hCLFFBQVFHO1FBQzlCLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNELE9BQU9ZLEtBQUtDLEtBQUssQ0FBQ2hCLFFBQVFJO1FBQzlCO1lBQ0ksT0FBT1csS0FBS0MsS0FBSyxDQUFDaEIsUUFBUUs7SUFDbEM7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9zZWNzLmpzPzkyYjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBtaW51dGUgPSA2MDtcbmNvbnN0IGhvdXIgPSBtaW51dGUgKiA2MDtcbmNvbnN0IGRheSA9IGhvdXIgKiAyNDtcbmNvbnN0IHdlZWsgPSBkYXkgKiA3O1xuY29uc3QgeWVhciA9IGRheSAqIDM2NS4yNTtcbmNvbnN0IFJFR0VYID0gL14oXFxkK3xcXGQrXFwuXFxkKykgPyhzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpJC9pO1xuZXhwb3J0cy5kZWZhdWx0ID0gKHN0cikgPT4ge1xuICAgIGNvbnN0IG1hdGNoZWQgPSBSRUdFWC5leGVjKHN0cik7XG4gICAgaWYgKCFtYXRjaGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgdGltZSBwZXJpb2QgZm9ybWF0Jyk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gcGFyc2VGbG9hdChtYXRjaGVkWzFdKTtcbiAgICBjb25zdCB1bml0ID0gbWF0Y2hlZFsyXS50b0xvd2VyQ2FzZSgpO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICBjYXNlICdzZWMnOlxuICAgICAgICBjYXNlICdzZWNzJzpcbiAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUpO1xuICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICBjYXNlICdtaW51dGVzJzpcbiAgICAgICAgY2FzZSAnbWluJzpcbiAgICAgICAgY2FzZSAnbWlucyc6XG4gICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBtaW51dGUpO1xuICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgY2FzZSAnaG91cnMnOlxuICAgICAgICBjYXNlICdocic6XG4gICAgICAgIGNhc2UgJ2hycyc6XG4gICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBob3VyKTtcbiAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgY2FzZSAnZGF5cyc6XG4gICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBkYXkpO1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgY2FzZSAnd2Vla3MnOlxuICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogd2Vlayk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIHllYXIpO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtaW51dGUiLCJob3VyIiwiZGF5Iiwid2VlayIsInllYXIiLCJSRUdFWCIsImRlZmF1bHQiLCJzdHIiLCJtYXRjaGVkIiwiZXhlYyIsIlR5cGVFcnJvciIsInBhcnNlRmxvYXQiLCJ1bml0IiwidG9Mb3dlckNhc2UiLCJNYXRoIiwicm91bmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst validateAlgorithms = (option, algorithms)=>{\n    if (algorithms !== undefined && (!Array.isArray(algorithms) || algorithms.some((s)=>typeof s !== \"string\"))) {\n        throw new TypeError(`\"${option}\" option must be an array of strings`);\n    }\n    if (!algorithms) {\n        return undefined;\n    }\n    return new Set(algorithms);\n};\nexports[\"default\"] = validateAlgorithms;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi92YWxpZGF0ZV9hbGdvcml0aG1zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLHFCQUFxQixDQUFDQyxRQUFRQztJQUNoQyxJQUFJQSxlQUFlQyxhQUNkLEVBQUNDLE1BQU1DLE9BQU8sQ0FBQ0gsZUFBZUEsV0FBV0ksSUFBSSxDQUFDLENBQUNDLElBQU0sT0FBT0EsTUFBTSxTQUFRLEdBQUk7UUFDL0UsTUFBTSxJQUFJQyxVQUFVLENBQUMsQ0FBQyxFQUFFUCxPQUFPLG9DQUFvQyxDQUFDO0lBQ3hFO0lBQ0EsSUFBSSxDQUFDQyxZQUFZO1FBQ2IsT0FBT0M7SUFDWDtJQUNBLE9BQU8sSUFBSU0sSUFBSVA7QUFDbkI7QUFDQUosa0JBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvdmFsaWRhdGVfYWxnb3JpdGhtcy5qcz81NzlkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdmFsaWRhdGVBbGdvcml0aG1zID0gKG9wdGlvbiwgYWxnb3JpdGhtcykgPT4ge1xuICAgIGlmIChhbGdvcml0aG1zICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgKCFBcnJheS5pc0FycmF5KGFsZ29yaXRobXMpIHx8IGFsZ29yaXRobXMuc29tZSgocykgPT4gdHlwZW9mIHMgIT09ICdzdHJpbmcnKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgXCIke29wdGlvbn1cIiBvcHRpb24gbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdzYCk7XG4gICAgfVxuICAgIGlmICghYWxnb3JpdGhtcykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNldChhbGdvcml0aG1zKTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSB2YWxpZGF0ZUFsZ29yaXRobXM7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2YWxpZGF0ZUFsZ29yaXRobXMiLCJvcHRpb24iLCJhbGdvcml0aG1zIiwidW5kZWZpbmVkIiwiQXJyYXkiLCJpc0FycmF5Iiwic29tZSIsInMiLCJUeXBlRXJyb3IiLCJTZXQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {\n    if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {\n        throw new Err('\"crit\" (Critical) Header Parameter MUST be integrity protected');\n    }\n    if (!protectedHeader || protectedHeader.crit === undefined) {\n        return new Set();\n    }\n    if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input)=>typeof input !== \"string\" || input.length === 0)) {\n        throw new Err('\"crit\" (Critical) Header Parameter MUST be an array of non-empty strings when present');\n    }\n    let recognized;\n    if (recognizedOption !== undefined) {\n        recognized = new Map([\n            ...Object.entries(recognizedOption),\n            ...recognizedDefault.entries()\n        ]);\n    } else {\n        recognized = recognizedDefault;\n    }\n    for (const parameter of protectedHeader.crit){\n        if (!recognized.has(parameter)) {\n            throw new errors_js_1.JOSENotSupported(`Extension Header Parameter \"${parameter}\" is not recognized`);\n        }\n        if (joseHeader[parameter] === undefined) {\n            throw new Err(`Extension Header Parameter \"${parameter}\" is missing`);\n        } else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {\n            throw new Err(`Extension Header Parameter \"${parameter}\" MUST be integrity protected`);\n        }\n    }\n    return new Set(protectedHeader.crit);\n}\nexports[\"default\"] = validateCrit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi92YWxpZGF0ZV9jcml0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGNBQWNDLG1CQUFPQSxDQUFDLDRHQUFtQjtBQUMvQyxTQUFTQyxhQUFhQyxHQUFHLEVBQUVDLGlCQUFpQixFQUFFQyxnQkFBZ0IsRUFBRUMsZUFBZSxFQUFFQyxVQUFVO0lBQ3ZGLElBQUlBLFdBQVdDLElBQUksS0FBS0MsYUFBYUgsZ0JBQWdCRSxJQUFJLEtBQUtDLFdBQVc7UUFDckUsTUFBTSxJQUFJTixJQUFJO0lBQ2xCO0lBQ0EsSUFBSSxDQUFDRyxtQkFBbUJBLGdCQUFnQkUsSUFBSSxLQUFLQyxXQUFXO1FBQ3hELE9BQU8sSUFBSUM7SUFDZjtJQUNBLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDTixnQkFBZ0JFLElBQUksS0FDbkNGLGdCQUFnQkUsSUFBSSxDQUFDSyxNQUFNLEtBQUssS0FDaENQLGdCQUFnQkUsSUFBSSxDQUFDTSxJQUFJLENBQUMsQ0FBQ0MsUUFBVSxPQUFPQSxVQUFVLFlBQVlBLE1BQU1GLE1BQU0sS0FBSyxJQUFJO1FBQ3ZGLE1BQU0sSUFBSVYsSUFBSTtJQUNsQjtJQUNBLElBQUlhO0lBQ0osSUFBSVgscUJBQXFCSSxXQUFXO1FBQ2hDTyxhQUFhLElBQUlDLElBQUk7ZUFBSXJCLE9BQU9zQixPQUFPLENBQUNiO2VBQXNCRCxrQkFBa0JjLE9BQU87U0FBRztJQUM5RixPQUNLO1FBQ0RGLGFBQWFaO0lBQ2pCO0lBQ0EsS0FBSyxNQUFNZSxhQUFhYixnQkFBZ0JFLElBQUksQ0FBRTtRQUMxQyxJQUFJLENBQUNRLFdBQVdJLEdBQUcsQ0FBQ0QsWUFBWTtZQUM1QixNQUFNLElBQUluQixZQUFZcUIsZ0JBQWdCLENBQUMsQ0FBQyw0QkFBNEIsRUFBRUYsVUFBVSxtQkFBbUIsQ0FBQztRQUN4RztRQUNBLElBQUlaLFVBQVUsQ0FBQ1ksVUFBVSxLQUFLVixXQUFXO1lBQ3JDLE1BQU0sSUFBSU4sSUFBSSxDQUFDLDRCQUE0QixFQUFFZ0IsVUFBVSxZQUFZLENBQUM7UUFDeEUsT0FDSyxJQUFJSCxXQUFXTSxHQUFHLENBQUNILGNBQWNiLGVBQWUsQ0FBQ2EsVUFBVSxLQUFLVixXQUFXO1lBQzVFLE1BQU0sSUFBSU4sSUFBSSxDQUFDLDRCQUE0QixFQUFFZ0IsVUFBVSw2QkFBNkIsQ0FBQztRQUN6RjtJQUNKO0lBQ0EsT0FBTyxJQUFJVCxJQUFJSixnQkFBZ0JFLElBQUk7QUFDdkM7QUFDQVYsa0JBQWUsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvdmFsaWRhdGVfY3JpdC5qcz9jY2M2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5mdW5jdGlvbiB2YWxpZGF0ZUNyaXQoRXJyLCByZWNvZ25pemVkRGVmYXVsdCwgcmVjb2duaXplZE9wdGlvbiwgcHJvdGVjdGVkSGVhZGVyLCBqb3NlSGVhZGVyKSB7XG4gICAgaWYgKGpvc2VIZWFkZXIuY3JpdCAhPT0gdW5kZWZpbmVkICYmIHByb3RlY3RlZEhlYWRlci5jcml0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycignXCJjcml0XCIgKENyaXRpY2FsKSBIZWFkZXIgUGFyYW1ldGVyIE1VU1QgYmUgaW50ZWdyaXR5IHByb3RlY3RlZCcpO1xuICAgIH1cbiAgICBpZiAoIXByb3RlY3RlZEhlYWRlciB8fCBwcm90ZWN0ZWRIZWFkZXIuY3JpdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0KCk7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm90ZWN0ZWRIZWFkZXIuY3JpdCkgfHxcbiAgICAgICAgcHJvdGVjdGVkSGVhZGVyLmNyaXQubGVuZ3RoID09PSAwIHx8XG4gICAgICAgIHByb3RlY3RlZEhlYWRlci5jcml0LnNvbWUoKGlucHV0KSA9PiB0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnIHx8IGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycignXCJjcml0XCIgKENyaXRpY2FsKSBIZWFkZXIgUGFyYW1ldGVyIE1VU1QgYmUgYW4gYXJyYXkgb2Ygbm9uLWVtcHR5IHN0cmluZ3Mgd2hlbiBwcmVzZW50Jyk7XG4gICAgfVxuICAgIGxldCByZWNvZ25pemVkO1xuICAgIGlmIChyZWNvZ25pemVkT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVjb2duaXplZCA9IG5ldyBNYXAoWy4uLk9iamVjdC5lbnRyaWVzKHJlY29nbml6ZWRPcHRpb24pLCAuLi5yZWNvZ25pemVkRGVmYXVsdC5lbnRyaWVzKCldKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlY29nbml6ZWQgPSByZWNvZ25pemVkRGVmYXVsdDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgcHJvdGVjdGVkSGVhZGVyLmNyaXQpIHtcbiAgICAgICAgaWYgKCFyZWNvZ25pemVkLmhhcyhwYXJhbWV0ZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgRXh0ZW5zaW9uIEhlYWRlciBQYXJhbWV0ZXIgXCIke3BhcmFtZXRlcn1cIiBpcyBub3QgcmVjb2duaXplZGApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqb3NlSGVhZGVyW3BhcmFtZXRlcl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycihgRXh0ZW5zaW9uIEhlYWRlciBQYXJhbWV0ZXIgXCIke3BhcmFtZXRlcn1cIiBpcyBtaXNzaW5nYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjb2duaXplZC5nZXQocGFyYW1ldGVyKSAmJiBwcm90ZWN0ZWRIZWFkZXJbcGFyYW1ldGVyXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyKGBFeHRlbnNpb24gSGVhZGVyIFBhcmFtZXRlciBcIiR7cGFyYW1ldGVyfVwiIE1VU1QgYmUgaW50ZWdyaXR5IHByb3RlY3RlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2V0KHByb3RlY3RlZEhlYWRlci5jcml0KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRlQ3JpdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVycm9yc19qc18xIiwicmVxdWlyZSIsInZhbGlkYXRlQ3JpdCIsIkVyciIsInJlY29nbml6ZWREZWZhdWx0IiwicmVjb2duaXplZE9wdGlvbiIsInByb3RlY3RlZEhlYWRlciIsImpvc2VIZWFkZXIiLCJjcml0IiwidW5kZWZpbmVkIiwiU2V0IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwic29tZSIsImlucHV0IiwicmVjb2duaXplZCIsIk1hcCIsImVudHJpZXMiLCJwYXJhbWV0ZXIiLCJoYXMiLCJKT1NFTm90U3VwcG9ydGVkIiwiZ2V0IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.unwrap = exports.wrap = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst ciphers_js_1 = __webpack_require__(/*! ./ciphers.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nfunction checkKeySize(key, alg) {\n    if (key.symmetricKeySize << 3 !== parseInt(alg.slice(1, 4), 10)) {\n        throw new TypeError(`Invalid key size for alg: ${alg}`);\n    }\n}\nfunction ensureKeyObject(key, alg, usage) {\n    if ((0, is_key_object_js_1.default)(key)) {\n        return key;\n    }\n    if (key instanceof Uint8Array) {\n        return (0, crypto_1.createSecretKey)(key);\n    }\n    if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n        (0, crypto_key_js_1.checkEncCryptoKey)(key, alg, usage);\n        return crypto_1.KeyObject.from(key);\n    }\n    throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, \"Uint8Array\"));\n}\nconst wrap = (alg, key, cek)=>{\n    const size = parseInt(alg.slice(1, 4), 10);\n    const algorithm = `aes${size}-wrap`;\n    if (!(0, ciphers_js_1.default)(algorithm)) {\n        throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n    }\n    const keyObject = ensureKeyObject(key, alg, \"wrapKey\");\n    checkKeySize(keyObject, alg);\n    const cipher = (0, crypto_1.createCipheriv)(algorithm, keyObject, buffer_1.Buffer.alloc(8, 0xa6));\n    return (0, buffer_utils_js_1.concat)(cipher.update(cek), cipher.final());\n};\nexports.wrap = wrap;\nconst unwrap = (alg, key, encryptedKey)=>{\n    const size = parseInt(alg.slice(1, 4), 10);\n    const algorithm = `aes${size}-wrap`;\n    if (!(0, ciphers_js_1.default)(algorithm)) {\n        throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n    }\n    const keyObject = ensureKeyObject(key, alg, \"unwrapKey\");\n    checkKeySize(keyObject, alg);\n    const cipher = (0, crypto_1.createDecipheriv)(algorithm, keyObject, buffer_1.Buffer.alloc(8, 0xa6));\n    return (0, buffer_utils_js_1.concat)(cipher.update(encryptedKey), cipher.final());\n};\nexports.unwrap = unwrap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYWVza3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBR0EsWUFBWSxHQUFHLEtBQUs7QUFDckMsTUFBTUksV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMsNEdBQW1CO0FBQy9DLE1BQU1HLG9CQUFvQkgsbUJBQU9BLENBQUMsc0hBQXdCO0FBQzFELE1BQU1JLGlCQUFpQkosbUJBQU9BLENBQUMsK0dBQWdCO0FBQy9DLE1BQU1LLGtCQUFrQkwsbUJBQU9BLENBQUMsa0hBQXNCO0FBQ3RELE1BQU1NLHFCQUFxQk4sbUJBQU9BLENBQUMsdUhBQW9CO0FBQ3ZELE1BQU1PLHlCQUF5QlAsbUJBQU9BLENBQUMsZ0lBQTZCO0FBQ3BFLE1BQU1RLGVBQWVSLG1CQUFPQSxDQUFDLDJHQUFjO0FBQzNDLE1BQU1TLG1CQUFtQlQsbUJBQU9BLENBQUMsbUhBQWtCO0FBQ25ELFNBQVNVLGFBQWFDLEdBQUcsRUFBRUMsR0FBRztJQUMxQixJQUFJRCxJQUFJRSxnQkFBZ0IsSUFBSSxNQUFNQyxTQUFTRixJQUFJRyxLQUFLLENBQUMsR0FBRyxJQUFJLEtBQUs7UUFDN0QsTUFBTSxJQUFJQyxVQUFVLENBQUMsMEJBQTBCLEVBQUVKLElBQUksQ0FBQztJQUMxRDtBQUNKO0FBQ0EsU0FBU0ssZ0JBQWdCTixHQUFHLEVBQUVDLEdBQUcsRUFBRU0sS0FBSztJQUNwQyxJQUFJLENBQUMsR0FBR1osbUJBQW1CYSxPQUFPLEVBQUVSLE1BQU07UUFDdEMsT0FBT0E7SUFDWDtJQUNBLElBQUlBLGVBQWVTLFlBQVk7UUFDM0IsT0FBTyxDQUFDLEdBQUduQixTQUFTb0IsZUFBZSxFQUFFVjtJQUN6QztJQUNBLElBQUksQ0FBQyxHQUFHUCxlQUFla0IsV0FBVyxFQUFFWCxNQUFNO1FBQ3JDLElBQUdOLGdCQUFnQmtCLGlCQUFpQixFQUFFWixLQUFLQyxLQUFLTTtRQUNqRCxPQUFPakIsU0FBU3VCLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDZDtJQUNuQztJQUNBLE1BQU0sSUFBSUssVUFBVSxDQUFDLEdBQUdULHVCQUF1QlksT0FBTyxFQUFFUixRQUFRRixpQkFBaUJpQixLQUFLLEVBQUU7QUFDNUY7QUFDQSxNQUFNNUIsT0FBTyxDQUFDYyxLQUFLRCxLQUFLZ0I7SUFDcEIsTUFBTUMsT0FBT2QsU0FBU0YsSUFBSUcsS0FBSyxDQUFDLEdBQUcsSUFBSTtJQUN2QyxNQUFNYyxZQUFZLENBQUMsR0FBRyxFQUFFRCxLQUFLLEtBQUssQ0FBQztJQUNuQyxJQUFJLENBQUMsQ0FBQyxHQUFHcEIsYUFBYVcsT0FBTyxFQUFFVSxZQUFZO1FBQ3ZDLE1BQU0sSUFBSTNCLFlBQVk0QixnQkFBZ0IsQ0FBQyxDQUFDLElBQUksRUFBRWxCLElBQUksMkRBQTJELENBQUM7SUFDbEg7SUFDQSxNQUFNbUIsWUFBWWQsZ0JBQWdCTixLQUFLQyxLQUFLO0lBQzVDRixhQUFhcUIsV0FBV25CO0lBQ3hCLE1BQU1vQixTQUFTLENBQUMsR0FBRy9CLFNBQVNnQyxjQUFjLEVBQUVKLFdBQVdFLFdBQVdoQyxTQUFTbUMsTUFBTSxDQUFDQyxLQUFLLENBQUMsR0FBRztJQUMzRixPQUFPLENBQUMsR0FBR2hDLGtCQUFrQmlDLE1BQU0sRUFBRUosT0FBT0ssTUFBTSxDQUFDVixNQUFNSyxPQUFPTSxLQUFLO0FBQ3pFO0FBQ0EzQyxZQUFZLEdBQUdHO0FBQ2YsTUFBTUQsU0FBUyxDQUFDZSxLQUFLRCxLQUFLNEI7SUFDdEIsTUFBTVgsT0FBT2QsU0FBU0YsSUFBSUcsS0FBSyxDQUFDLEdBQUcsSUFBSTtJQUN2QyxNQUFNYyxZQUFZLENBQUMsR0FBRyxFQUFFRCxLQUFLLEtBQUssQ0FBQztJQUNuQyxJQUFJLENBQUMsQ0FBQyxHQUFHcEIsYUFBYVcsT0FBTyxFQUFFVSxZQUFZO1FBQ3ZDLE1BQU0sSUFBSTNCLFlBQVk0QixnQkFBZ0IsQ0FBQyxDQUFDLElBQUksRUFBRWxCLElBQUksMkRBQTJELENBQUM7SUFDbEg7SUFDQSxNQUFNbUIsWUFBWWQsZ0JBQWdCTixLQUFLQyxLQUFLO0lBQzVDRixhQUFhcUIsV0FBV25CO0lBQ3hCLE1BQU1vQixTQUFTLENBQUMsR0FBRy9CLFNBQVN1QyxnQkFBZ0IsRUFBRVgsV0FBV0UsV0FBV2hDLFNBQVNtQyxNQUFNLENBQUNDLEtBQUssQ0FBQyxHQUFHO0lBQzdGLE9BQU8sQ0FBQyxHQUFHaEMsa0JBQWtCaUMsTUFBTSxFQUFFSixPQUFPSyxNQUFNLENBQUNFLGVBQWVQLE9BQU9NLEtBQUs7QUFDbEY7QUFDQTNDLGNBQWMsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2Flc2t3LmpzPzRmOGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVud3JhcCA9IGV4cG9ydHMud3JhcCA9IHZvaWQgMDtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IHdlYmNyeXB0b19qc18xID0gcmVxdWlyZShcIi4vd2ViY3J5cHRvLmpzXCIpO1xuY29uc3QgY3J5cHRvX2tleV9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9jcnlwdG9fa2V5LmpzXCIpO1xuY29uc3QgaXNfa2V5X29iamVjdF9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X29iamVjdC5qc1wiKTtcbmNvbnN0IGludmFsaWRfa2V5X2lucHV0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgY2lwaGVyc19qc18xID0gcmVxdWlyZShcIi4vY2lwaGVycy5qc1wiKTtcbmNvbnN0IGlzX2tleV9saWtlX2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfbGlrZS5qc1wiKTtcbmZ1bmN0aW9uIGNoZWNrS2V5U2l6ZShrZXksIGFsZykge1xuICAgIGlmIChrZXkuc3ltbWV0cmljS2V5U2l6ZSA8PCAzICE9PSBwYXJzZUludChhbGcuc2xpY2UoMSwgNCksIDEwKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGtleSBzaXplIGZvciBhbGc6ICR7YWxnfWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVuc3VyZUtleU9iamVjdChrZXksIGFsZywgdXNhZ2UpIHtcbiAgICBpZiAoKDAsIGlzX2tleV9vYmplY3RfanNfMS5kZWZhdWx0KShrZXkpKSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGlmIChrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiAoMCwgY3J5cHRvXzEuY3JlYXRlU2VjcmV0S2V5KShrZXkpO1xuICAgIH1cbiAgICBpZiAoKDAsIHdlYmNyeXB0b19qc18xLmlzQ3J5cHRvS2V5KShrZXkpKSB7XG4gICAgICAgICgwLCBjcnlwdG9fa2V5X2pzXzEuY2hlY2tFbmNDcnlwdG9LZXkpKGtleSwgYWxnLCB1c2FnZSk7XG4gICAgICAgIHJldHVybiBjcnlwdG9fMS5LZXlPYmplY3QuZnJvbShrZXkpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLmRlZmF1bHQpKGtleSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcywgJ1VpbnQ4QXJyYXknKSk7XG59XG5jb25zdCB3cmFwID0gKGFsZywga2V5LCBjZWspID0+IHtcbiAgICBjb25zdCBzaXplID0gcGFyc2VJbnQoYWxnLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgY29uc3QgYWxnb3JpdGhtID0gYGFlcyR7c2l6ZX0td3JhcGA7XG4gICAgaWYgKCEoMCwgY2lwaGVyc19qc18xLmRlZmF1bHQpKGFsZ29yaXRobSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoYGFsZyAke2FsZ30gaXMgbm90IHN1cHBvcnRlZCBlaXRoZXIgYnkgSk9TRSBvciB5b3VyIGphdmFzY3JpcHQgcnVudGltZWApO1xuICAgIH1cbiAgICBjb25zdCBrZXlPYmplY3QgPSBlbnN1cmVLZXlPYmplY3Qoa2V5LCBhbGcsICd3cmFwS2V5Jyk7XG4gICAgY2hlY2tLZXlTaXplKGtleU9iamVjdCwgYWxnKTtcbiAgICBjb25zdCBjaXBoZXIgPSAoMCwgY3J5cHRvXzEuY3JlYXRlQ2lwaGVyaXYpKGFsZ29yaXRobSwga2V5T2JqZWN0LCBidWZmZXJfMS5CdWZmZXIuYWxsb2MoOCwgMHhhNikpO1xuICAgIHJldHVybiAoMCwgYnVmZmVyX3V0aWxzX2pzXzEuY29uY2F0KShjaXBoZXIudXBkYXRlKGNlayksIGNpcGhlci5maW5hbCgpKTtcbn07XG5leHBvcnRzLndyYXAgPSB3cmFwO1xuY29uc3QgdW53cmFwID0gKGFsZywga2V5LCBlbmNyeXB0ZWRLZXkpID0+IHtcbiAgICBjb25zdCBzaXplID0gcGFyc2VJbnQoYWxnLnNsaWNlKDEsIDQpLCAxMCk7XG4gICAgY29uc3QgYWxnb3JpdGhtID0gYGFlcyR7c2l6ZX0td3JhcGA7XG4gICAgaWYgKCEoMCwgY2lwaGVyc19qc18xLmRlZmF1bHQpKGFsZ29yaXRobSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoYGFsZyAke2FsZ30gaXMgbm90IHN1cHBvcnRlZCBlaXRoZXIgYnkgSk9TRSBvciB5b3VyIGphdmFzY3JpcHQgcnVudGltZWApO1xuICAgIH1cbiAgICBjb25zdCBrZXlPYmplY3QgPSBlbnN1cmVLZXlPYmplY3Qoa2V5LCBhbGcsICd1bndyYXBLZXknKTtcbiAgICBjaGVja0tleVNpemUoa2V5T2JqZWN0LCBhbGcpO1xuICAgIGNvbnN0IGNpcGhlciA9ICgwLCBjcnlwdG9fMS5jcmVhdGVEZWNpcGhlcml2KShhbGdvcml0aG0sIGtleU9iamVjdCwgYnVmZmVyXzEuQnVmZmVyLmFsbG9jKDgsIDB4YTYpKTtcbiAgICByZXR1cm4gKDAsIGJ1ZmZlcl91dGlsc19qc18xLmNvbmNhdCkoY2lwaGVyLnVwZGF0ZShlbmNyeXB0ZWRLZXkpLCBjaXBoZXIuZmluYWwoKSk7XG59O1xuZXhwb3J0cy51bndyYXAgPSB1bndyYXA7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1bndyYXAiLCJ3cmFwIiwiYnVmZmVyXzEiLCJyZXF1aXJlIiwiY3J5cHRvXzEiLCJlcnJvcnNfanNfMSIsImJ1ZmZlcl91dGlsc19qc18xIiwid2ViY3J5cHRvX2pzXzEiLCJjcnlwdG9fa2V5X2pzXzEiLCJpc19rZXlfb2JqZWN0X2pzXzEiLCJpbnZhbGlkX2tleV9pbnB1dF9qc18xIiwiY2lwaGVyc19qc18xIiwiaXNfa2V5X2xpa2VfanNfMSIsImNoZWNrS2V5U2l6ZSIsImtleSIsImFsZyIsInN5bW1ldHJpY0tleVNpemUiLCJwYXJzZUludCIsInNsaWNlIiwiVHlwZUVycm9yIiwiZW5zdXJlS2V5T2JqZWN0IiwidXNhZ2UiLCJkZWZhdWx0IiwiVWludDhBcnJheSIsImNyZWF0ZVNlY3JldEtleSIsImlzQ3J5cHRvS2V5IiwiY2hlY2tFbmNDcnlwdG9LZXkiLCJLZXlPYmplY3QiLCJmcm9tIiwidHlwZXMiLCJjZWsiLCJzaXplIiwiYWxnb3JpdGhtIiwiSk9TRU5vdFN1cHBvcnRlZCIsImtleU9iamVjdCIsImNpcGhlciIsImNyZWF0ZUNpcGhlcml2IiwiQnVmZmVyIiwiYWxsb2MiLCJjb25jYXQiLCJ1cGRhdGUiLCJmaW5hbCIsImVuY3J5cHRlZEtleSIsImNyZWF0ZURlY2lwaGVyaXYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromX509 = exports.fromSPKI = exports.fromPKCS8 = exports.toPKCS8 = exports.toSPKI = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst genericExport = (keyType, keyFormat, key)=>{\n    let keyObject;\n    if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n        if (!key.extractable) {\n            throw new TypeError(\"CryptoKey is not extractable\");\n        }\n        keyObject = crypto_1.KeyObject.from(key);\n    } else if ((0, is_key_object_js_1.default)(key)) {\n        keyObject = key;\n    } else {\n        throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types));\n    }\n    if (keyObject.type !== keyType) {\n        throw new TypeError(`key is not a ${keyType} key`);\n    }\n    return keyObject.export({\n        format: \"pem\",\n        type: keyFormat\n    });\n};\nconst toSPKI = (key)=>{\n    return genericExport(\"public\", \"spki\", key);\n};\nexports.toSPKI = toSPKI;\nconst toPKCS8 = (key)=>{\n    return genericExport(\"private\", \"pkcs8\", key);\n};\nexports.toPKCS8 = toPKCS8;\nconst fromPKCS8 = (pem)=>(0, crypto_1.createPrivateKey)({\n        key: buffer_1.Buffer.from(pem.replace(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\\s)/g, \"\"), \"base64\"),\n        type: \"pkcs8\",\n        format: \"der\"\n    });\nexports.fromPKCS8 = fromPKCS8;\nconst fromSPKI = (pem)=>(0, crypto_1.createPublicKey)({\n        key: buffer_1.Buffer.from(pem.replace(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\\s)/g, \"\"), \"base64\"),\n        type: \"spki\",\n        format: \"der\"\n    });\nexports.fromSPKI = fromSPKI;\nconst fromX509 = (pem)=>(0, crypto_1.createPublicKey)({\n        key: pem,\n        type: \"spki\",\n        format: \"pem\"\n    });\nexports.fromX509 = fromX509;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYXNuMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUdBLGdCQUFnQixHQUFHQSxpQkFBaUIsR0FBR0EsZUFBZSxHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUNsRyxNQUFNTyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNRSxpQkFBaUJGLG1CQUFPQSxDQUFDLCtHQUFnQjtBQUMvQyxNQUFNRyxxQkFBcUJILG1CQUFPQSxDQUFDLHVIQUFvQjtBQUN2RCxNQUFNSSx5QkFBeUJKLG1CQUFPQSxDQUFDLGdJQUE2QjtBQUNwRSxNQUFNSyxtQkFBbUJMLG1CQUFPQSxDQUFDLG1IQUFrQjtBQUNuRCxNQUFNTSxnQkFBZ0IsQ0FBQ0MsU0FBU0MsV0FBV0M7SUFDdkMsSUFBSUM7SUFDSixJQUFJLENBQUMsR0FBR1IsZUFBZVMsV0FBVyxFQUFFRixNQUFNO1FBQ3RDLElBQUksQ0FBQ0EsSUFBSUcsV0FBVyxFQUFFO1lBQ2xCLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBSCxZQUFZWCxTQUFTZSxTQUFTLENBQUNDLElBQUksQ0FBQ047SUFDeEMsT0FDSyxJQUFJLENBQUMsR0FBR04sbUJBQW1CYSxPQUFPLEVBQUVQLE1BQU07UUFDM0NDLFlBQVlEO0lBQ2hCLE9BQ0s7UUFDRCxNQUFNLElBQUlJLFVBQVUsQ0FBQyxHQUFHVCx1QkFBdUJZLE9BQU8sRUFBRVAsUUFBUUosaUJBQWlCWSxLQUFLO0lBQzFGO0lBQ0EsSUFBSVAsVUFBVVEsSUFBSSxLQUFLWCxTQUFTO1FBQzVCLE1BQU0sSUFBSU0sVUFBVSxDQUFDLGFBQWEsRUFBRU4sUUFBUSxJQUFJLENBQUM7SUFDckQ7SUFDQSxPQUFPRyxVQUFVUyxNQUFNLENBQUM7UUFBRUMsUUFBUTtRQUFPRixNQUFNVjtJQUFVO0FBQzdEO0FBQ0EsTUFBTVYsU0FBUyxDQUFDVztJQUNaLE9BQU9ILGNBQWMsVUFBVSxRQUFRRztBQUMzQztBQUNBakIsY0FBYyxHQUFHTTtBQUNqQixNQUFNRCxVQUFVLENBQUNZO0lBQ2IsT0FBT0gsY0FBYyxXQUFXLFNBQVNHO0FBQzdDO0FBQ0FqQixlQUFlLEdBQUdLO0FBQ2xCLE1BQU1ELFlBQVksQ0FBQ3lCLE1BQVEsQ0FBQyxHQUFHdEIsU0FBU3VCLGdCQUFnQixFQUFFO1FBQ3REYixLQUFLUixTQUFTc0IsTUFBTSxDQUFDUixJQUFJLENBQUNNLElBQUlHLE9BQU8sQ0FBQywrQ0FBK0MsS0FBSztRQUMxRk4sTUFBTTtRQUNORSxRQUFRO0lBQ1o7QUFDQTVCLGlCQUFpQixHQUFHSTtBQUNwQixNQUFNRCxXQUFXLENBQUMwQixNQUFRLENBQUMsR0FBR3RCLFNBQVMwQixlQUFlLEVBQUU7UUFDcERoQixLQUFLUixTQUFTc0IsTUFBTSxDQUFDUixJQUFJLENBQUNNLElBQUlHLE9BQU8sQ0FBQyw4Q0FBOEMsS0FBSztRQUN6Rk4sTUFBTTtRQUNORSxRQUFRO0lBQ1o7QUFDQTVCLGdCQUFnQixHQUFHRztBQUNuQixNQUFNRCxXQUFXLENBQUMyQixNQUFRLENBQUMsR0FBR3RCLFNBQVMwQixlQUFlLEVBQUU7UUFDcERoQixLQUFLWTtRQUNMSCxNQUFNO1FBQ05FLFFBQVE7SUFDWjtBQUNBNUIsZ0JBQWdCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9hc24xLmpzP2Q3NTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21YNTA5ID0gZXhwb3J0cy5mcm9tU1BLSSA9IGV4cG9ydHMuZnJvbVBLQ1M4ID0gZXhwb3J0cy50b1BLQ1M4ID0gZXhwb3J0cy50b1NQS0kgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGlzX2tleV9vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9vYmplY3QuanNcIik7XG5jb25zdCBpbnZhbGlkX2tleV9pbnB1dF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qc1wiKTtcbmNvbnN0IGlzX2tleV9saWtlX2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfbGlrZS5qc1wiKTtcbmNvbnN0IGdlbmVyaWNFeHBvcnQgPSAoa2V5VHlwZSwga2V5Rm9ybWF0LCBrZXkpID0+IHtcbiAgICBsZXQga2V5T2JqZWN0O1xuICAgIGlmICgoMCwgd2ViY3J5cHRvX2pzXzEuaXNDcnlwdG9LZXkpKGtleSkpIHtcbiAgICAgICAgaWYgKCFrZXkuZXh0cmFjdGFibGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NyeXB0b0tleSBpcyBub3QgZXh0cmFjdGFibGUnKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlPYmplY3QgPSBjcnlwdG9fMS5LZXlPYmplY3QuZnJvbShrZXkpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAga2V5T2JqZWN0ID0ga2V5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS5kZWZhdWx0KShrZXksIC4uLmlzX2tleV9saWtlX2pzXzEudHlwZXMpKTtcbiAgICB9XG4gICAgaWYgKGtleU9iamVjdC50eXBlICE9PSBrZXlUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGtleSBpcyBub3QgYSAke2tleVR5cGV9IGtleWApO1xuICAgIH1cbiAgICByZXR1cm4ga2V5T2JqZWN0LmV4cG9ydCh7IGZvcm1hdDogJ3BlbScsIHR5cGU6IGtleUZvcm1hdCB9KTtcbn07XG5jb25zdCB0b1NQS0kgPSAoa2V5KSA9PiB7XG4gICAgcmV0dXJuIGdlbmVyaWNFeHBvcnQoJ3B1YmxpYycsICdzcGtpJywga2V5KTtcbn07XG5leHBvcnRzLnRvU1BLSSA9IHRvU1BLSTtcbmNvbnN0IHRvUEtDUzggPSAoa2V5KSA9PiB7XG4gICAgcmV0dXJuIGdlbmVyaWNFeHBvcnQoJ3ByaXZhdGUnLCAncGtjczgnLCBrZXkpO1xufTtcbmV4cG9ydHMudG9QS0NTOCA9IHRvUEtDUzg7XG5jb25zdCBmcm9tUEtDUzggPSAocGVtKSA9PiAoMCwgY3J5cHRvXzEuY3JlYXRlUHJpdmF0ZUtleSkoe1xuICAgIGtleTogYnVmZmVyXzEuQnVmZmVyLmZyb20ocGVtLnJlcGxhY2UoLyg/Oi0tLS0tKD86QkVHSU58RU5EKSBQUklWQVRFIEtFWS0tLS0tfFxccykvZywgJycpLCAnYmFzZTY0JyksXG4gICAgdHlwZTogJ3BrY3M4JyxcbiAgICBmb3JtYXQ6ICdkZXInLFxufSk7XG5leHBvcnRzLmZyb21QS0NTOCA9IGZyb21QS0NTODtcbmNvbnN0IGZyb21TUEtJID0gKHBlbSkgPT4gKDAsIGNyeXB0b18xLmNyZWF0ZVB1YmxpY0tleSkoe1xuICAgIGtleTogYnVmZmVyXzEuQnVmZmVyLmZyb20ocGVtLnJlcGxhY2UoLyg/Oi0tLS0tKD86QkVHSU58RU5EKSBQVUJMSUMgS0VZLS0tLS18XFxzKS9nLCAnJyksICdiYXNlNjQnKSxcbiAgICB0eXBlOiAnc3BraScsXG4gICAgZm9ybWF0OiAnZGVyJyxcbn0pO1xuZXhwb3J0cy5mcm9tU1BLSSA9IGZyb21TUEtJO1xuY29uc3QgZnJvbVg1MDkgPSAocGVtKSA9PiAoMCwgY3J5cHRvXzEuY3JlYXRlUHVibGljS2V5KSh7XG4gICAga2V5OiBwZW0sXG4gICAgdHlwZTogJ3Nwa2knLFxuICAgIGZvcm1hdDogJ3BlbScsXG59KTtcbmV4cG9ydHMuZnJvbVg1MDkgPSBmcm9tWDUwOTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZyb21YNTA5IiwiZnJvbVNQS0kiLCJmcm9tUEtDUzgiLCJ0b1BLQ1M4IiwidG9TUEtJIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwiYnVmZmVyXzEiLCJ3ZWJjcnlwdG9fanNfMSIsImlzX2tleV9vYmplY3RfanNfMSIsImludmFsaWRfa2V5X2lucHV0X2pzXzEiLCJpc19rZXlfbGlrZV9qc18xIiwiZ2VuZXJpY0V4cG9ydCIsImtleVR5cGUiLCJrZXlGb3JtYXQiLCJrZXkiLCJrZXlPYmplY3QiLCJpc0NyeXB0b0tleSIsImV4dHJhY3RhYmxlIiwiVHlwZUVycm9yIiwiS2V5T2JqZWN0IiwiZnJvbSIsImRlZmF1bHQiLCJ0eXBlcyIsInR5cGUiLCJleHBvcnQiLCJmb3JtYXQiLCJwZW0iLCJjcmVhdGVQcml2YXRlS2V5IiwiQnVmZmVyIiwicmVwbGFjZSIsImNyZWF0ZVB1YmxpY0tleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_decoder.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_decoder.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tagInteger = 0x02;\nconst tagSequence = 0x30;\nclass Asn1SequenceDecoder {\n    constructor(buffer){\n        if (buffer[0] !== tagSequence) {\n            throw new TypeError();\n        }\n        this.buffer = buffer;\n        this.offset = 1;\n        const len = this.decodeLength();\n        if (len !== buffer.length - this.offset) {\n            throw new TypeError();\n        }\n    }\n    decodeLength() {\n        let length = this.buffer[this.offset++];\n        if (length & 0x80) {\n            const nBytes = length & ~0x80;\n            length = 0;\n            for(let i = 0; i < nBytes; i++)length = length << 8 | this.buffer[this.offset + i];\n            this.offset += nBytes;\n        }\n        return length;\n    }\n    unsignedInteger() {\n        if (this.buffer[this.offset++] !== tagInteger) {\n            throw new TypeError();\n        }\n        let length = this.decodeLength();\n        if (this.buffer[this.offset] === 0) {\n            this.offset++;\n            length--;\n        }\n        const result = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n    end() {\n        if (this.offset !== this.buffer.length) {\n            throw new TypeError();\n        }\n    }\n}\nexports[\"default\"] = Asn1SequenceDecoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYXNuMV9zZXF1ZW5jZV9kZWNvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsY0FBYztBQUNwQixNQUFNQztJQUNGQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSUEsTUFBTSxDQUFDLEVBQUUsS0FBS0gsYUFBYTtZQUMzQixNQUFNLElBQUlJO1FBQ2Q7UUFDQSxJQUFJLENBQUNELE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNFLE1BQU0sR0FBRztRQUNkLE1BQU1DLE1BQU0sSUFBSSxDQUFDQyxZQUFZO1FBQzdCLElBQUlELFFBQVFILE9BQU9LLE1BQU0sR0FBRyxJQUFJLENBQUNILE1BQU0sRUFBRTtZQUNyQyxNQUFNLElBQUlEO1FBQ2Q7SUFDSjtJQUNBRyxlQUFlO1FBQ1gsSUFBSUMsU0FBUyxJQUFJLENBQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUNFLE1BQU0sR0FBRztRQUN2QyxJQUFJRyxTQUFTLE1BQU07WUFDZixNQUFNQyxTQUFTRCxTQUFTLENBQUM7WUFDekJBLFNBQVM7WUFDVCxJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSUQsUUFBUUMsSUFDeEJGLFNBQVMsVUFBVyxJQUFLLElBQUksQ0FBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQ0UsTUFBTSxHQUFHSyxFQUFFO1lBQ3pELElBQUksQ0FBQ0wsTUFBTSxJQUFJSTtRQUNuQjtRQUNBLE9BQU9EO0lBQ1g7SUFDQUcsa0JBQWtCO1FBQ2QsSUFBSSxJQUFJLENBQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUNFLE1BQU0sR0FBRyxLQUFLTixZQUFZO1lBQzNDLE1BQU0sSUFBSUs7UUFDZDtRQUNBLElBQUlJLFNBQVMsSUFBSSxDQUFDRCxZQUFZO1FBQzlCLElBQUksSUFBSSxDQUFDSixNQUFNLENBQUMsSUFBSSxDQUFDRSxNQUFNLENBQUMsS0FBSyxHQUFHO1lBQ2hDLElBQUksQ0FBQ0EsTUFBTTtZQUNYRztRQUNKO1FBQ0EsTUFBTUksU0FBUyxJQUFJLENBQUNULE1BQU0sQ0FBQ1UsS0FBSyxDQUFDLElBQUksQ0FBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQ0EsTUFBTSxHQUFHRztRQUM1RCxJQUFJLENBQUNILE1BQU0sSUFBSUc7UUFDZixPQUFPSTtJQUNYO0lBQ0FFLE1BQU07UUFDRixJQUFJLElBQUksQ0FBQ1QsTUFBTSxLQUFLLElBQUksQ0FBQ0YsTUFBTSxDQUFDSyxNQUFNLEVBQUU7WUFDcEMsTUFBTSxJQUFJSjtRQUNkO0lBQ0o7QUFDSjtBQUNBUCxrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYXNuMV9zZXF1ZW5jZV9kZWNvZGVyLmpzP2RiYjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0YWdJbnRlZ2VyID0gMHgwMjtcbmNvbnN0IHRhZ1NlcXVlbmNlID0gMHgzMDtcbmNsYXNzIEFzbjFTZXF1ZW5jZURlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGJ1ZmZlcikge1xuICAgICAgICBpZiAoYnVmZmVyWzBdICE9PSB0YWdTZXF1ZW5jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDE7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMuZGVjb2RlTGVuZ3RoKCk7XG4gICAgICAgIGlmIChsZW4gIT09IGJ1ZmZlci5sZW5ndGggLSB0aGlzLm9mZnNldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlY29kZUxlbmd0aCgpIHtcbiAgICAgICAgbGV0IGxlbmd0aCA9IHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdO1xuICAgICAgICBpZiAobGVuZ3RoICYgMHg4MCkge1xuICAgICAgICAgICAgY29uc3QgbkJ5dGVzID0gbGVuZ3RoICYgfjB4ODA7XG4gICAgICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuQnl0ZXM7IGkrKylcbiAgICAgICAgICAgICAgICBsZW5ndGggPSAobGVuZ3RoIDw8IDgpIHwgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQgKyBpXTtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IG5CeXRlcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgICB1bnNpZ25lZEludGVnZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSAhPT0gdGFnSW50ZWdlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsZW5ndGggPSB0aGlzLmRlY29kZUxlbmd0aCgpO1xuICAgICAgICBpZiAodGhpcy5idWZmZXJbdGhpcy5vZmZzZXRdID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBlbmQoKSB7XG4gICAgICAgIGlmICh0aGlzLm9mZnNldCAhPT0gdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBBc24xU2VxdWVuY2VEZWNvZGVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidGFnSW50ZWdlciIsInRhZ1NlcXVlbmNlIiwiQXNuMVNlcXVlbmNlRGVjb2RlciIsImNvbnN0cnVjdG9yIiwiYnVmZmVyIiwiVHlwZUVycm9yIiwib2Zmc2V0IiwibGVuIiwiZGVjb2RlTGVuZ3RoIiwibGVuZ3RoIiwibkJ5dGVzIiwiaSIsInVuc2lnbmVkSW50ZWdlciIsInJlc3VsdCIsInNsaWNlIiwiZW5kIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_decoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_encoder.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_encoder.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst tagInteger = 0x02;\nconst tagBitStr = 0x03;\nconst tagOctStr = 0x04;\nconst tagSequence = 0x30;\nconst bZero = buffer_1.Buffer.from([\n    0x00\n]);\nconst bTagInteger = buffer_1.Buffer.from([\n    tagInteger\n]);\nconst bTagBitStr = buffer_1.Buffer.from([\n    tagBitStr\n]);\nconst bTagSequence = buffer_1.Buffer.from([\n    tagSequence\n]);\nconst bTagOctStr = buffer_1.Buffer.from([\n    tagOctStr\n]);\nconst encodeLength = (len)=>{\n    if (len < 128) return buffer_1.Buffer.from([\n        len\n    ]);\n    const buffer = buffer_1.Buffer.alloc(5);\n    buffer.writeUInt32BE(len, 1);\n    let offset = 1;\n    while(buffer[offset] === 0)offset++;\n    buffer[offset - 1] = 0x80 | 5 - offset;\n    return buffer.slice(offset - 1);\n};\nconst oids = new Map([\n    [\n        \"P-256\",\n        buffer_1.Buffer.from(\"06 08 2A 86 48 CE 3D 03 01 07\".replace(/ /g, \"\"), \"hex\")\n    ],\n    [\n        \"secp256k1\",\n        buffer_1.Buffer.from(\"06 05 2B 81 04 00 0A\".replace(/ /g, \"\"), \"hex\")\n    ],\n    [\n        \"P-384\",\n        buffer_1.Buffer.from(\"06 05 2B 81 04 00 22\".replace(/ /g, \"\"), \"hex\")\n    ],\n    [\n        \"P-521\",\n        buffer_1.Buffer.from(\"06 05 2B 81 04 00 23\".replace(/ /g, \"\"), \"hex\")\n    ],\n    [\n        \"ecPublicKey\",\n        buffer_1.Buffer.from(\"06 07 2A 86 48 CE 3D 02 01\".replace(/ /g, \"\"), \"hex\")\n    ],\n    [\n        \"X25519\",\n        buffer_1.Buffer.from(\"06 03 2B 65 6E\".replace(/ /g, \"\"), \"hex\")\n    ],\n    [\n        \"X448\",\n        buffer_1.Buffer.from(\"06 03 2B 65 6F\".replace(/ /g, \"\"), \"hex\")\n    ],\n    [\n        \"Ed25519\",\n        buffer_1.Buffer.from(\"06 03 2B 65 70\".replace(/ /g, \"\"), \"hex\")\n    ],\n    [\n        \"Ed448\",\n        buffer_1.Buffer.from(\"06 03 2B 65 71\".replace(/ /g, \"\"), \"hex\")\n    ]\n]);\nclass DumbAsn1Encoder {\n    constructor(){\n        this.length = 0;\n        this.elements = [];\n    }\n    oidFor(oid) {\n        const bOid = oids.get(oid);\n        if (!bOid) {\n            throw new errors_js_1.JOSENotSupported(\"Invalid or unsupported OID\");\n        }\n        this.elements.push(bOid);\n        this.length += bOid.length;\n    }\n    zero() {\n        this.elements.push(bTagInteger, buffer_1.Buffer.from([\n            0x01\n        ]), bZero);\n        this.length += 3;\n    }\n    one() {\n        this.elements.push(bTagInteger, buffer_1.Buffer.from([\n            0x01\n        ]), buffer_1.Buffer.from([\n            0x01\n        ]));\n        this.length += 3;\n    }\n    unsignedInteger(integer) {\n        if (integer[0] & 0x80) {\n            const len = encodeLength(integer.length + 1);\n            this.elements.push(bTagInteger, len, bZero, integer);\n            this.length += 2 + len.length + integer.length;\n        } else {\n            let i = 0;\n            while(integer[i] === 0 && (integer[i + 1] & 0x80) === 0)i++;\n            const len = encodeLength(integer.length - i);\n            this.elements.push(bTagInteger, encodeLength(integer.length - i), integer.slice(i));\n            this.length += 1 + len.length + integer.length - i;\n        }\n    }\n    octStr(octStr) {\n        const len = encodeLength(octStr.length);\n        this.elements.push(bTagOctStr, encodeLength(octStr.length), octStr);\n        this.length += 1 + len.length + octStr.length;\n    }\n    bitStr(bitS) {\n        const len = encodeLength(bitS.length + 1);\n        this.elements.push(bTagBitStr, encodeLength(bitS.length + 1), bZero, bitS);\n        this.length += 1 + len.length + bitS.length + 1;\n    }\n    add(seq) {\n        this.elements.push(seq);\n        this.length += seq.length;\n    }\n    end(tag = bTagSequence) {\n        const len = encodeLength(this.length);\n        return buffer_1.Buffer.concat([\n            tag,\n            len,\n            ...this.elements\n        ], 1 + len.length + this.length);\n    }\n}\nexports[\"default\"] = DumbAsn1Encoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_encoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decode = exports.encode = exports.encodeBase64 = exports.decodeBase64 = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nlet encode;\nfunction normalize(input) {\n    let encoded = input;\n    if (encoded instanceof Uint8Array) {\n        encoded = buffer_utils_js_1.decoder.decode(encoded);\n    }\n    return encoded;\n}\nif (buffer_1.Buffer.isEncoding(\"base64url\")) {\n    exports.encode = encode = (input)=>buffer_1.Buffer.from(input).toString(\"base64url\");\n} else {\n    exports.encode = encode = (input)=>buffer_1.Buffer.from(input).toString(\"base64\").replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nconst decodeBase64 = (input)=>buffer_1.Buffer.from(input, \"base64\");\nexports.decodeBase64 = decodeBase64;\nconst encodeBase64 = (input)=>buffer_1.Buffer.from(input).toString(\"base64\");\nexports.encodeBase64 = encodeBase64;\nconst decode = (input)=>buffer_1.Buffer.from(normalize(input), \"base64\");\nexports.decode = decode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYmFzZTY0dXJsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdBLGNBQWMsR0FBR0Esb0JBQW9CLEdBQUdBLG9CQUFvQixHQUFHLEtBQUs7QUFDckYsTUFBTU0sV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQyxzSEFBd0I7QUFDMUQsSUFBSUo7QUFDSixTQUFTTSxVQUFVQyxLQUFLO0lBQ3BCLElBQUlDLFVBQVVEO0lBQ2QsSUFBSUMsbUJBQW1CQyxZQUFZO1FBQy9CRCxVQUFVSCxrQkFBa0JLLE9BQU8sQ0FBQ1gsTUFBTSxDQUFDUztJQUMvQztJQUNBLE9BQU9BO0FBQ1g7QUFDQSxJQUFJTCxTQUFTUSxNQUFNLENBQUNDLFVBQVUsQ0FBQyxjQUFjO0lBQ3pDZixjQUFjLEdBQUdHLFNBQVMsQ0FBQ08sUUFBVUosU0FBU1EsTUFBTSxDQUFDRSxJQUFJLENBQUNOLE9BQU9PLFFBQVEsQ0FBQztBQUM5RSxPQUNLO0lBQ0RqQixjQUFjLEdBQUdHLFNBQVMsQ0FBQ08sUUFBVUosU0FBU1EsTUFBTSxDQUFDRSxJQUFJLENBQUNOLE9BQU9PLFFBQVEsQ0FBQyxVQUFVQyxPQUFPLENBQUMsTUFBTSxJQUFJQSxPQUFPLENBQUMsT0FBTyxLQUFLQSxPQUFPLENBQUMsT0FBTztBQUM3STtBQUNBLE1BQU1iLGVBQWUsQ0FBQ0ssUUFBVUosU0FBU1EsTUFBTSxDQUFDRSxJQUFJLENBQUNOLE9BQU87QUFDNURWLG9CQUFvQixHQUFHSztBQUN2QixNQUFNRCxlQUFlLENBQUNNLFFBQVVKLFNBQVNRLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDTixPQUFPTyxRQUFRLENBQUM7QUFDckVqQixvQkFBb0IsR0FBR0k7QUFDdkIsTUFBTUYsU0FBUyxDQUFDUSxRQUFVSixTQUFTUSxNQUFNLENBQUNFLElBQUksQ0FBQ1AsVUFBVUMsUUFBUTtBQUNqRVYsY0FBYyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYmFzZTY0dXJsLmpzP2I1MGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5lbmNvZGVCYXNlNjQgPSBleHBvcnRzLmRlY29kZUJhc2U2NCA9IHZvaWQgMDtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5sZXQgZW5jb2RlO1xuZnVuY3Rpb24gbm9ybWFsaXplKGlucHV0KSB7XG4gICAgbGV0IGVuY29kZWQgPSBpbnB1dDtcbiAgICBpZiAoZW5jb2RlZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgZW5jb2RlZCA9IGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKGVuY29kZWQpO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlZDtcbn1cbmlmIChidWZmZXJfMS5CdWZmZXIuaXNFbmNvZGluZygnYmFzZTY0dXJsJykpIHtcbiAgICBleHBvcnRzLmVuY29kZSA9IGVuY29kZSA9IChpbnB1dCkgPT4gYnVmZmVyXzEuQnVmZmVyLmZyb20oaW5wdXQpLnRvU3RyaW5nKCdiYXNlNjR1cmwnKTtcbn1cbmVsc2Uge1xuICAgIGV4cG9ydHMuZW5jb2RlID0gZW5jb2RlID0gKGlucHV0KSA9PiBidWZmZXJfMS5CdWZmZXIuZnJvbShpbnB1dCkudG9TdHJpbmcoJ2Jhc2U2NCcpLnJlcGxhY2UoLz0vZywgJycpLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xufVxuY29uc3QgZGVjb2RlQmFzZTY0ID0gKGlucHV0KSA9PiBidWZmZXJfMS5CdWZmZXIuZnJvbShpbnB1dCwgJ2Jhc2U2NCcpO1xuZXhwb3J0cy5kZWNvZGVCYXNlNjQgPSBkZWNvZGVCYXNlNjQ7XG5jb25zdCBlbmNvZGVCYXNlNjQgPSAoaW5wdXQpID0+IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGlucHV0KS50b1N0cmluZygnYmFzZTY0Jyk7XG5leHBvcnRzLmVuY29kZUJhc2U2NCA9IGVuY29kZUJhc2U2NDtcbmNvbnN0IGRlY29kZSA9IChpbnB1dCkgPT4gYnVmZmVyXzEuQnVmZmVyLmZyb20obm9ybWFsaXplKGlucHV0KSwgJ2Jhc2U2NCcpO1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGUiLCJlbmNvZGUiLCJlbmNvZGVCYXNlNjQiLCJkZWNvZGVCYXNlNjQiLCJidWZmZXJfMSIsInJlcXVpcmUiLCJidWZmZXJfdXRpbHNfanNfMSIsIm5vcm1hbGl6ZSIsImlucHV0IiwiZW5jb2RlZCIsIlVpbnQ4QXJyYXkiLCJkZWNvZGVyIiwiQnVmZmVyIiwiaXNFbmNvZGluZyIsImZyb20iLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nfunction cbcTag(aad, iv, ciphertext, macSize, macKey, keySize) {\n    const macData = (0, buffer_utils_js_1.concat)(aad, iv, ciphertext, (0, buffer_utils_js_1.uint64be)(aad.length << 3));\n    const hmac = (0, crypto_1.createHmac)(`sha${macSize}`, macKey);\n    hmac.update(macData);\n    return hmac.digest().slice(0, keySize >> 3);\n}\nexports[\"default\"] = cbcTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvY2JjX3RhZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDLHNIQUF3QjtBQUMxRCxTQUFTRSxPQUFPQyxHQUFHLEVBQUVDLEVBQUUsRUFBRUMsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUN6RCxNQUFNQyxVQUFVLENBQUMsR0FBR1Isa0JBQWtCUyxNQUFNLEVBQUVQLEtBQUtDLElBQUlDLFlBQVksQ0FBQyxHQUFHSixrQkFBa0JVLFFBQVEsRUFBRVIsSUFBSVMsTUFBTSxJQUFJO0lBQ2pILE1BQU1DLE9BQU8sQ0FBQyxHQUFHZCxTQUFTZSxVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQUVSLFFBQVEsQ0FBQyxFQUFFQztJQUN2RE0sS0FBS0UsTUFBTSxDQUFDTjtJQUNaLE9BQU9JLEtBQUtHLE1BQU0sR0FBR0MsS0FBSyxDQUFDLEdBQUdULFdBQVc7QUFDN0M7QUFDQVgsa0JBQWUsR0FBR0siLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2NiY190YWcuanM/MDRjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5mdW5jdGlvbiBjYmNUYWcoYWFkLCBpdiwgY2lwaGVydGV4dCwgbWFjU2l6ZSwgbWFjS2V5LCBrZXlTaXplKSB7XG4gICAgY29uc3QgbWFjRGF0YSA9ICgwLCBidWZmZXJfdXRpbHNfanNfMS5jb25jYXQpKGFhZCwgaXYsIGNpcGhlcnRleHQsICgwLCBidWZmZXJfdXRpbHNfanNfMS51aW50NjRiZSkoYWFkLmxlbmd0aCA8PCAzKSk7XG4gICAgY29uc3QgaG1hYyA9ICgwLCBjcnlwdG9fMS5jcmVhdGVIbWFjKShgc2hhJHttYWNTaXplfWAsIG1hY0tleSk7XG4gICAgaG1hYy51cGRhdGUobWFjRGF0YSk7XG4gICAgcmV0dXJuIGhtYWMuZGlnZXN0KCkuc2xpY2UoMCwga2V5U2l6ZSA+PiAzKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGNiY1RhZztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyeXB0b18xIiwicmVxdWlyZSIsImJ1ZmZlcl91dGlsc19qc18xIiwiY2JjVGFnIiwiYWFkIiwiaXYiLCJjaXBoZXJ0ZXh0IiwibWFjU2l6ZSIsIm1hY0tleSIsImtleVNpemUiLCJtYWNEYXRhIiwiY29uY2F0IiwidWludDY0YmUiLCJsZW5ndGgiLCJobWFjIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCIsInNsaWNlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst checkCekLength = (enc, cek)=>{\n    let expected;\n    switch(enc){\n        case \"A128CBC-HS256\":\n        case \"A192CBC-HS384\":\n        case \"A256CBC-HS512\":\n            expected = parseInt(enc.slice(-3), 10);\n            break;\n        case \"A128GCM\":\n        case \"A192GCM\":\n        case \"A256GCM\":\n            expected = parseInt(enc.slice(1, 4), 10);\n            break;\n        default:\n            throw new errors_js_1.JOSENotSupported(`Content Encryption Algorithm ${enc} is not supported either by JOSE or your javascript runtime`);\n    }\n    if (cek instanceof Uint8Array) {\n        const actual = cek.byteLength << 3;\n        if (actual !== expected) {\n            throw new errors_js_1.JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);\n        }\n        return;\n    }\n    if ((0, is_key_object_js_1.default)(cek) && cek.type === \"secret\") {\n        const actual = cek.symmetricKeySize << 3;\n        if (actual !== expected) {\n            throw new errors_js_1.JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);\n        }\n        return;\n    }\n    throw new TypeError(\"Invalid Content Encryption Key type\");\n};\nexports[\"default\"] = checkCekLength;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvY2hlY2tfY2VrX2xlbmd0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxjQUFjQyxtQkFBT0EsQ0FBQyw0R0FBbUI7QUFDL0MsTUFBTUMscUJBQXFCRCxtQkFBT0EsQ0FBQyx1SEFBb0I7QUFDdkQsTUFBTUUsaUJBQWlCLENBQUNDLEtBQUtDO0lBQ3pCLElBQUlDO0lBQ0osT0FBUUY7UUFDSixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDREUsV0FBV0MsU0FBU0gsSUFBSUksS0FBSyxDQUFDLENBQUMsSUFBSTtZQUNuQztRQUNKLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNERixXQUFXQyxTQUFTSCxJQUFJSSxLQUFLLENBQUMsR0FBRyxJQUFJO1lBQ3JDO1FBQ0o7WUFDSSxNQUFNLElBQUlSLFlBQVlTLGdCQUFnQixDQUFDLENBQUMsNkJBQTZCLEVBQUVMLElBQUksMkRBQTJELENBQUM7SUFDL0k7SUFDQSxJQUFJQyxlQUFlSyxZQUFZO1FBQzNCLE1BQU1DLFNBQVNOLElBQUlPLFVBQVUsSUFBSTtRQUNqQyxJQUFJRCxXQUFXTCxVQUFVO1lBQ3JCLE1BQU0sSUFBSU4sWUFBWWEsVUFBVSxDQUFDLENBQUMsZ0RBQWdELEVBQUVQLFNBQVMsV0FBVyxFQUFFSyxPQUFPLEtBQUssQ0FBQztRQUMzSDtRQUNBO0lBQ0o7SUFDQSxJQUFJLENBQUMsR0FBR1QsbUJBQW1CWSxPQUFPLEVBQUVULFFBQVFBLElBQUlVLElBQUksS0FBSyxVQUFVO1FBQy9ELE1BQU1KLFNBQVNOLElBQUlXLGdCQUFnQixJQUFJO1FBQ3ZDLElBQUlMLFdBQVdMLFVBQVU7WUFDckIsTUFBTSxJQUFJTixZQUFZYSxVQUFVLENBQUMsQ0FBQyxnREFBZ0QsRUFBRVAsU0FBUyxXQUFXLEVBQUVLLE9BQU8sS0FBSyxDQUFDO1FBQzNIO1FBQ0E7SUFDSjtJQUNBLE1BQU0sSUFBSU0sVUFBVTtBQUN4QjtBQUNBbkIsa0JBQWUsR0FBR0siLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2NoZWNrX2Nla19sZW5ndGguanM/ZTFhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgaXNfa2V5X29iamVjdF9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X29iamVjdC5qc1wiKTtcbmNvbnN0IGNoZWNrQ2VrTGVuZ3RoID0gKGVuYywgY2VrKSA9PiB7XG4gICAgbGV0IGV4cGVjdGVkO1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICAgIGNhc2UgJ0ExMjhDQkMtSFMyNTYnOlxuICAgICAgICBjYXNlICdBMTkyQ0JDLUhTMzg0JzpcbiAgICAgICAgY2FzZSAnQTI1NkNCQy1IUzUxMic6XG4gICAgICAgICAgICBleHBlY3RlZCA9IHBhcnNlSW50KGVuYy5zbGljZSgtMyksIDEwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBMTI4R0NNJzpcbiAgICAgICAgY2FzZSAnQTE5MkdDTSc6XG4gICAgICAgIGNhc2UgJ0EyNTZHQ00nOlxuICAgICAgICAgICAgZXhwZWN0ZWQgPSBwYXJzZUludChlbmMuc2xpY2UoMSwgNCksIDEwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoYENvbnRlbnQgRW5jcnlwdGlvbiBBbGdvcml0aG0gJHtlbmN9IGlzIG5vdCBzdXBwb3J0ZWQgZWl0aGVyIGJ5IEpPU0Ugb3IgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWVgKTtcbiAgICB9XG4gICAgaWYgKGNlayBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgY29uc3QgYWN0dWFsID0gY2VrLmJ5dGVMZW5ndGggPDwgMztcbiAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKGBJbnZhbGlkIENvbnRlbnQgRW5jcnlwdGlvbiBLZXkgbGVuZ3RoLiBFeHBlY3RlZCAke2V4cGVjdGVkfSBiaXRzLCBnb3QgJHthY3R1YWx9IGJpdHNgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGNlaykgJiYgY2VrLnR5cGUgPT09ICdzZWNyZXQnKSB7XG4gICAgICAgIGNvbnN0IGFjdHVhbCA9IGNlay5zeW1tZXRyaWNLZXlTaXplIDw8IDM7XG4gICAgICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZChgSW52YWxpZCBDb250ZW50IEVuY3J5cHRpb24gS2V5IGxlbmd0aC4gRXhwZWN0ZWQgJHtleHBlY3RlZH0gYml0cywgZ290ICR7YWN0dWFsfSBiaXRzYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIENvbnRlbnQgRW5jcnlwdGlvbiBLZXkgdHlwZScpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrQ2VrTGVuZ3RoO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXJyb3JzX2pzXzEiLCJyZXF1aXJlIiwiaXNfa2V5X29iamVjdF9qc18xIiwiY2hlY2tDZWtMZW5ndGgiLCJlbmMiLCJjZWsiLCJleHBlY3RlZCIsInBhcnNlSW50Iiwic2xpY2UiLCJKT1NFTm90U3VwcG9ydGVkIiwiVWludDhBcnJheSIsImFjdHVhbCIsImJ5dGVMZW5ndGgiLCJKV0VJbnZhbGlkIiwiZGVmYXVsdCIsInR5cGUiLCJzeW1tZXRyaWNLZXlTaXplIiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setModulusLength = exports.weakMap = void 0;\nexports.weakMap = new WeakMap();\nconst getLength = (buf, index)=>{\n    let len = buf.readUInt8(1);\n    if ((len & 0x80) === 0) {\n        if (index === 0) {\n            return len;\n        }\n        return getLength(buf.subarray(2 + len), index - 1);\n    }\n    const num = len & 0x7f;\n    len = 0;\n    for(let i = 0; i < num; i++){\n        len <<= 8;\n        const j = buf.readUInt8(2 + i);\n        len |= j;\n    }\n    if (index === 0) {\n        return len;\n    }\n    return getLength(buf.subarray(2 + len), index - 1);\n};\nconst getLengthOfSeqIndex = (sequence, index)=>{\n    const len = sequence.readUInt8(1);\n    if ((len & 0x80) === 0) {\n        return getLength(sequence.subarray(2), index);\n    }\n    const num = len & 0x7f;\n    return getLength(sequence.subarray(2 + num), index);\n};\nconst getModulusLength = (key)=>{\n    var _a, _b;\n    if (exports.weakMap.has(key)) {\n        return exports.weakMap.get(key);\n    }\n    const modulusLength = (_b = (_a = key.asymmetricKeyDetails) === null || _a === void 0 ? void 0 : _a.modulusLength) !== null && _b !== void 0 ? _b : getLengthOfSeqIndex(key.export({\n        format: \"der\",\n        type: \"pkcs1\"\n    }), key.type === \"private\" ? 1 : 0) - 1 << 3;\n    exports.weakMap.set(key, modulusLength);\n    return modulusLength;\n};\nconst setModulusLength = (keyObject, modulusLength)=>{\n    exports.weakMap.set(keyObject, modulusLength);\n};\nexports.setModulusLength = setModulusLength;\nexports[\"default\"] = (key, alg)=>{\n    if (getModulusLength(key) < 2048) {\n        throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvY2hlY2tfbW9kdWx1c19sZW5ndGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHdCQUF3QixHQUFHQSxlQUFlLEdBQUcsS0FBSztBQUNsREEsZUFBZSxHQUFHLElBQUlJO0FBQ3RCLE1BQU1DLFlBQVksQ0FBQ0MsS0FBS0M7SUFDcEIsSUFBSUMsTUFBTUYsSUFBSUcsU0FBUyxDQUFDO0lBQ3hCLElBQUksQ0FBQ0QsTUFBTSxJQUFHLE1BQU8sR0FBRztRQUNwQixJQUFJRCxVQUFVLEdBQUc7WUFDYixPQUFPQztRQUNYO1FBQ0EsT0FBT0gsVUFBVUMsSUFBSUksUUFBUSxDQUFDLElBQUlGLE1BQU1ELFFBQVE7SUFDcEQ7SUFDQSxNQUFNSSxNQUFNSCxNQUFNO0lBQ2xCQSxNQUFNO0lBQ04sSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlELEtBQUtDLElBQUs7UUFDMUJKLFFBQVE7UUFDUixNQUFNSyxJQUFJUCxJQUFJRyxTQUFTLENBQUMsSUFBSUc7UUFDNUJKLE9BQU9LO0lBQ1g7SUFDQSxJQUFJTixVQUFVLEdBQUc7UUFDYixPQUFPQztJQUNYO0lBQ0EsT0FBT0gsVUFBVUMsSUFBSUksUUFBUSxDQUFDLElBQUlGLE1BQU1ELFFBQVE7QUFDcEQ7QUFDQSxNQUFNTyxzQkFBc0IsQ0FBQ0MsVUFBVVI7SUFDbkMsTUFBTUMsTUFBTU8sU0FBU04sU0FBUyxDQUFDO0lBQy9CLElBQUksQ0FBQ0QsTUFBTSxJQUFHLE1BQU8sR0FBRztRQUNwQixPQUFPSCxVQUFVVSxTQUFTTCxRQUFRLENBQUMsSUFBSUg7SUFDM0M7SUFDQSxNQUFNSSxNQUFNSCxNQUFNO0lBQ2xCLE9BQU9ILFVBQVVVLFNBQVNMLFFBQVEsQ0FBQyxJQUFJQyxNQUFNSjtBQUNqRDtBQUNBLE1BQU1TLG1CQUFtQixDQUFDQztJQUN0QixJQUFJQyxJQUFJQztJQUNSLElBQUluQixRQUFRRyxPQUFPLENBQUNpQixHQUFHLENBQUNILE1BQU07UUFDMUIsT0FBT2pCLFFBQVFHLE9BQU8sQ0FBQ2tCLEdBQUcsQ0FBQ0o7SUFDL0I7SUFDQSxNQUFNSyxnQkFBZ0IsQ0FBQ0gsS0FBSyxDQUFDRCxLQUFLRCxJQUFJTSxvQkFBb0IsTUFBTSxRQUFRTCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdJLGFBQWEsTUFBTSxRQUFRSCxPQUFPLEtBQUssSUFBSUEsS0FBSyxvQkFBcUJGLElBQUlPLE1BQU0sQ0FBQztRQUFFQyxRQUFRO1FBQU9DLE1BQU07SUFBUSxJQUFJVCxJQUFJUyxJQUFJLEtBQUssWUFBWSxJQUFJLEtBQ2hQLEtBQ0E7SUFDSjFCLFFBQVFHLE9BQU8sQ0FBQ3dCLEdBQUcsQ0FBQ1YsS0FBS0s7SUFDekIsT0FBT0E7QUFDWDtBQUNBLE1BQU1wQixtQkFBbUIsQ0FBQzBCLFdBQVdOO0lBQ2pDdEIsUUFBUUcsT0FBTyxDQUFDd0IsR0FBRyxDQUFDQyxXQUFXTjtBQUNuQztBQUNBdEIsd0JBQXdCLEdBQUdFO0FBQzNCRixrQkFBZSxHQUFHLENBQUNpQixLQUFLYTtJQUNwQixJQUFJZCxpQkFBaUJDLE9BQU8sTUFBTTtRQUM5QixNQUFNLElBQUljLFVBQVUsQ0FBQyxFQUFFRCxJQUFJLHFEQUFxRCxDQUFDO0lBQ3JGO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2NoZWNrX21vZHVsdXNfbGVuZ3RoLmpzPzZhNjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldE1vZHVsdXNMZW5ndGggPSBleHBvcnRzLndlYWtNYXAgPSB2b2lkIDA7XG5leHBvcnRzLndlYWtNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgZ2V0TGVuZ3RoID0gKGJ1ZiwgaW5kZXgpID0+IHtcbiAgICBsZXQgbGVuID0gYnVmLnJlYWRVSW50OCgxKTtcbiAgICBpZiAoKGxlbiAmIDB4ODApID09PSAwKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0TGVuZ3RoKGJ1Zi5zdWJhcnJheSgyICsgbGVuKSwgaW5kZXggLSAxKTtcbiAgICB9XG4gICAgY29uc3QgbnVtID0gbGVuICYgMHg3ZjtcbiAgICBsZW4gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICAgICAgbGVuIDw8PSA4O1xuICAgICAgICBjb25zdCBqID0gYnVmLnJlYWRVSW50OCgyICsgaSk7XG4gICAgICAgIGxlbiB8PSBqO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGxlbjtcbiAgICB9XG4gICAgcmV0dXJuIGdldExlbmd0aChidWYuc3ViYXJyYXkoMiArIGxlbiksIGluZGV4IC0gMSk7XG59O1xuY29uc3QgZ2V0TGVuZ3RoT2ZTZXFJbmRleCA9IChzZXF1ZW5jZSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBsZW4gPSBzZXF1ZW5jZS5yZWFkVUludDgoMSk7XG4gICAgaWYgKChsZW4gJiAweDgwKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZ2V0TGVuZ3RoKHNlcXVlbmNlLnN1YmFycmF5KDIpLCBpbmRleCk7XG4gICAgfVxuICAgIGNvbnN0IG51bSA9IGxlbiAmIDB4N2Y7XG4gICAgcmV0dXJuIGdldExlbmd0aChzZXF1ZW5jZS5zdWJhcnJheSgyICsgbnVtKSwgaW5kZXgpO1xufTtcbmNvbnN0IGdldE1vZHVsdXNMZW5ndGggPSAoa2V5KSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAoZXhwb3J0cy53ZWFrTWFwLmhhcyhrZXkpKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLndlYWtNYXAuZ2V0KGtleSk7XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsdXNMZW5ndGggPSAoX2IgPSAoX2EgPSBrZXkuYXN5bW1ldHJpY0tleURldGFpbHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tb2R1bHVzTGVuZ3RoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAoZ2V0TGVuZ3RoT2ZTZXFJbmRleChrZXkuZXhwb3J0KHsgZm9ybWF0OiAnZGVyJywgdHlwZTogJ3BrY3MxJyB9KSwga2V5LnR5cGUgPT09ICdwcml2YXRlJyA/IDEgOiAwKSAtXG4gICAgICAgIDEpIDw8XG4gICAgICAgIDM7XG4gICAgZXhwb3J0cy53ZWFrTWFwLnNldChrZXksIG1vZHVsdXNMZW5ndGgpO1xuICAgIHJldHVybiBtb2R1bHVzTGVuZ3RoO1xufTtcbmNvbnN0IHNldE1vZHVsdXNMZW5ndGggPSAoa2V5T2JqZWN0LCBtb2R1bHVzTGVuZ3RoKSA9PiB7XG4gICAgZXhwb3J0cy53ZWFrTWFwLnNldChrZXlPYmplY3QsIG1vZHVsdXNMZW5ndGgpO1xufTtcbmV4cG9ydHMuc2V0TW9kdWx1c0xlbmd0aCA9IHNldE1vZHVsdXNMZW5ndGg7XG5leHBvcnRzLmRlZmF1bHQgPSAoa2V5LCBhbGcpID0+IHtcbiAgICBpZiAoZ2V0TW9kdWx1c0xlbmd0aChrZXkpIDwgMjA0OCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2FsZ30gcmVxdWlyZXMga2V5IG1vZHVsdXNMZW5ndGggdG8gYmUgMjA0OCBiaXRzIG9yIGxhcmdlcmApO1xuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzZXRNb2R1bHVzTGVuZ3RoIiwid2Vha01hcCIsIldlYWtNYXAiLCJnZXRMZW5ndGgiLCJidWYiLCJpbmRleCIsImxlbiIsInJlYWRVSW50OCIsInN1YmFycmF5IiwibnVtIiwiaSIsImoiLCJnZXRMZW5ndGhPZlNlcUluZGV4Iiwic2VxdWVuY2UiLCJnZXRNb2R1bHVzTGVuZ3RoIiwia2V5IiwiX2EiLCJfYiIsImhhcyIsImdldCIsIm1vZHVsdXNMZW5ndGgiLCJhc3ltbWV0cmljS2V5RGV0YWlscyIsImV4cG9ydCIsImZvcm1hdCIsInR5cGUiLCJzZXQiLCJrZXlPYmplY3QiLCJkZWZhdWx0IiwiYWxnIiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nlet ciphers;\nexports[\"default\"] = (algorithm)=>{\n    ciphers || (ciphers = new Set((0, crypto_1.getCiphers)()));\n    return ciphers.has(algorithm);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvY2lwaGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxJQUFJQztBQUNKSixrQkFBZSxHQUFHLENBQUNNO0lBQ2ZGLFdBQVlBLENBQUFBLFVBQVUsSUFBSUcsSUFBSSxDQUFDLEdBQUdMLFNBQVNNLFVBQVUsSUFBRztJQUN4RCxPQUFPSixRQUFRSyxHQUFHLENBQUNIO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9jaXBoZXJzLmpzPzNjM2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5sZXQgY2lwaGVycztcbmV4cG9ydHMuZGVmYXVsdCA9IChhbGdvcml0aG0pID0+IHtcbiAgICBjaXBoZXJzIHx8IChjaXBoZXJzID0gbmV3IFNldCgoMCwgY3J5cHRvXzEuZ2V0Q2lwaGVycykoKSkpO1xuICAgIHJldHVybiBjaXBoZXJzLmhhcyhhbGdvcml0aG0pO1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyeXB0b18xIiwicmVxdWlyZSIsImNpcGhlcnMiLCJkZWZhdWx0IiwiYWxnb3JpdGhtIiwiU2V0IiwiZ2V0Q2lwaGVycyIsImhhcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst check_iv_length_js_1 = __webpack_require__(/*! ../lib/check_iv_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js\");\nconst check_cek_length_js_1 = __webpack_require__(/*! ./check_cek_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst timing_safe_equal_js_1 = __webpack_require__(/*! ./timing_safe_equal.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/timing_safe_equal.js\");\nconst cbc_tag_js_1 = __webpack_require__(/*! ./cbc_tag.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst ciphers_js_1 = __webpack_require__(/*! ./ciphers.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nfunction cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {\n    const keySize = parseInt(enc.slice(1, 4), 10);\n    if ((0, is_key_object_js_1.default)(cek)) {\n        cek = cek.export();\n    }\n    const encKey = cek.subarray(keySize >> 3);\n    const macKey = cek.subarray(0, keySize >> 3);\n    const macSize = parseInt(enc.slice(-3), 10);\n    const algorithm = `aes-${keySize}-cbc`;\n    if (!(0, ciphers_js_1.default)(algorithm)) {\n        throw new errors_js_1.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);\n    }\n    const expectedTag = (0, cbc_tag_js_1.default)(aad, iv, ciphertext, macSize, macKey, keySize);\n    let macCheckPassed;\n    try {\n        macCheckPassed = (0, timing_safe_equal_js_1.default)(tag, expectedTag);\n    } catch  {}\n    if (!macCheckPassed) {\n        throw new errors_js_1.JWEDecryptionFailed();\n    }\n    let plaintext;\n    try {\n        const decipher = (0, crypto_1.createDecipheriv)(algorithm, encKey, iv);\n        plaintext = (0, buffer_utils_js_1.concat)(decipher.update(ciphertext), decipher.final());\n    } catch  {}\n    if (!plaintext) {\n        throw new errors_js_1.JWEDecryptionFailed();\n    }\n    return plaintext;\n}\nfunction gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {\n    const keySize = parseInt(enc.slice(1, 4), 10);\n    const algorithm = `aes-${keySize}-gcm`;\n    if (!(0, ciphers_js_1.default)(algorithm)) {\n        throw new errors_js_1.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);\n    }\n    try {\n        const decipher = (0, crypto_1.createDecipheriv)(algorithm, cek, iv, {\n            authTagLength: 16\n        });\n        decipher.setAuthTag(tag);\n        if (aad.byteLength) {\n            decipher.setAAD(aad, {\n                plaintextLength: ciphertext.length\n            });\n        }\n        const plaintext = decipher.update(ciphertext);\n        decipher.final();\n        return plaintext;\n    } catch  {\n        throw new errors_js_1.JWEDecryptionFailed();\n    }\n}\nconst decrypt = (enc, cek, ciphertext, iv, tag, aad)=>{\n    let key;\n    if ((0, webcrypto_js_1.isCryptoKey)(cek)) {\n        (0, crypto_key_js_1.checkEncCryptoKey)(cek, enc, \"decrypt\");\n        key = crypto_1.KeyObject.from(cek);\n    } else if (cek instanceof Uint8Array || (0, is_key_object_js_1.default)(cek)) {\n        key = cek;\n    } else {\n        throw new TypeError((0, invalid_key_input_js_1.default)(cek, ...is_key_like_js_1.types, \"Uint8Array\"));\n    }\n    (0, check_cek_length_js_1.default)(enc, key);\n    (0, check_iv_length_js_1.default)(enc, iv);\n    switch(enc){\n        case \"A128CBC-HS256\":\n        case \"A192CBC-HS384\":\n        case \"A256CBC-HS512\":\n            return cbcDecrypt(enc, key, ciphertext, iv, tag, aad);\n        case \"A128GCM\":\n        case \"A192GCM\":\n        case \"A256GCM\":\n            return gcmDecrypt(enc, key, ciphertext, iv, tag, aad);\n        default:\n            throw new errors_js_1.JOSENotSupported(\"Unsupported JWE Content Encryption Algorithm\");\n    }\n};\nexports[\"default\"] = decrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZGVjcnlwdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNQyx1QkFBdUJELG1CQUFPQSxDQUFDLDRIQUEyQjtBQUNoRSxNQUFNRSx3QkFBd0JGLG1CQUFPQSxDQUFDLDZIQUF1QjtBQUM3RCxNQUFNRyxvQkFBb0JILG1CQUFPQSxDQUFDLHNIQUF3QjtBQUMxRCxNQUFNSSxjQUFjSixtQkFBT0EsQ0FBQyw0R0FBbUI7QUFDL0MsTUFBTUsseUJBQXlCTCxtQkFBT0EsQ0FBQywrSEFBd0I7QUFDL0QsTUFBTU0sZUFBZU4sbUJBQU9BLENBQUMsMkdBQWM7QUFDM0MsTUFBTU8saUJBQWlCUCxtQkFBT0EsQ0FBQywrR0FBZ0I7QUFDL0MsTUFBTVEsa0JBQWtCUixtQkFBT0EsQ0FBQyxrSEFBc0I7QUFDdEQsTUFBTVMscUJBQXFCVCxtQkFBT0EsQ0FBQyx1SEFBb0I7QUFDdkQsTUFBTVUseUJBQXlCVixtQkFBT0EsQ0FBQyxnSUFBNkI7QUFDcEUsTUFBTVcsZUFBZVgsbUJBQU9BLENBQUMsMkdBQWM7QUFDM0MsTUFBTVksbUJBQW1CWixtQkFBT0EsQ0FBQyxtSEFBa0I7QUFDbkQsU0FBU2EsV0FBV0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLFVBQVUsRUFBRUMsRUFBRSxFQUFFQyxHQUFHLEVBQUVDLEdBQUc7SUFDbEQsTUFBTUMsVUFBVUMsU0FBU1AsSUFBSVEsS0FBSyxDQUFDLEdBQUcsSUFBSTtJQUMxQyxJQUFJLENBQUMsR0FBR2IsbUJBQW1CYyxPQUFPLEVBQUVSLE1BQU07UUFDdENBLE1BQU1BLElBQUlTLE1BQU07SUFDcEI7SUFDQSxNQUFNQyxTQUFTVixJQUFJVyxRQUFRLENBQUNOLFdBQVc7SUFDdkMsTUFBTU8sU0FBU1osSUFBSVcsUUFBUSxDQUFDLEdBQUdOLFdBQVc7SUFDMUMsTUFBTVEsVUFBVVAsU0FBU1AsSUFBSVEsS0FBSyxDQUFDLENBQUMsSUFBSTtJQUN4QyxNQUFNTyxZQUFZLENBQUMsSUFBSSxFQUFFVCxRQUFRLElBQUksQ0FBQztJQUN0QyxJQUFJLENBQUMsQ0FBQyxHQUFHVCxhQUFhWSxPQUFPLEVBQUVNLFlBQVk7UUFDdkMsTUFBTSxJQUFJekIsWUFBWTBCLGdCQUFnQixDQUFDLENBQUMsSUFBSSxFQUFFaEIsSUFBSSw0Q0FBNEMsQ0FBQztJQUNuRztJQUNBLE1BQU1pQixjQUFjLENBQUMsR0FBR3pCLGFBQWFpQixPQUFPLEVBQUVKLEtBQUtGLElBQUlELFlBQVlZLFNBQVNELFFBQVFQO0lBQ3BGLElBQUlZO0lBQ0osSUFBSTtRQUNBQSxpQkFBaUIsQ0FBQyxHQUFHM0IsdUJBQXVCa0IsT0FBTyxFQUFFTCxLQUFLYTtJQUM5RCxFQUNBLE9BQU0sQ0FDTjtJQUNBLElBQUksQ0FBQ0MsZ0JBQWdCO1FBQ2pCLE1BQU0sSUFBSTVCLFlBQVk2QixtQkFBbUI7SUFDN0M7SUFDQSxJQUFJQztJQUNKLElBQUk7UUFDQSxNQUFNQyxXQUFXLENBQUMsR0FBR3BDLFNBQVNxQyxnQkFBZ0IsRUFBRVAsV0FBV0osUUFBUVI7UUFDbkVpQixZQUFZLENBQUMsR0FBRy9CLGtCQUFrQmtDLE1BQU0sRUFBRUYsU0FBU0csTUFBTSxDQUFDdEIsYUFBYW1CLFNBQVNJLEtBQUs7SUFDekYsRUFDQSxPQUFNLENBQ047SUFDQSxJQUFJLENBQUNMLFdBQVc7UUFDWixNQUFNLElBQUk5QixZQUFZNkIsbUJBQW1CO0lBQzdDO0lBQ0EsT0FBT0M7QUFDWDtBQUNBLFNBQVNNLFdBQVcxQixHQUFHLEVBQUVDLEdBQUcsRUFBRUMsVUFBVSxFQUFFQyxFQUFFLEVBQUVDLEdBQUcsRUFBRUMsR0FBRztJQUNsRCxNQUFNQyxVQUFVQyxTQUFTUCxJQUFJUSxLQUFLLENBQUMsR0FBRyxJQUFJO0lBQzFDLE1BQU1PLFlBQVksQ0FBQyxJQUFJLEVBQUVULFFBQVEsSUFBSSxDQUFDO0lBQ3RDLElBQUksQ0FBQyxDQUFDLEdBQUdULGFBQWFZLE9BQU8sRUFBRU0sWUFBWTtRQUN2QyxNQUFNLElBQUl6QixZQUFZMEIsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUVoQixJQUFJLDRDQUE0QyxDQUFDO0lBQ25HO0lBQ0EsSUFBSTtRQUNBLE1BQU1xQixXQUFXLENBQUMsR0FBR3BDLFNBQVNxQyxnQkFBZ0IsRUFBRVAsV0FBV2QsS0FBS0UsSUFBSTtZQUFFd0IsZUFBZTtRQUFHO1FBQ3hGTixTQUFTTyxVQUFVLENBQUN4QjtRQUNwQixJQUFJQyxJQUFJd0IsVUFBVSxFQUFFO1lBQ2hCUixTQUFTUyxNQUFNLENBQUN6QixLQUFLO2dCQUFFMEIsaUJBQWlCN0IsV0FBVzhCLE1BQU07WUFBQztRQUM5RDtRQUNBLE1BQU1aLFlBQVlDLFNBQVNHLE1BQU0sQ0FBQ3RCO1FBQ2xDbUIsU0FBU0ksS0FBSztRQUNkLE9BQU9MO0lBQ1gsRUFDQSxPQUFNO1FBQ0YsTUFBTSxJQUFJOUIsWUFBWTZCLG1CQUFtQjtJQUM3QztBQUNKO0FBQ0EsTUFBTWMsVUFBVSxDQUFDakMsS0FBS0MsS0FBS0MsWUFBWUMsSUFBSUMsS0FBS0M7SUFDNUMsSUFBSTZCO0lBQ0osSUFBSSxDQUFDLEdBQUd6QyxlQUFlMEMsV0FBVyxFQUFFbEMsTUFBTTtRQUNyQyxJQUFHUCxnQkFBZ0IwQyxpQkFBaUIsRUFBRW5DLEtBQUtELEtBQUs7UUFDakRrQyxNQUFNakQsU0FBU29ELFNBQVMsQ0FBQ0MsSUFBSSxDQUFDckM7SUFDbEMsT0FDSyxJQUFJQSxlQUFlc0MsY0FBYyxDQUFDLEdBQUc1QyxtQkFBbUJjLE9BQU8sRUFBRVIsTUFBTTtRQUN4RWlDLE1BQU1qQztJQUNWLE9BQ0s7UUFDRCxNQUFNLElBQUl1QyxVQUFVLENBQUMsR0FBRzVDLHVCQUF1QmEsT0FBTyxFQUFFUixRQUFRSCxpQkFBaUIyQyxLQUFLLEVBQUU7SUFDNUY7SUFDQyxJQUFHckQsc0JBQXNCcUIsT0FBTyxFQUFFVCxLQUFLa0M7SUFDdkMsSUFBRy9DLHFCQUFxQnNCLE9BQU8sRUFBRVQsS0FBS0c7SUFDdkMsT0FBUUg7UUFDSixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPRCxXQUFXQyxLQUFLa0MsS0FBS2hDLFlBQVlDLElBQUlDLEtBQUtDO1FBQ3JELEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNELE9BQU9xQixXQUFXMUIsS0FBS2tDLEtBQUtoQyxZQUFZQyxJQUFJQyxLQUFLQztRQUNyRDtZQUNJLE1BQU0sSUFBSWYsWUFBWTBCLGdCQUFnQixDQUFDO0lBQy9DO0FBQ0o7QUFDQWpDLGtCQUFlLEdBQUdrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZGVjcnlwdC5qcz82MmY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgY2hlY2tfaXZfbGVuZ3RoX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NoZWNrX2l2X2xlbmd0aC5qc1wiKTtcbmNvbnN0IGNoZWNrX2Nla19sZW5ndGhfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrX2Nla19sZW5ndGguanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCB0aW1pbmdfc2FmZV9lcXVhbF9qc18xID0gcmVxdWlyZShcIi4vdGltaW5nX3NhZmVfZXF1YWwuanNcIik7XG5jb25zdCBjYmNfdGFnX2pzXzEgPSByZXF1aXJlKFwiLi9jYmNfdGFnLmpzXCIpO1xuY29uc3Qgd2ViY3J5cHRvX2pzXzEgPSByZXF1aXJlKFwiLi93ZWJjcnlwdG8uanNcIik7XG5jb25zdCBjcnlwdG9fa2V5X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NyeXB0b19rZXkuanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuY29uc3QgaW52YWxpZF9rZXlfaW5wdXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanNcIik7XG5jb25zdCBjaXBoZXJzX2pzXzEgPSByZXF1aXJlKFwiLi9jaXBoZXJzLmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuZnVuY3Rpb24gY2JjRGVjcnlwdChlbmMsIGNlaywgY2lwaGVydGV4dCwgaXYsIHRhZywgYWFkKSB7XG4gICAgY29uc3Qga2V5U2l6ZSA9IHBhcnNlSW50KGVuYy5zbGljZSgxLCA0KSwgMTApO1xuICAgIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGNlaykpIHtcbiAgICAgICAgY2VrID0gY2VrLmV4cG9ydCgpO1xuICAgIH1cbiAgICBjb25zdCBlbmNLZXkgPSBjZWsuc3ViYXJyYXkoa2V5U2l6ZSA+PiAzKTtcbiAgICBjb25zdCBtYWNLZXkgPSBjZWsuc3ViYXJyYXkoMCwga2V5U2l6ZSA+PiAzKTtcbiAgICBjb25zdCBtYWNTaXplID0gcGFyc2VJbnQoZW5jLnNsaWNlKC0zKSwgMTApO1xuICAgIGNvbnN0IGFsZ29yaXRobSA9IGBhZXMtJHtrZXlTaXplfS1jYmNgO1xuICAgIGlmICghKDAsIGNpcGhlcnNfanNfMS5kZWZhdWx0KShhbGdvcml0aG0pKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKGBhbGcgJHtlbmN9IGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWVgKTtcbiAgICB9XG4gICAgY29uc3QgZXhwZWN0ZWRUYWcgPSAoMCwgY2JjX3RhZ19qc18xLmRlZmF1bHQpKGFhZCwgaXYsIGNpcGhlcnRleHQsIG1hY1NpemUsIG1hY0tleSwga2V5U2l6ZSk7XG4gICAgbGV0IG1hY0NoZWNrUGFzc2VkO1xuICAgIHRyeSB7XG4gICAgICAgIG1hY0NoZWNrUGFzc2VkID0gKDAsIHRpbWluZ19zYWZlX2VxdWFsX2pzXzEuZGVmYXVsdCkodGFnLCBleHBlY3RlZFRhZyk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICB9XG4gICAgaWYgKCFtYWNDaGVja1Bhc3NlZCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFRGVjcnlwdGlvbkZhaWxlZCgpO1xuICAgIH1cbiAgICBsZXQgcGxhaW50ZXh0O1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRlY2lwaGVyID0gKDAsIGNyeXB0b18xLmNyZWF0ZURlY2lwaGVyaXYpKGFsZ29yaXRobSwgZW5jS2V5LCBpdik7XG4gICAgICAgIHBsYWludGV4dCA9ICgwLCBidWZmZXJfdXRpbHNfanNfMS5jb25jYXQpKGRlY2lwaGVyLnVwZGF0ZShjaXBoZXJ0ZXh0KSwgZGVjaXBoZXIuZmluYWwoKSk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICB9XG4gICAgaWYgKCFwbGFpbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRURlY3J5cHRpb25GYWlsZWQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHBsYWludGV4dDtcbn1cbmZ1bmN0aW9uIGdjbURlY3J5cHQoZW5jLCBjZWssIGNpcGhlcnRleHQsIGl2LCB0YWcsIGFhZCkge1xuICAgIGNvbnN0IGtleVNpemUgPSBwYXJzZUludChlbmMuc2xpY2UoMSwgNCksIDEwKTtcbiAgICBjb25zdCBhbGdvcml0aG0gPSBgYWVzLSR7a2V5U2l6ZX0tZ2NtYDtcbiAgICBpZiAoISgwLCBjaXBoZXJzX2pzXzEuZGVmYXVsdCkoYWxnb3JpdGhtKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgYWxnICR7ZW5jfSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgamF2YXNjcmlwdCBydW50aW1lYCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRlY2lwaGVyID0gKDAsIGNyeXB0b18xLmNyZWF0ZURlY2lwaGVyaXYpKGFsZ29yaXRobSwgY2VrLCBpdiwgeyBhdXRoVGFnTGVuZ3RoOiAxNiB9KTtcbiAgICAgICAgZGVjaXBoZXIuc2V0QXV0aFRhZyh0YWcpO1xuICAgICAgICBpZiAoYWFkLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIGRlY2lwaGVyLnNldEFBRChhYWQsIHsgcGxhaW50ZXh0TGVuZ3RoOiBjaXBoZXJ0ZXh0Lmxlbmd0aCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbGFpbnRleHQgPSBkZWNpcGhlci51cGRhdGUoY2lwaGVydGV4dCk7XG4gICAgICAgIGRlY2lwaGVyLmZpbmFsKCk7XG4gICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRURlY3J5cHRpb25GYWlsZWQoKTtcbiAgICB9XG59XG5jb25zdCBkZWNyeXB0ID0gKGVuYywgY2VrLCBjaXBoZXJ0ZXh0LCBpdiwgdGFnLCBhYWQpID0+IHtcbiAgICBsZXQga2V5O1xuICAgIGlmICgoMCwgd2ViY3J5cHRvX2pzXzEuaXNDcnlwdG9LZXkpKGNlaykpIHtcbiAgICAgICAgKDAsIGNyeXB0b19rZXlfanNfMS5jaGVja0VuY0NyeXB0b0tleSkoY2VrLCBlbmMsICdkZWNyeXB0Jyk7XG4gICAgICAgIGtleSA9IGNyeXB0b18xLktleU9iamVjdC5mcm9tKGNlayk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNlayBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgKDAsIGlzX2tleV9vYmplY3RfanNfMS5kZWZhdWx0KShjZWspKSB7XG4gICAgICAgIGtleSA9IGNlaztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoY2VrLCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzLCAnVWludDhBcnJheScpKTtcbiAgICB9XG4gICAgKDAsIGNoZWNrX2Nla19sZW5ndGhfanNfMS5kZWZhdWx0KShlbmMsIGtleSk7XG4gICAgKDAsIGNoZWNrX2l2X2xlbmd0aF9qc18xLmRlZmF1bHQpKGVuYywgaXYpO1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICAgIGNhc2UgJ0ExMjhDQkMtSFMyNTYnOlxuICAgICAgICBjYXNlICdBMTkyQ0JDLUhTMzg0JzpcbiAgICAgICAgY2FzZSAnQTI1NkNCQy1IUzUxMic6XG4gICAgICAgICAgICByZXR1cm4gY2JjRGVjcnlwdChlbmMsIGtleSwgY2lwaGVydGV4dCwgaXYsIHRhZywgYWFkKTtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ00nOlxuICAgICAgICBjYXNlICdBMjU2R0NNJzpcbiAgICAgICAgICAgIHJldHVybiBnY21EZWNyeXB0KGVuYywga2V5LCBjaXBoZXJ0ZXh0LCBpdiwgdGFnLCBhYWQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIEpXRSBDb250ZW50IEVuY3J5cHRpb24gQWxnb3JpdGhtJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlY3J5cHQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJjaGVja19pdl9sZW5ndGhfanNfMSIsImNoZWNrX2Nla19sZW5ndGhfanNfMSIsImJ1ZmZlcl91dGlsc19qc18xIiwiZXJyb3JzX2pzXzEiLCJ0aW1pbmdfc2FmZV9lcXVhbF9qc18xIiwiY2JjX3RhZ19qc18xIiwid2ViY3J5cHRvX2pzXzEiLCJjcnlwdG9fa2V5X2pzXzEiLCJpc19rZXlfb2JqZWN0X2pzXzEiLCJpbnZhbGlkX2tleV9pbnB1dF9qc18xIiwiY2lwaGVyc19qc18xIiwiaXNfa2V5X2xpa2VfanNfMSIsImNiY0RlY3J5cHQiLCJlbmMiLCJjZWsiLCJjaXBoZXJ0ZXh0IiwiaXYiLCJ0YWciLCJhYWQiLCJrZXlTaXplIiwicGFyc2VJbnQiLCJzbGljZSIsImRlZmF1bHQiLCJleHBvcnQiLCJlbmNLZXkiLCJzdWJhcnJheSIsIm1hY0tleSIsIm1hY1NpemUiLCJhbGdvcml0aG0iLCJKT1NFTm90U3VwcG9ydGVkIiwiZXhwZWN0ZWRUYWciLCJtYWNDaGVja1Bhc3NlZCIsIkpXRURlY3J5cHRpb25GYWlsZWQiLCJwbGFpbnRleHQiLCJkZWNpcGhlciIsImNyZWF0ZURlY2lwaGVyaXYiLCJjb25jYXQiLCJ1cGRhdGUiLCJmaW5hbCIsImdjbURlY3J5cHQiLCJhdXRoVGFnTGVuZ3RoIiwic2V0QXV0aFRhZyIsImJ5dGVMZW5ndGgiLCJzZXRBQUQiLCJwbGFpbnRleHRMZW5ndGgiLCJsZW5ndGgiLCJkZWNyeXB0Iiwia2V5IiwiaXNDcnlwdG9LZXkiLCJjaGVja0VuY0NyeXB0b0tleSIsIktleU9iamVjdCIsImZyb20iLCJVaW50OEFycmF5IiwiVHlwZUVycm9yIiwidHlwZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst digest = (algorithm, data)=>(0, crypto_1.createHash)(algorithm).update(data).digest();\nexports[\"default\"] = digest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZGlnZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1DLFNBQVMsQ0FBQ0MsV0FBV0MsT0FBUyxDQUFDLEdBQUdKLFNBQVNLLFVBQVUsRUFBRUYsV0FBV0csTUFBTSxDQUFDRixNQUFNRixNQUFNO0FBQzNGSixrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZGlnZXN0LmpzP2Q3NzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBkaWdlc3QgPSAoYWxnb3JpdGhtLCBkYXRhKSA9PiAoMCwgY3J5cHRvXzEuY3JlYXRlSGFzaCkoYWxnb3JpdGhtKS51cGRhdGUoZGF0YSkuZGlnZXN0KCk7XG5leHBvcnRzLmRlZmF1bHQgPSBkaWdlc3Q7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJkaWdlc3QiLCJhbGdvcml0aG0iLCJkYXRhIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction dsaDigest(alg) {\n    switch(alg){\n        case \"PS256\":\n        case \"RS256\":\n        case \"ES256\":\n        case \"ES256K\":\n            return \"sha256\";\n        case \"PS384\":\n        case \"RS384\":\n        case \"ES384\":\n            return \"sha384\";\n        case \"PS512\":\n        case \"RS512\":\n        case \"ES512\":\n            return \"sha512\";\n        case \"EdDSA\":\n            return undefined;\n        default:\n            throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n    }\n}\nexports[\"default\"] = dsaDigest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZHNhX2RpZ2VzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxjQUFjQyxtQkFBT0EsQ0FBQyw0R0FBbUI7QUFDL0MsU0FBU0MsVUFBVUMsR0FBRztJQUNsQixPQUFRQTtRQUNKLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBT0M7UUFDWDtZQUNJLE1BQU0sSUFBSUosWUFBWUssZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUVGLElBQUksMkRBQTJELENBQUM7SUFDdEg7QUFDSjtBQUNBTCxrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZHNhX2RpZ2VzdC5qcz9jYTZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5mdW5jdGlvbiBkc2FEaWdlc3QoYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnUFMyNTYnOlxuICAgICAgICBjYXNlICdSUzI1Nic6XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgY2FzZSAnRVMyNTZLJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMjU2JztcbiAgICAgICAgY2FzZSAnUFMzODQnOlxuICAgICAgICBjYXNlICdSUzM4NCc6XG4gICAgICAgIGNhc2UgJ0VTMzg0JzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMzg0JztcbiAgICAgICAgY2FzZSAnUFM1MTInOlxuICAgICAgICBjYXNlICdSUzUxMic6XG4gICAgICAgIGNhc2UgJ0VTNTEyJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhNTEyJztcbiAgICAgICAgY2FzZSAnRWREU0EnOlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKGBhbGcgJHthbGd9IGlzIG5vdCBzdXBwb3J0ZWQgZWl0aGVyIGJ5IEpPU0Ugb3IgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWVgKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkc2FEaWdlc3Q7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlcnJvcnNfanNfMSIsInJlcXVpcmUiLCJkc2FEaWdlc3QiLCJhbGciLCJ1bmRlZmluZWQiLCJKT1NFTm90U3VwcG9ydGVkIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ecdhAllowed = exports.generateEpk = exports.deriveKey = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst get_named_curve_js_1 = __webpack_require__(/*! ./get_named_curve.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst generateKeyPair = (0, util_1.promisify)(crypto_1.generateKeyPair);\nasync function deriveKey(publicKee, privateKee, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {\n    let publicKey;\n    if ((0, webcrypto_js_1.isCryptoKey)(publicKee)) {\n        (0, crypto_key_js_1.checkEncCryptoKey)(publicKee, \"ECDH\");\n        publicKey = crypto_1.KeyObject.from(publicKee);\n    } else if ((0, is_key_object_js_1.default)(publicKee)) {\n        publicKey = publicKee;\n    } else {\n        throw new TypeError((0, invalid_key_input_js_1.default)(publicKee, ...is_key_like_js_1.types));\n    }\n    let privateKey;\n    if ((0, webcrypto_js_1.isCryptoKey)(privateKee)) {\n        (0, crypto_key_js_1.checkEncCryptoKey)(privateKee, \"ECDH\", \"deriveBits\");\n        privateKey = crypto_1.KeyObject.from(privateKee);\n    } else if ((0, is_key_object_js_1.default)(privateKee)) {\n        privateKey = privateKee;\n    } else {\n        throw new TypeError((0, invalid_key_input_js_1.default)(privateKee, ...is_key_like_js_1.types));\n    }\n    const value = (0, buffer_utils_js_1.concat)((0, buffer_utils_js_1.lengthAndInput)(buffer_utils_js_1.encoder.encode(algorithm)), (0, buffer_utils_js_1.lengthAndInput)(apu), (0, buffer_utils_js_1.lengthAndInput)(apv), (0, buffer_utils_js_1.uint32be)(keyLength));\n    const sharedSecret = (0, crypto_1.diffieHellman)({\n        privateKey,\n        publicKey\n    });\n    return (0, buffer_utils_js_1.concatKdf)(sharedSecret, keyLength, value);\n}\nexports.deriveKey = deriveKey;\nasync function generateEpk(kee) {\n    let key;\n    if ((0, webcrypto_js_1.isCryptoKey)(kee)) {\n        key = crypto_1.KeyObject.from(kee);\n    } else if ((0, is_key_object_js_1.default)(kee)) {\n        key = kee;\n    } else {\n        throw new TypeError((0, invalid_key_input_js_1.default)(kee, ...is_key_like_js_1.types));\n    }\n    switch(key.asymmetricKeyType){\n        case \"x25519\":\n            return generateKeyPair(\"x25519\");\n        case \"x448\":\n            {\n                return generateKeyPair(\"x448\");\n            }\n        case \"ec\":\n            {\n                const namedCurve = (0, get_named_curve_js_1.default)(key);\n                return generateKeyPair(\"ec\", {\n                    namedCurve\n                });\n            }\n        default:\n            throw new errors_js_1.JOSENotSupported(\"Invalid or unsupported EPK\");\n    }\n}\nexports.generateEpk = generateEpk;\nconst ecdhAllowed = (key)=>[\n        \"P-256\",\n        \"P-384\",\n        \"P-521\",\n        \"X25519\",\n        \"X448\"\n    ].includes((0, get_named_curve_js_1.default)(key));\nexports.ecdhAllowed = ecdhAllowed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst check_iv_length_js_1 = __webpack_require__(/*! ../lib/check_iv_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js\");\nconst check_cek_length_js_1 = __webpack_require__(/*! ./check_cek_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst cbc_tag_js_1 = __webpack_require__(/*! ./cbc_tag.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst ciphers_js_1 = __webpack_require__(/*! ./ciphers.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nfunction cbcEncrypt(enc, plaintext, cek, iv, aad) {\n    const keySize = parseInt(enc.slice(1, 4), 10);\n    if ((0, is_key_object_js_1.default)(cek)) {\n        cek = cek.export();\n    }\n    const encKey = cek.subarray(keySize >> 3);\n    const macKey = cek.subarray(0, keySize >> 3);\n    const algorithm = `aes-${keySize}-cbc`;\n    if (!(0, ciphers_js_1.default)(algorithm)) {\n        throw new errors_js_1.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);\n    }\n    const cipher = (0, crypto_1.createCipheriv)(algorithm, encKey, iv);\n    const ciphertext = (0, buffer_utils_js_1.concat)(cipher.update(plaintext), cipher.final());\n    const macSize = parseInt(enc.slice(-3), 10);\n    const tag = (0, cbc_tag_js_1.default)(aad, iv, ciphertext, macSize, macKey, keySize);\n    return {\n        ciphertext,\n        tag\n    };\n}\nfunction gcmEncrypt(enc, plaintext, cek, iv, aad) {\n    const keySize = parseInt(enc.slice(1, 4), 10);\n    const algorithm = `aes-${keySize}-gcm`;\n    if (!(0, ciphers_js_1.default)(algorithm)) {\n        throw new errors_js_1.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);\n    }\n    const cipher = (0, crypto_1.createCipheriv)(algorithm, cek, iv, {\n        authTagLength: 16\n    });\n    if (aad.byteLength) {\n        cipher.setAAD(aad, {\n            plaintextLength: plaintext.length\n        });\n    }\n    const ciphertext = cipher.update(plaintext);\n    cipher.final();\n    const tag = cipher.getAuthTag();\n    return {\n        ciphertext,\n        tag\n    };\n}\nconst encrypt = (enc, plaintext, cek, iv, aad)=>{\n    let key;\n    if ((0, webcrypto_js_1.isCryptoKey)(cek)) {\n        (0, crypto_key_js_1.checkEncCryptoKey)(cek, enc, \"encrypt\");\n        key = crypto_1.KeyObject.from(cek);\n    } else if (cek instanceof Uint8Array || (0, is_key_object_js_1.default)(cek)) {\n        key = cek;\n    } else {\n        throw new TypeError((0, invalid_key_input_js_1.default)(cek, ...is_key_like_js_1.types, \"Uint8Array\"));\n    }\n    (0, check_cek_length_js_1.default)(enc, key);\n    (0, check_iv_length_js_1.default)(enc, iv);\n    switch(enc){\n        case \"A128CBC-HS256\":\n        case \"A192CBC-HS384\":\n        case \"A256CBC-HS512\":\n            return cbcEncrypt(enc, plaintext, key, iv, aad);\n        case \"A128GCM\":\n        case \"A192GCM\":\n        case \"A256GCM\":\n            return gcmEncrypt(enc, plaintext, key, iv, aad);\n        default:\n            throw new errors_js_1.JOSENotSupported(\"Unsupported JWE Content Encryption Algorithm\");\n    }\n};\nexports[\"default\"] = encrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/fetch_jwks.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/fetch_jwks.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst fetchJwks = async (url, timeout, options)=>{\n    let get;\n    switch(url.protocol){\n        case \"https:\":\n            get = https.get;\n            break;\n        case \"http:\":\n            get = http.get;\n            break;\n        default:\n            throw new TypeError(\"Unsupported URL protocol.\");\n    }\n    const { agent, headers } = options;\n    const req = get(url.href, {\n        agent,\n        timeout,\n        headers\n    });\n    const [response] = await Promise.race([\n        (0, events_1.once)(req, \"response\"),\n        (0, events_1.once)(req, \"timeout\")\n    ]);\n    if (!response) {\n        req.destroy();\n        throw new errors_js_1.JWKSTimeout();\n    }\n    if (response.statusCode !== 200) {\n        throw new errors_js_1.JOSEError(\"Expected 200 OK from the JSON Web Key Set HTTP response\");\n    }\n    const parts = [];\n    for await (const part of response){\n        parts.push(part);\n    }\n    try {\n        return JSON.parse(buffer_utils_js_1.decoder.decode((0, buffer_utils_js_1.concat)(...parts)));\n    } catch  {\n        throw new errors_js_1.JOSEError(\"Failed to parse the JSON Web Key Set HTTP response as JSON\");\n    }\n};\nexports[\"default\"] = fetchJwks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZmV0Y2hfandrcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxPQUFPQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUMzQixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQyxvQkFBTztBQUM3QixNQUFNRSxXQUFXRixtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQyw0R0FBbUI7QUFDL0MsTUFBTUksb0JBQW9CSixtQkFBT0EsQ0FBQyxzSEFBd0I7QUFDMUQsTUFBTUssWUFBWSxPQUFPQyxLQUFLQyxTQUFTQztJQUNuQyxJQUFJQztJQUNKLE9BQVFILElBQUlJLFFBQVE7UUFDaEIsS0FBSztZQUNERCxNQUFNUixNQUFNUSxHQUFHO1lBQ2Y7UUFDSixLQUFLO1lBQ0RBLE1BQU1WLEtBQUtVLEdBQUc7WUFDZDtRQUNKO1lBQ0ksTUFBTSxJQUFJRSxVQUFVO0lBQzVCO0lBQ0EsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRSxHQUFHTDtJQUMzQixNQUFNTSxNQUFNTCxJQUFJSCxJQUFJUyxJQUFJLEVBQUU7UUFDdEJIO1FBQ0FMO1FBQ0FNO0lBQ0o7SUFDQSxNQUFNLENBQUNHLFNBQVMsR0FBSSxNQUFNQyxRQUFRQyxJQUFJLENBQUM7UUFBRSxJQUFHaEIsU0FBU2lCLElBQUksRUFBRUwsS0FBSztRQUFjLElBQUdaLFNBQVNpQixJQUFJLEVBQUVMLEtBQUs7S0FBVztJQUNoSCxJQUFJLENBQUNFLFVBQVU7UUFDWEYsSUFBSU0sT0FBTztRQUNYLE1BQU0sSUFBSWpCLFlBQVlrQixXQUFXO0lBQ3JDO0lBQ0EsSUFBSUwsU0FBU00sVUFBVSxLQUFLLEtBQUs7UUFDN0IsTUFBTSxJQUFJbkIsWUFBWW9CLFNBQVMsQ0FBQztJQUNwQztJQUNBLE1BQU1DLFFBQVEsRUFBRTtJQUNoQixXQUFXLE1BQU1DLFFBQVFULFNBQVU7UUFDL0JRLE1BQU1FLElBQUksQ0FBQ0Q7SUFDZjtJQUNBLElBQUk7UUFDQSxPQUFPRSxLQUFLQyxLQUFLLENBQUN4QixrQkFBa0J5QixPQUFPLENBQUNDLE1BQU0sQ0FBQyxDQUFDLEdBQUcxQixrQkFBa0IyQixNQUFNLEtBQUtQO0lBQ3hGLEVBQ0EsT0FBTTtRQUNGLE1BQU0sSUFBSXJCLFlBQVlvQixTQUFTLENBQUM7SUFDcEM7QUFDSjtBQUNBMUIsa0JBQWUsR0FBR1EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2ZldGNoX2p3a3MuanM/ODJlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbmNvbnN0IGh0dHBzID0gcmVxdWlyZShcImh0dHBzXCIpO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgZmV0Y2hKd2tzID0gYXN5bmMgKHVybCwgdGltZW91dCwgb3B0aW9ucykgPT4ge1xuICAgIGxldCBnZXQ7XG4gICAgc3dpdGNoICh1cmwucHJvdG9jb2wpIHtcbiAgICAgICAgY2FzZSAnaHR0cHM6JzpcbiAgICAgICAgICAgIGdldCA9IGh0dHBzLmdldDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdodHRwOic6XG4gICAgICAgICAgICBnZXQgPSBodHRwLmdldDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5zdXBwb3J0ZWQgVVJMIHByb3RvY29sLicpO1xuICAgIH1cbiAgICBjb25zdCB7IGFnZW50LCBoZWFkZXJzIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHJlcSA9IGdldCh1cmwuaHJlZiwge1xuICAgICAgICBhZ2VudCxcbiAgICAgICAgdGltZW91dCxcbiAgICAgICAgaGVhZGVycyxcbiAgICB9KTtcbiAgICBjb25zdCBbcmVzcG9uc2VdID0gKGF3YWl0IFByb21pc2UucmFjZShbKDAsIGV2ZW50c18xLm9uY2UpKHJlcSwgJ3Jlc3BvbnNlJyksICgwLCBldmVudHNfMS5vbmNlKShyZXEsICd0aW1lb3V0JyldKSk7XG4gICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICByZXEuZGVzdHJveSgpO1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldLU1RpbWVvdXQoKTtcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDIwMCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRUVycm9yKCdFeHBlY3RlZCAyMDAgT0sgZnJvbSB0aGUgSlNPTiBXZWIgS2V5IFNldCBIVFRQIHJlc3BvbnNlJyk7XG4gICAgfVxuICAgIGNvbnN0IHBhcnRzID0gW107XG4gICAgZm9yIGF3YWl0IChjb25zdCBwYXJ0IG9mIHJlc3BvbnNlKSB7XG4gICAgICAgIHBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKCgwLCBidWZmZXJfdXRpbHNfanNfMS5jb25jYXQpKC4uLnBhcnRzKSkpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFRXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSB0aGUgSlNPTiBXZWIgS2V5IFNldCBIVFRQIHJlc3BvbnNlIGFzIEpTT04nKTtcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZmV0Y2hKd2tzO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaHR0cCIsInJlcXVpcmUiLCJodHRwcyIsImV2ZW50c18xIiwiZXJyb3JzX2pzXzEiLCJidWZmZXJfdXRpbHNfanNfMSIsImZldGNoSndrcyIsInVybCIsInRpbWVvdXQiLCJvcHRpb25zIiwiZ2V0IiwicHJvdG9jb2wiLCJUeXBlRXJyb3IiLCJhZ2VudCIsImhlYWRlcnMiLCJyZXEiLCJocmVmIiwicmVzcG9uc2UiLCJQcm9taXNlIiwicmFjZSIsIm9uY2UiLCJkZXN0cm95IiwiSldLU1RpbWVvdXQiLCJzdGF0dXNDb2RlIiwiSk9TRUVycm9yIiwicGFydHMiLCJwYXJ0IiwicHVzaCIsIkpTT04iLCJwYXJzZSIsImRlY29kZXIiLCJkZWNvZGUiLCJjb25jYXQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/fetch_jwks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.jwkImport = exports.jwkExport = exports.rsaPssParams = exports.oneShotCallback = void 0;\nconst [major, minor] = process.versions.node.split(\".\").map((str)=>parseInt(str, 10));\nexports.oneShotCallback = major >= 16 || major === 15 && minor >= 13;\nexports.rsaPssParams = !(\"electron\" in process.versions) && (major >= 17 || major === 16 && minor >= 9);\nexports.jwkExport = major >= 16 || major === 15 && minor >= 9;\nexports.jwkImport = major >= 16 || major === 15 && minor >= 12;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZmxhZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHQSxpQkFBaUIsR0FBR0Esb0JBQW9CLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDOUYsTUFBTSxDQUFDTSxPQUFPQyxNQUFNLEdBQUdDLFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxLQUFLLENBQUMsS0FBS0MsR0FBRyxDQUFDLENBQUNDLE1BQVFDLFNBQVNELEtBQUs7QUFDbkZiLHVCQUF1QixHQUFHTSxTQUFTLE1BQU9BLFVBQVUsTUFBTUMsU0FBUztBQUNuRVAsb0JBQW9CLEdBQUcsQ0FBRSxlQUFjUSxRQUFRQyxRQUFRLEtBQU1ILENBQUFBLFNBQVMsTUFBT0EsVUFBVSxNQUFNQyxTQUFTLENBQUM7QUFDdkdQLGlCQUFpQixHQUFHTSxTQUFTLE1BQU9BLFVBQVUsTUFBTUMsU0FBUztBQUM3RFAsaUJBQWlCLEdBQUdNLFNBQVMsTUFBT0EsVUFBVSxNQUFNQyxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9mbGFncy5qcz84YjAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5qd2tJbXBvcnQgPSBleHBvcnRzLmp3a0V4cG9ydCA9IGV4cG9ydHMucnNhUHNzUGFyYW1zID0gZXhwb3J0cy5vbmVTaG90Q2FsbGJhY2sgPSB2b2lkIDA7XG5jb25zdCBbbWFqb3IsIG1pbm9yXSA9IHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpLm1hcCgoc3RyKSA9PiBwYXJzZUludChzdHIsIDEwKSk7XG5leHBvcnRzLm9uZVNob3RDYWxsYmFjayA9IG1ham9yID49IDE2IHx8IChtYWpvciA9PT0gMTUgJiYgbWlub3IgPj0gMTMpO1xuZXhwb3J0cy5yc2FQc3NQYXJhbXMgPSAhKCdlbGVjdHJvbicgaW4gcHJvY2Vzcy52ZXJzaW9ucykgJiYgKG1ham9yID49IDE3IHx8IChtYWpvciA9PT0gMTYgJiYgbWlub3IgPj0gOSkpO1xuZXhwb3J0cy5qd2tFeHBvcnQgPSBtYWpvciA+PSAxNiB8fCAobWFqb3IgPT09IDE1ICYmIG1pbm9yID49IDkpO1xuZXhwb3J0cy5qd2tJbXBvcnQgPSBtYWpvciA+PSAxNiB8fCAobWFqb3IgPT09IDE1ICYmIG1pbm9yID49IDEyKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImp3a0ltcG9ydCIsImp3a0V4cG9ydCIsInJzYVBzc1BhcmFtcyIsIm9uZVNob3RDYWxsYmFjayIsIm1ham9yIiwibWlub3IiLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJub2RlIiwic3BsaXQiLCJtYXAiLCJzdHIiLCJwYXJzZUludCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generateKeyPair = exports.generateSecret = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst random_js_1 = __webpack_require__(/*! ./random.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\");\nconst check_modulus_length_js_1 = __webpack_require__(/*! ./check_modulus_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst generate = (0, util_1.promisify)(crypto_1.generateKeyPair);\nasync function generateSecret(alg, options) {\n    let length;\n    switch(alg){\n        case \"HS256\":\n        case \"HS384\":\n        case \"HS512\":\n        case \"A128CBC-HS256\":\n        case \"A192CBC-HS384\":\n        case \"A256CBC-HS512\":\n            length = parseInt(alg.slice(-3), 10);\n            break;\n        case \"A128KW\":\n        case \"A192KW\":\n        case \"A256KW\":\n        case \"A128GCMKW\":\n        case \"A192GCMKW\":\n        case \"A256GCMKW\":\n        case \"A128GCM\":\n        case \"A192GCM\":\n        case \"A256GCM\":\n            length = parseInt(alg.slice(1, 4), 10);\n            break;\n        default:\n            throw new errors_js_1.JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n    return (0, crypto_1.createSecretKey)((0, random_js_1.default)(new Uint8Array(length >> 3)));\n}\nexports.generateSecret = generateSecret;\nasync function generateKeyPair(alg, options) {\n    var _a, _b;\n    switch(alg){\n        case \"RS256\":\n        case \"RS384\":\n        case \"RS512\":\n        case \"PS256\":\n        case \"PS384\":\n        case \"PS512\":\n        case \"RSA-OAEP\":\n        case \"RSA-OAEP-256\":\n        case \"RSA-OAEP-384\":\n        case \"RSA-OAEP-512\":\n        case \"RSA1_5\":\n            {\n                const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;\n                if (typeof modulusLength !== \"number\" || modulusLength < 2048) {\n                    throw new errors_js_1.JOSENotSupported(\"Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used\");\n                }\n                const keypair = await generate(\"rsa\", {\n                    modulusLength,\n                    publicExponent: 0x10001\n                });\n                (0, check_modulus_length_js_1.setModulusLength)(keypair.privateKey, modulusLength);\n                (0, check_modulus_length_js_1.setModulusLength)(keypair.publicKey, modulusLength);\n                return keypair;\n            }\n        case \"ES256\":\n            return generate(\"ec\", {\n                namedCurve: \"P-256\"\n            });\n        case \"ES256K\":\n            return generate(\"ec\", {\n                namedCurve: \"secp256k1\"\n            });\n        case \"ES384\":\n            return generate(\"ec\", {\n                namedCurve: \"P-384\"\n            });\n        case \"ES512\":\n            return generate(\"ec\", {\n                namedCurve: \"P-521\"\n            });\n        case \"EdDSA\":\n            {\n                switch(options === null || options === void 0 ? void 0 : options.crv){\n                    case undefined:\n                    case \"Ed25519\":\n                        return generate(\"ed25519\");\n                    case \"Ed448\":\n                        return generate(\"ed448\");\n                    default:\n                        throw new errors_js_1.JOSENotSupported(\"Invalid or unsupported crv option provided, supported values are Ed25519 and Ed448\");\n                }\n            }\n        case \"ECDH-ES\":\n        case \"ECDH-ES+A128KW\":\n        case \"ECDH-ES+A192KW\":\n        case \"ECDH-ES+A256KW\":\n            const crv = (_b = options === null || options === void 0 ? void 0 : options.crv) !== null && _b !== void 0 ? _b : \"P-256\";\n            switch(crv){\n                case undefined:\n                case \"P-256\":\n                case \"P-384\":\n                case \"P-521\":\n                    return generate(\"ec\", {\n                        namedCurve: crv\n                    });\n                case \"X25519\":\n                    return generate(\"x25519\");\n                case \"X448\":\n                    return generate(\"x448\");\n                default:\n                    throw new errors_js_1.JOSENotSupported(\"Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448\");\n            }\n        default:\n            throw new errors_js_1.JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n}\nexports.generateKeyPair = generateKeyPair;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.setCurve = exports.weakMap = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst p256 = buffer_1.Buffer.from([\n    42,\n    134,\n    72,\n    206,\n    61,\n    3,\n    1,\n    7\n]);\nconst p384 = buffer_1.Buffer.from([\n    43,\n    129,\n    4,\n    0,\n    34\n]);\nconst p521 = buffer_1.Buffer.from([\n    43,\n    129,\n    4,\n    0,\n    35\n]);\nconst secp256k1 = buffer_1.Buffer.from([\n    43,\n    129,\n    4,\n    0,\n    10\n]);\nexports.weakMap = new WeakMap();\nconst namedCurveToJOSE = (namedCurve)=>{\n    switch(namedCurve){\n        case \"prime256v1\":\n            return \"P-256\";\n        case \"secp384r1\":\n            return \"P-384\";\n        case \"secp521r1\":\n            return \"P-521\";\n        case \"secp256k1\":\n            return \"secp256k1\";\n        default:\n            throw new errors_js_1.JOSENotSupported(\"Unsupported key curve for this operation\");\n    }\n};\nconst getNamedCurve = (kee, raw)=>{\n    var _a;\n    let key;\n    if ((0, webcrypto_js_1.isCryptoKey)(kee)) {\n        key = crypto_1.KeyObject.from(kee);\n    } else if ((0, is_key_object_js_1.default)(kee)) {\n        key = kee;\n    } else {\n        throw new TypeError((0, invalid_key_input_js_1.default)(kee, ...is_key_like_js_1.types));\n    }\n    if (key.type === \"secret\") {\n        throw new TypeError('only \"private\" or \"public\" type keys can be used for this operation');\n    }\n    switch(key.asymmetricKeyType){\n        case \"ed25519\":\n        case \"ed448\":\n            return `Ed${key.asymmetricKeyType.slice(2)}`;\n        case \"x25519\":\n        case \"x448\":\n            return `X${key.asymmetricKeyType.slice(1)}`;\n        case \"ec\":\n            {\n                if (exports.weakMap.has(key)) {\n                    return exports.weakMap.get(key);\n                }\n                let namedCurve = (_a = key.asymmetricKeyDetails) === null || _a === void 0 ? void 0 : _a.namedCurve;\n                if (!namedCurve && key.type === \"private\") {\n                    namedCurve = getNamedCurve((0, crypto_1.createPublicKey)(key), true);\n                } else if (!namedCurve) {\n                    const buf = key.export({\n                        format: \"der\",\n                        type: \"spki\"\n                    });\n                    const i = buf[1] < 128 ? 14 : 15;\n                    const len = buf[i];\n                    const curveOid = buf.slice(i + 1, i + 1 + len);\n                    if (curveOid.equals(p256)) {\n                        namedCurve = \"prime256v1\";\n                    } else if (curveOid.equals(p384)) {\n                        namedCurve = \"secp384r1\";\n                    } else if (curveOid.equals(p521)) {\n                        namedCurve = \"secp521r1\";\n                    } else if (curveOid.equals(secp256k1)) {\n                        namedCurve = \"secp256k1\";\n                    } else {\n                        throw new errors_js_1.JOSENotSupported(\"Unsupported key curve for this operation\");\n                    }\n                }\n                if (raw) return namedCurve;\n                const curve = namedCurveToJOSE(namedCurve);\n                exports.weakMap.set(key, curve);\n                return curve;\n            }\n        default:\n            throw new TypeError(\"Invalid asymmetric key type for this operation\");\n    }\n};\nfunction setCurve(keyObject, curve) {\n    exports.weakMap.set(keyObject, curve);\n}\nexports.setCurve = setCurve;\nexports[\"default\"] = getNamedCurve;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nfunction getSignVerifyKey(alg, key, usage) {\n    if (key instanceof Uint8Array) {\n        if (!alg.startsWith(\"HS\")) {\n            throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types));\n        }\n        return (0, crypto_1.createSecretKey)(key);\n    }\n    if (key instanceof crypto_1.KeyObject) {\n        return key;\n    }\n    if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n        (0, crypto_key_js_1.checkSigCryptoKey)(key, alg, usage);\n        return crypto_1.KeyObject.from(key);\n    }\n    throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, \"Uint8Array\"));\n}\nexports[\"default\"] = getSignVerifyKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZ2V0X3NpZ25fdmVyaWZ5X2tleS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNQyxpQkFBaUJELG1CQUFPQSxDQUFDLCtHQUFnQjtBQUMvQyxNQUFNRSxrQkFBa0JGLG1CQUFPQSxDQUFDLGtIQUFzQjtBQUN0RCxNQUFNRyx5QkFBeUJILG1CQUFPQSxDQUFDLGdJQUE2QjtBQUNwRSxNQUFNSSxtQkFBbUJKLG1CQUFPQSxDQUFDLG1IQUFrQjtBQUNuRCxTQUFTSyxpQkFBaUJDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxLQUFLO0lBQ3JDLElBQUlELGVBQWVFLFlBQVk7UUFDM0IsSUFBSSxDQUFDSCxJQUFJSSxVQUFVLENBQUMsT0FBTztZQUN2QixNQUFNLElBQUlDLFVBQVUsQ0FBQyxHQUFHUix1QkFBdUJTLE9BQU8sRUFBRUwsUUFBUUgsaUJBQWlCUyxLQUFLO1FBQzFGO1FBQ0EsT0FBTyxDQUFDLEdBQUdkLFNBQVNlLGVBQWUsRUFBRVA7SUFDekM7SUFDQSxJQUFJQSxlQUFlUixTQUFTZ0IsU0FBUyxFQUFFO1FBQ25DLE9BQU9SO0lBQ1g7SUFDQSxJQUFJLENBQUMsR0FBR04sZUFBZWUsV0FBVyxFQUFFVCxNQUFNO1FBQ3JDLElBQUdMLGdCQUFnQmUsaUJBQWlCLEVBQUVWLEtBQUtELEtBQUtFO1FBQ2pELE9BQU9ULFNBQVNnQixTQUFTLENBQUNHLElBQUksQ0FBQ1g7SUFDbkM7SUFDQSxNQUFNLElBQUlJLFVBQVUsQ0FBQyxHQUFHUix1QkFBdUJTLE9BQU8sRUFBRUwsUUFBUUgsaUJBQWlCUyxLQUFLLEVBQUU7QUFDNUY7QUFDQWhCLGtCQUFlLEdBQUdRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9nZXRfc2lnbl92ZXJpZnlfa2V5LmpzPzdkZDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGNyeXB0b19rZXlfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvY3J5cHRvX2tleS5qc1wiKTtcbmNvbnN0IGludmFsaWRfa2V5X2lucHV0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuZnVuY3Rpb24gZ2V0U2lnblZlcmlmeUtleShhbGcsIGtleSwgdXNhZ2UpIHtcbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBpZiAoIWFsZy5zdGFydHNXaXRoKCdIUycpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLmRlZmF1bHQpKGtleSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgY3J5cHRvXzEuY3JlYXRlU2VjcmV0S2V5KShrZXkpO1xuICAgIH1cbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgY3J5cHRvXzEuS2V5T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGlmICgoMCwgd2ViY3J5cHRvX2pzXzEuaXNDcnlwdG9LZXkpKGtleSkpIHtcbiAgICAgICAgKDAsIGNyeXB0b19rZXlfanNfMS5jaGVja1NpZ0NyeXB0b0tleSkoa2V5LCBhbGcsIHVzYWdlKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoa2V5LCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzLCAnVWludDhBcnJheScpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGdldFNpZ25WZXJpZnlLZXk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJ3ZWJjcnlwdG9fanNfMSIsImNyeXB0b19rZXlfanNfMSIsImludmFsaWRfa2V5X2lucHV0X2pzXzEiLCJpc19rZXlfbGlrZV9qc18xIiwiZ2V0U2lnblZlcmlmeUtleSIsImFsZyIsImtleSIsInVzYWdlIiwiVWludDhBcnJheSIsInN0YXJ0c1dpdGgiLCJUeXBlRXJyb3IiLCJkZWZhdWx0IiwidHlwZXMiLCJjcmVhdGVTZWNyZXRLZXkiLCJLZXlPYmplY3QiLCJpc0NyeXB0b0tleSIsImNoZWNrU2lnQ3J5cHRvS2V5IiwiZnJvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/hmac_digest.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/hmac_digest.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction hmacDigest(alg) {\n    switch(alg){\n        case \"HS256\":\n            return \"sha256\";\n        case \"HS384\":\n            return \"sha384\";\n        case \"HS512\":\n            return \"sha512\";\n        default:\n            throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n    }\n}\nexports[\"default\"] = hmacDigest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaG1hY19kaWdlc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsY0FBY0MsbUJBQU9BLENBQUMsNEdBQW1CO0FBQy9DLFNBQVNDLFdBQVdDLEdBQUc7SUFDbkIsT0FBUUE7UUFDSixLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWDtZQUNJLE1BQU0sSUFBSUgsWUFBWUksZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUVELElBQUksMkRBQTJELENBQUM7SUFDdEg7QUFDSjtBQUNBTCxrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaG1hY19kaWdlc3QuanM/ZGZjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuZnVuY3Rpb24gaG1hY0RpZ2VzdChhbGcpIHtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdIUzI1Nic6XG4gICAgICAgICAgICByZXR1cm4gJ3NoYTI1Nic7XG4gICAgICAgIGNhc2UgJ0hTMzg0JzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMzg0JztcbiAgICAgICAgY2FzZSAnSFM1MTInOlxuICAgICAgICAgICAgcmV0dXJuICdzaGE1MTInO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoYGFsZyAke2FsZ30gaXMgbm90IHN1cHBvcnRlZCBlaXRoZXIgYnkgSk9TRSBvciB5b3VyIGphdmFzY3JpcHQgcnVudGltZWApO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGhtYWNEaWdlc3Q7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlcnJvcnNfanNfMSIsInJlcXVpcmUiLCJobWFjRGlnZXN0IiwiYWxnIiwiSk9TRU5vdFN1cHBvcnRlZCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/hmac_digest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.types = void 0;\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nexports[\"default\"] = (key)=>(0, is_key_object_js_1.default)(key) || (0, webcrypto_js_1.isCryptoKey)(key);\nconst types = [\n    \"KeyObject\"\n];\nexports.types = types;\nif (globalThis.CryptoKey || (webcrypto_js_1.default === null || webcrypto_js_1.default === void 0 ? void 0 : webcrypto_js_1.default.CryptoKey)) {\n    types.push(\"CryptoKey\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaXNfa2V5X2xpa2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGFBQWEsR0FBRyxLQUFLO0FBQ3JCLE1BQU1HLGlCQUFpQkMsbUJBQU9BLENBQUMsK0dBQWdCO0FBQy9DLE1BQU1DLHFCQUFxQkQsbUJBQU9BLENBQUMsdUhBQW9CO0FBQ3ZESixrQkFBZSxHQUFHLENBQUNPLE1BQVEsQ0FBQyxHQUFHRixtQkFBbUJDLE9BQU8sRUFBRUMsUUFBUSxDQUFDLEdBQUdKLGVBQWVLLFdBQVcsRUFBRUQ7QUFDbkcsTUFBTUwsUUFBUTtJQUFDO0NBQVk7QUFDM0JGLGFBQWEsR0FBR0U7QUFDaEIsSUFBSU8sV0FBV0MsU0FBUyxJQUFLUCxDQUFBQSxlQUFlRyxPQUFPLEtBQUssUUFBUUgsZUFBZUcsT0FBTyxLQUFLLEtBQUssSUFBSSxLQUFLLElBQUlILGVBQWVHLE9BQU8sQ0FBQ0ksU0FBUyxHQUFHO0lBQzVJUixNQUFNUyxJQUFJLENBQUM7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaXNfa2V5X2xpa2UuanM/OGNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudHlwZXMgPSB2b2lkIDA7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGlzX2tleV9vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9vYmplY3QuanNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSAoa2V5KSA9PiAoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGtleSkgfHwgKDAsIHdlYmNyeXB0b19qc18xLmlzQ3J5cHRvS2V5KShrZXkpO1xuY29uc3QgdHlwZXMgPSBbJ0tleU9iamVjdCddO1xuZXhwb3J0cy50eXBlcyA9IHR5cGVzO1xuaWYgKGdsb2JhbFRoaXMuQ3J5cHRvS2V5IHx8ICh3ZWJjcnlwdG9fanNfMS5kZWZhdWx0ID09PSBudWxsIHx8IHdlYmNyeXB0b19qc18xLmRlZmF1bHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdlYmNyeXB0b19qc18xLmRlZmF1bHQuQ3J5cHRvS2V5KSkge1xuICAgIHR5cGVzLnB1c2goJ0NyeXB0b0tleScpO1xufVxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHlwZXMiLCJ3ZWJjcnlwdG9fanNfMSIsInJlcXVpcmUiLCJpc19rZXlfb2JqZWN0X2pzXzEiLCJkZWZhdWx0Iiwia2V5IiwiaXNDcnlwdG9LZXkiLCJnbG9iYWxUaGlzIiwiQ3J5cHRvS2V5IiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst util = __webpack_require__(/*! util */ \"util\");\nexports[\"default\"] = util.types.isKeyObject ? (obj)=>util.types.isKeyObject(obj) : (obj)=>obj != null && obj instanceof crypto_1.KeyObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaXNfa2V5X29iamVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQyxrQkFBTTtBQUMzQkgsa0JBQWUsR0FBR0ksS0FBS0UsS0FBSyxDQUFDQyxXQUFXLEdBQ2xDLENBQUNDLE1BQVFKLEtBQUtFLEtBQUssQ0FBQ0MsV0FBVyxDQUFDQyxPQUNoQyxDQUFDQSxNQUFRQSxPQUFPLFFBQVFBLGVBQWVOLFNBQVNPLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2lzX2tleV9vYmplY3QuanM/MjcyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmV4cG9ydHMuZGVmYXVsdCA9IHV0aWwudHlwZXMuaXNLZXlPYmplY3RcbiAgICA/IChvYmopID0+IHV0aWwudHlwZXMuaXNLZXlPYmplY3Qob2JqKVxuICAgIDogKG9iaikgPT4gb2JqICE9IG51bGwgJiYgb2JqIGluc3RhbmNlb2YgY3J5cHRvXzEuS2V5T2JqZWN0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwidXRpbCIsImRlZmF1bHQiLCJ0eXBlcyIsImlzS2V5T2JqZWN0Iiwib2JqIiwiS2V5T2JqZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/jwk_to_key.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/jwk_to_key.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst get_named_curve_js_1 = __webpack_require__(/*! ./get_named_curve.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\");\nconst check_modulus_length_js_1 = __webpack_require__(/*! ./check_modulus_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\");\nconst asn1_sequence_encoder_js_1 = __webpack_require__(/*! ./asn1_sequence_encoder.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_encoder.js\");\nconst flags_js_1 = __webpack_require__(/*! ./flags.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\");\nconst parse = (jwk)=>{\n    if (flags_js_1.jwkImport && jwk.kty !== \"oct\") {\n        return jwk.d ? (0, crypto_1.createPrivateKey)({\n            format: \"jwk\",\n            key: jwk\n        }) : (0, crypto_1.createPublicKey)({\n            format: \"jwk\",\n            key: jwk\n        });\n    }\n    switch(jwk.kty){\n        case \"oct\":\n            {\n                return (0, crypto_1.createSecretKey)((0, base64url_js_1.decode)(jwk.k));\n            }\n        case \"RSA\":\n            {\n                const enc = new asn1_sequence_encoder_js_1.default();\n                const isPrivate = jwk.d !== undefined;\n                const modulus = buffer_1.Buffer.from(jwk.n, \"base64\");\n                const exponent = buffer_1.Buffer.from(jwk.e, \"base64\");\n                if (isPrivate) {\n                    enc.zero();\n                    enc.unsignedInteger(modulus);\n                    enc.unsignedInteger(exponent);\n                    enc.unsignedInteger(buffer_1.Buffer.from(jwk.d, \"base64\"));\n                    enc.unsignedInteger(buffer_1.Buffer.from(jwk.p, \"base64\"));\n                    enc.unsignedInteger(buffer_1.Buffer.from(jwk.q, \"base64\"));\n                    enc.unsignedInteger(buffer_1.Buffer.from(jwk.dp, \"base64\"));\n                    enc.unsignedInteger(buffer_1.Buffer.from(jwk.dq, \"base64\"));\n                    enc.unsignedInteger(buffer_1.Buffer.from(jwk.qi, \"base64\"));\n                } else {\n                    enc.unsignedInteger(modulus);\n                    enc.unsignedInteger(exponent);\n                }\n                const der = enc.end();\n                const createInput = {\n                    key: der,\n                    format: \"der\",\n                    type: \"pkcs1\"\n                };\n                const keyObject = isPrivate ? (0, crypto_1.createPrivateKey)(createInput) : (0, crypto_1.createPublicKey)(createInput);\n                (0, check_modulus_length_js_1.setModulusLength)(keyObject, modulus.length << 3);\n                return keyObject;\n            }\n        case \"EC\":\n            {\n                const enc = new asn1_sequence_encoder_js_1.default();\n                const isPrivate = jwk.d !== undefined;\n                const pub = buffer_1.Buffer.concat([\n                    buffer_1.Buffer.alloc(1, 4),\n                    buffer_1.Buffer.from(jwk.x, \"base64\"),\n                    buffer_1.Buffer.from(jwk.y, \"base64\")\n                ]);\n                if (isPrivate) {\n                    enc.zero();\n                    const enc$1 = new asn1_sequence_encoder_js_1.default();\n                    enc$1.oidFor(\"ecPublicKey\");\n                    enc$1.oidFor(jwk.crv);\n                    enc.add(enc$1.end());\n                    const enc$2 = new asn1_sequence_encoder_js_1.default();\n                    enc$2.one();\n                    enc$2.octStr(buffer_1.Buffer.from(jwk.d, \"base64\"));\n                    const enc$3 = new asn1_sequence_encoder_js_1.default();\n                    enc$3.bitStr(pub);\n                    const f2 = enc$3.end(buffer_1.Buffer.from([\n                        0xa1\n                    ]));\n                    enc$2.add(f2);\n                    const f = enc$2.end();\n                    const enc$4 = new asn1_sequence_encoder_js_1.default();\n                    enc$4.add(f);\n                    const f3 = enc$4.end(buffer_1.Buffer.from([\n                        0x04\n                    ]));\n                    enc.add(f3);\n                    const der = enc.end();\n                    const keyObject = (0, crypto_1.createPrivateKey)({\n                        key: der,\n                        format: \"der\",\n                        type: \"pkcs8\"\n                    });\n                    (0, get_named_curve_js_1.setCurve)(keyObject, jwk.crv);\n                    return keyObject;\n                }\n                const enc$1 = new asn1_sequence_encoder_js_1.default();\n                enc$1.oidFor(\"ecPublicKey\");\n                enc$1.oidFor(jwk.crv);\n                enc.add(enc$1.end());\n                enc.bitStr(pub);\n                const der = enc.end();\n                const keyObject = (0, crypto_1.createPublicKey)({\n                    key: der,\n                    format: \"der\",\n                    type: \"spki\"\n                });\n                (0, get_named_curve_js_1.setCurve)(keyObject, jwk.crv);\n                return keyObject;\n            }\n        case \"OKP\":\n            {\n                const enc = new asn1_sequence_encoder_js_1.default();\n                const isPrivate = jwk.d !== undefined;\n                if (isPrivate) {\n                    enc.zero();\n                    const enc$1 = new asn1_sequence_encoder_js_1.default();\n                    enc$1.oidFor(jwk.crv);\n                    enc.add(enc$1.end());\n                    const enc$2 = new asn1_sequence_encoder_js_1.default();\n                    enc$2.octStr(buffer_1.Buffer.from(jwk.d, \"base64\"));\n                    const f = enc$2.end(buffer_1.Buffer.from([\n                        0x04\n                    ]));\n                    enc.add(f);\n                    const der = enc.end();\n                    return (0, crypto_1.createPrivateKey)({\n                        key: der,\n                        format: \"der\",\n                        type: \"pkcs8\"\n                    });\n                }\n                const enc$1 = new asn1_sequence_encoder_js_1.default();\n                enc$1.oidFor(jwk.crv);\n                enc.add(enc$1.end());\n                enc.bitStr(buffer_1.Buffer.from(jwk.x, \"base64\"));\n                const der = enc.end();\n                return (0, crypto_1.createPublicKey)({\n                    key: der,\n                    format: \"der\",\n                    type: \"spki\"\n                });\n            }\n        default:\n            throw new errors_js_1.JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n    }\n};\nexports[\"default\"] = parse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/jwk_to_key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/key_to_jwk.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/key_to_jwk.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst asn1_sequence_decoder_js_1 = __webpack_require__(/*! ./asn1_sequence_decoder.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_decoder.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst get_named_curve_js_1 = __webpack_require__(/*! ./get_named_curve.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst flags_js_1 = __webpack_require__(/*! ./flags.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\");\nconst keyToJWK = (key)=>{\n    let keyObject;\n    if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n        if (!key.extractable) {\n            throw new TypeError(\"CryptoKey is not extractable\");\n        }\n        keyObject = crypto_1.KeyObject.from(key);\n    } else if ((0, is_key_object_js_1.default)(key)) {\n        keyObject = key;\n    } else if (key instanceof Uint8Array) {\n        return {\n            kty: \"oct\",\n            k: (0, base64url_js_1.encode)(key)\n        };\n    } else {\n        throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, \"Uint8Array\"));\n    }\n    if (flags_js_1.jwkExport) {\n        if (keyObject.type !== \"secret\" && ![\n            \"rsa\",\n            \"ec\",\n            \"ed25519\",\n            \"x25519\",\n            \"ed448\",\n            \"x448\"\n        ].includes(keyObject.asymmetricKeyType)) {\n            throw new errors_js_1.JOSENotSupported(\"Unsupported key asymmetricKeyType\");\n        }\n        return keyObject.export({\n            format: \"jwk\"\n        });\n    }\n    switch(keyObject.type){\n        case \"secret\":\n            return {\n                kty: \"oct\",\n                k: (0, base64url_js_1.encode)(keyObject.export())\n            };\n        case \"private\":\n        case \"public\":\n            {\n                switch(keyObject.asymmetricKeyType){\n                    case \"rsa\":\n                        {\n                            const der = keyObject.export({\n                                format: \"der\",\n                                type: \"pkcs1\"\n                            });\n                            const dec = new asn1_sequence_decoder_js_1.default(der);\n                            if (keyObject.type === \"private\") {\n                                dec.unsignedInteger();\n                            }\n                            const n = (0, base64url_js_1.encode)(dec.unsignedInteger());\n                            const e = (0, base64url_js_1.encode)(dec.unsignedInteger());\n                            let jwk;\n                            if (keyObject.type === \"private\") {\n                                jwk = {\n                                    d: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                                    p: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                                    q: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                                    dp: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                                    dq: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                                    qi: (0, base64url_js_1.encode)(dec.unsignedInteger())\n                                };\n                            }\n                            dec.end();\n                            return {\n                                kty: \"RSA\",\n                                n,\n                                e,\n                                ...jwk\n                            };\n                        }\n                    case \"ec\":\n                        {\n                            const crv = (0, get_named_curve_js_1.default)(keyObject);\n                            let len;\n                            let offset;\n                            let correction;\n                            switch(crv){\n                                case \"secp256k1\":\n                                    len = 64;\n                                    offset = 31 + 2;\n                                    correction = -1;\n                                    break;\n                                case \"P-256\":\n                                    len = 64;\n                                    offset = 34 + 2;\n                                    correction = -1;\n                                    break;\n                                case \"P-384\":\n                                    len = 96;\n                                    offset = 33 + 2;\n                                    correction = -3;\n                                    break;\n                                case \"P-521\":\n                                    len = 132;\n                                    offset = 33 + 2;\n                                    correction = -3;\n                                    break;\n                                default:\n                                    throw new errors_js_1.JOSENotSupported(\"Unsupported curve\");\n                            }\n                            if (keyObject.type === \"public\") {\n                                const der = keyObject.export({\n                                    type: \"spki\",\n                                    format: \"der\"\n                                });\n                                return {\n                                    kty: \"EC\",\n                                    crv,\n                                    x: (0, base64url_js_1.encode)(der.subarray(-len, -len / 2)),\n                                    y: (0, base64url_js_1.encode)(der.subarray(-len / 2))\n                                };\n                            }\n                            const der = keyObject.export({\n                                type: \"pkcs8\",\n                                format: \"der\"\n                            });\n                            if (der.length < 100) {\n                                offset += correction;\n                            }\n                            return {\n                                ...keyToJWK((0, crypto_1.createPublicKey)(keyObject)),\n                                d: (0, base64url_js_1.encode)(der.subarray(offset, offset + len / 2))\n                            };\n                        }\n                    case \"ed25519\":\n                    case \"x25519\":\n                        {\n                            const crv = (0, get_named_curve_js_1.default)(keyObject);\n                            if (keyObject.type === \"public\") {\n                                const der = keyObject.export({\n                                    type: \"spki\",\n                                    format: \"der\"\n                                });\n                                return {\n                                    kty: \"OKP\",\n                                    crv,\n                                    x: (0, base64url_js_1.encode)(der.subarray(-32))\n                                };\n                            }\n                            const der = keyObject.export({\n                                type: \"pkcs8\",\n                                format: \"der\"\n                            });\n                            return {\n                                ...keyToJWK((0, crypto_1.createPublicKey)(keyObject)),\n                                d: (0, base64url_js_1.encode)(der.subarray(-32))\n                            };\n                        }\n                    case \"ed448\":\n                    case \"x448\":\n                        {\n                            const crv = (0, get_named_curve_js_1.default)(keyObject);\n                            if (keyObject.type === \"public\") {\n                                const der = keyObject.export({\n                                    type: \"spki\",\n                                    format: \"der\"\n                                });\n                                return {\n                                    kty: \"OKP\",\n                                    crv,\n                                    x: (0, base64url_js_1.encode)(der.subarray(crv === \"Ed448\" ? -57 : -56))\n                                };\n                            }\n                            const der = keyObject.export({\n                                type: \"pkcs8\",\n                                format: \"der\"\n                            });\n                            return {\n                                ...keyToJWK((0, crypto_1.createPublicKey)(keyObject)),\n                                d: (0, base64url_js_1.encode)(der.subarray(crv === \"Ed448\" ? -57 : -56))\n                            };\n                        }\n                    default:\n                        throw new errors_js_1.JOSENotSupported(\"Unsupported key asymmetricKeyType\");\n                }\n            }\n        default:\n            throw new errors_js_1.JOSENotSupported(\"Unsupported key type\");\n    }\n};\nexports[\"default\"] = keyToJWK;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUva2V5X3RvX2p3ay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNQyxpQkFBaUJELG1CQUFPQSxDQUFDLCtHQUFnQjtBQUMvQyxNQUFNRSw2QkFBNkJGLG1CQUFPQSxDQUFDLHVJQUE0QjtBQUN2RSxNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQyw0R0FBbUI7QUFDL0MsTUFBTUksdUJBQXVCSixtQkFBT0EsQ0FBQywySEFBc0I7QUFDM0QsTUFBTUssaUJBQWlCTCxtQkFBT0EsQ0FBQywrR0FBZ0I7QUFDL0MsTUFBTU0scUJBQXFCTixtQkFBT0EsQ0FBQyx1SEFBb0I7QUFDdkQsTUFBTU8seUJBQXlCUCxtQkFBT0EsQ0FBQyxnSUFBNkI7QUFDcEUsTUFBTVEsbUJBQW1CUixtQkFBT0EsQ0FBQyxtSEFBa0I7QUFDbkQsTUFBTVMsYUFBYVQsbUJBQU9BLENBQUMsdUdBQVk7QUFDdkMsTUFBTVUsV0FBVyxDQUFDQztJQUNkLElBQUlDO0lBQ0osSUFBSSxDQUFDLEdBQUdQLGVBQWVRLFdBQVcsRUFBRUYsTUFBTTtRQUN0QyxJQUFJLENBQUNBLElBQUlHLFdBQVcsRUFBRTtZQUNsQixNQUFNLElBQUlDLFVBQVU7UUFDeEI7UUFDQUgsWUFBWWIsU0FBU2lCLFNBQVMsQ0FBQ0MsSUFBSSxDQUFDTjtJQUN4QyxPQUNLLElBQUksQ0FBQyxHQUFHTCxtQkFBbUJZLE9BQU8sRUFBRVAsTUFBTTtRQUMzQ0MsWUFBWUQ7SUFDaEIsT0FDSyxJQUFJQSxlQUFlUSxZQUFZO1FBQ2hDLE9BQU87WUFDSEMsS0FBSztZQUNMQyxHQUFHLENBQUMsR0FBR3BCLGVBQWVxQixNQUFNLEVBQUVYO1FBQ2xDO0lBQ0osT0FDSztRQUNELE1BQU0sSUFBSUksVUFBVSxDQUFDLEdBQUdSLHVCQUF1QlcsT0FBTyxFQUFFUCxRQUFRSCxpQkFBaUJlLEtBQUssRUFBRTtJQUM1RjtJQUNBLElBQUlkLFdBQVdlLFNBQVMsRUFBRTtRQUN0QixJQUFJWixVQUFVYSxJQUFJLEtBQUssWUFDbkIsQ0FBQztZQUFDO1lBQU87WUFBTTtZQUFXO1lBQVU7WUFBUztTQUFPLENBQUNDLFFBQVEsQ0FBQ2QsVUFBVWUsaUJBQWlCLEdBQUc7WUFDNUYsTUFBTSxJQUFJeEIsWUFBWXlCLGdCQUFnQixDQUFDO1FBQzNDO1FBQ0EsT0FBT2hCLFVBQVVpQixNQUFNLENBQUM7WUFBRUMsUUFBUTtRQUFNO0lBQzVDO0lBQ0EsT0FBUWxCLFVBQVVhLElBQUk7UUFDbEIsS0FBSztZQUNELE9BQU87Z0JBQ0hMLEtBQUs7Z0JBQ0xDLEdBQUcsQ0FBQyxHQUFHcEIsZUFBZXFCLE1BQU0sRUFBRVYsVUFBVWlCLE1BQU07WUFDbEQ7UUFDSixLQUFLO1FBQ0wsS0FBSztZQUFVO2dCQUNYLE9BQVFqQixVQUFVZSxpQkFBaUI7b0JBQy9CLEtBQUs7d0JBQU87NEJBQ1IsTUFBTUksTUFBTW5CLFVBQVVpQixNQUFNLENBQUM7Z0NBQUVDLFFBQVE7Z0NBQU9MLE1BQU07NEJBQVE7NEJBQzVELE1BQU1PLE1BQU0sSUFBSTlCLDJCQUEyQmdCLE9BQU8sQ0FBQ2E7NEJBQ25ELElBQUluQixVQUFVYSxJQUFJLEtBQUssV0FBVztnQ0FDOUJPLElBQUlDLGVBQWU7NEJBQ3ZCOzRCQUNBLE1BQU1DLElBQUksQ0FBQyxHQUFHakMsZUFBZXFCLE1BQU0sRUFBRVUsSUFBSUMsZUFBZTs0QkFDeEQsTUFBTUUsSUFBSSxDQUFDLEdBQUdsQyxlQUFlcUIsTUFBTSxFQUFFVSxJQUFJQyxlQUFlOzRCQUN4RCxJQUFJRzs0QkFDSixJQUFJeEIsVUFBVWEsSUFBSSxLQUFLLFdBQVc7Z0NBQzlCVyxNQUFNO29DQUNGQyxHQUFHLENBQUMsR0FBR3BDLGVBQWVxQixNQUFNLEVBQUVVLElBQUlDLGVBQWU7b0NBQ2pESyxHQUFHLENBQUMsR0FBR3JDLGVBQWVxQixNQUFNLEVBQUVVLElBQUlDLGVBQWU7b0NBQ2pETSxHQUFHLENBQUMsR0FBR3RDLGVBQWVxQixNQUFNLEVBQUVVLElBQUlDLGVBQWU7b0NBQ2pETyxJQUFJLENBQUMsR0FBR3ZDLGVBQWVxQixNQUFNLEVBQUVVLElBQUlDLGVBQWU7b0NBQ2xEUSxJQUFJLENBQUMsR0FBR3hDLGVBQWVxQixNQUFNLEVBQUVVLElBQUlDLGVBQWU7b0NBQ2xEUyxJQUFJLENBQUMsR0FBR3pDLGVBQWVxQixNQUFNLEVBQUVVLElBQUlDLGVBQWU7Z0NBQ3REOzRCQUNKOzRCQUNBRCxJQUFJVyxHQUFHOzRCQUNQLE9BQU87Z0NBQUV2QixLQUFLO2dDQUFPYztnQ0FBR0M7Z0NBQUcsR0FBR0MsR0FBRzs0QkFBQzt3QkFDdEM7b0JBQ0EsS0FBSzt3QkFBTTs0QkFDUCxNQUFNUSxNQUFNLENBQUMsR0FBR3hDLHFCQUFxQmMsT0FBTyxFQUFFTjs0QkFDOUMsSUFBSWlDOzRCQUNKLElBQUlDOzRCQUNKLElBQUlDOzRCQUNKLE9BQVFIO2dDQUNKLEtBQUs7b0NBQ0RDLE1BQU07b0NBQ05DLFNBQVMsS0FBSztvQ0FDZEMsYUFBYSxDQUFDO29DQUNkO2dDQUNKLEtBQUs7b0NBQ0RGLE1BQU07b0NBQ05DLFNBQVMsS0FBSztvQ0FDZEMsYUFBYSxDQUFDO29DQUNkO2dDQUNKLEtBQUs7b0NBQ0RGLE1BQU07b0NBQ05DLFNBQVMsS0FBSztvQ0FDZEMsYUFBYSxDQUFDO29DQUNkO2dDQUNKLEtBQUs7b0NBQ0RGLE1BQU07b0NBQ05DLFNBQVMsS0FBSztvQ0FDZEMsYUFBYSxDQUFDO29DQUNkO2dDQUNKO29DQUNJLE1BQU0sSUFBSTVDLFlBQVl5QixnQkFBZ0IsQ0FBQzs0QkFDL0M7NEJBQ0EsSUFBSWhCLFVBQVVhLElBQUksS0FBSyxVQUFVO2dDQUM3QixNQUFNTSxNQUFNbkIsVUFBVWlCLE1BQU0sQ0FBQztvQ0FBRUosTUFBTTtvQ0FBUUssUUFBUTtnQ0FBTTtnQ0FDM0QsT0FBTztvQ0FDSFYsS0FBSztvQ0FDTHdCO29DQUNBSSxHQUFHLENBQUMsR0FBRy9DLGVBQWVxQixNQUFNLEVBQUVTLElBQUlrQixRQUFRLENBQUMsQ0FBQ0osS0FBSyxDQUFDQSxNQUFNO29DQUN4REssR0FBRyxDQUFDLEdBQUdqRCxlQUFlcUIsTUFBTSxFQUFFUyxJQUFJa0IsUUFBUSxDQUFDLENBQUNKLE1BQU07Z0NBQ3REOzRCQUNKOzRCQUNBLE1BQU1kLE1BQU1uQixVQUFVaUIsTUFBTSxDQUFDO2dDQUFFSixNQUFNO2dDQUFTSyxRQUFROzRCQUFNOzRCQUM1RCxJQUFJQyxJQUFJb0IsTUFBTSxHQUFHLEtBQUs7Z0NBQ2xCTCxVQUFVQzs0QkFDZDs0QkFDQSxPQUFPO2dDQUNILEdBQUdyQyxTQUFTLENBQUMsR0FBR1gsU0FBU3FELGVBQWUsRUFBRXhDLFdBQVc7Z0NBQ3JEeUIsR0FBRyxDQUFDLEdBQUdwQyxlQUFlcUIsTUFBTSxFQUFFUyxJQUFJa0IsUUFBUSxDQUFDSCxRQUFRQSxTQUFTRCxNQUFNOzRCQUN0RTt3QkFDSjtvQkFDQSxLQUFLO29CQUNMLEtBQUs7d0JBQVU7NEJBQ1gsTUFBTUQsTUFBTSxDQUFDLEdBQUd4QyxxQkFBcUJjLE9BQU8sRUFBRU47NEJBQzlDLElBQUlBLFVBQVVhLElBQUksS0FBSyxVQUFVO2dDQUM3QixNQUFNTSxNQUFNbkIsVUFBVWlCLE1BQU0sQ0FBQztvQ0FBRUosTUFBTTtvQ0FBUUssUUFBUTtnQ0FBTTtnQ0FDM0QsT0FBTztvQ0FDSFYsS0FBSztvQ0FDTHdCO29DQUNBSSxHQUFHLENBQUMsR0FBRy9DLGVBQWVxQixNQUFNLEVBQUVTLElBQUlrQixRQUFRLENBQUMsQ0FBQztnQ0FDaEQ7NEJBQ0o7NEJBQ0EsTUFBTWxCLE1BQU1uQixVQUFVaUIsTUFBTSxDQUFDO2dDQUFFSixNQUFNO2dDQUFTSyxRQUFROzRCQUFNOzRCQUM1RCxPQUFPO2dDQUNILEdBQUdwQixTQUFTLENBQUMsR0FBR1gsU0FBU3FELGVBQWUsRUFBRXhDLFdBQVc7Z0NBQ3JEeUIsR0FBRyxDQUFDLEdBQUdwQyxlQUFlcUIsTUFBTSxFQUFFUyxJQUFJa0IsUUFBUSxDQUFDLENBQUM7NEJBQ2hEO3dCQUNKO29CQUNBLEtBQUs7b0JBQ0wsS0FBSzt3QkFBUTs0QkFDVCxNQUFNTCxNQUFNLENBQUMsR0FBR3hDLHFCQUFxQmMsT0FBTyxFQUFFTjs0QkFDOUMsSUFBSUEsVUFBVWEsSUFBSSxLQUFLLFVBQVU7Z0NBQzdCLE1BQU1NLE1BQU1uQixVQUFVaUIsTUFBTSxDQUFDO29DQUFFSixNQUFNO29DQUFRSyxRQUFRO2dDQUFNO2dDQUMzRCxPQUFPO29DQUNIVixLQUFLO29DQUNMd0I7b0NBQ0FJLEdBQUcsQ0FBQyxHQUFHL0MsZUFBZXFCLE1BQU0sRUFBRVMsSUFBSWtCLFFBQVEsQ0FBQ0wsUUFBUSxVQUFVLENBQUMsS0FBSyxDQUFDO2dDQUN4RTs0QkFDSjs0QkFDQSxNQUFNYixNQUFNbkIsVUFBVWlCLE1BQU0sQ0FBQztnQ0FBRUosTUFBTTtnQ0FBU0ssUUFBUTs0QkFBTTs0QkFDNUQsT0FBTztnQ0FDSCxHQUFHcEIsU0FBUyxDQUFDLEdBQUdYLFNBQVNxRCxlQUFlLEVBQUV4QyxXQUFXO2dDQUNyRHlCLEdBQUcsQ0FBQyxHQUFHcEMsZUFBZXFCLE1BQU0sRUFBRVMsSUFBSWtCLFFBQVEsQ0FBQ0wsUUFBUSxVQUFVLENBQUMsS0FBSyxDQUFDOzRCQUN4RTt3QkFDSjtvQkFDQTt3QkFDSSxNQUFNLElBQUl6QyxZQUFZeUIsZ0JBQWdCLENBQUM7Z0JBQy9DO1lBQ0o7UUFDQTtZQUNJLE1BQU0sSUFBSXpCLFlBQVl5QixnQkFBZ0IsQ0FBQztJQUMvQztBQUNKO0FBQ0EvQixrQkFBZSxHQUFHYSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUva2V5X3RvX2p3ay5qcz8zYmFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgYmFzZTY0dXJsX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlNjR1cmwuanNcIik7XG5jb25zdCBhc24xX3NlcXVlbmNlX2RlY29kZXJfanNfMSA9IHJlcXVpcmUoXCIuL2FzbjFfc2VxdWVuY2VfZGVjb2Rlci5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgZ2V0X25hbWVkX2N1cnZlX2pzXzEgPSByZXF1aXJlKFwiLi9nZXRfbmFtZWRfY3VydmUuanNcIik7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGlzX2tleV9vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9vYmplY3QuanNcIik7XG5jb25zdCBpbnZhbGlkX2tleV9pbnB1dF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qc1wiKTtcbmNvbnN0IGlzX2tleV9saWtlX2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfbGlrZS5qc1wiKTtcbmNvbnN0IGZsYWdzX2pzXzEgPSByZXF1aXJlKFwiLi9mbGFncy5qc1wiKTtcbmNvbnN0IGtleVRvSldLID0gKGtleSkgPT4ge1xuICAgIGxldCBrZXlPYmplY3Q7XG4gICAgaWYgKCgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkoa2V5KSkge1xuICAgICAgICBpZiAoIWtleS5leHRyYWN0YWJsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ3J5cHRvS2V5IGlzIG5vdCBleHRyYWN0YWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGtleU9iamVjdCA9IGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkoa2V5KSkge1xuICAgICAgICBrZXlPYmplY3QgPSBrZXk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGt0eTogJ29jdCcsXG4gICAgICAgICAgICBrOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShrZXkpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS5kZWZhdWx0KShrZXksIC4uLmlzX2tleV9saWtlX2pzXzEudHlwZXMsICdVaW50OEFycmF5JykpO1xuICAgIH1cbiAgICBpZiAoZmxhZ3NfanNfMS5qd2tFeHBvcnQpIHtcbiAgICAgICAgaWYgKGtleU9iamVjdC50eXBlICE9PSAnc2VjcmV0JyAmJlxuICAgICAgICAgICAgIVsncnNhJywgJ2VjJywgJ2VkMjU1MTknLCAneDI1NTE5JywgJ2VkNDQ4JywgJ3g0NDgnXS5pbmNsdWRlcyhrZXlPYmplY3QuYXN5bW1ldHJpY0tleVR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnVW5zdXBwb3J0ZWQga2V5IGFzeW1tZXRyaWNLZXlUeXBlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleU9iamVjdC5leHBvcnQoeyBmb3JtYXQ6ICdqd2snIH0pO1xuICAgIH1cbiAgICBzd2l0Y2ggKGtleU9iamVjdC50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3NlY3JldCc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGt0eTogJ29jdCcsXG4gICAgICAgICAgICAgICAgazogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoa2V5T2JqZWN0LmV4cG9ydCgpKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ3ByaXZhdGUnOlxuICAgICAgICBjYXNlICdwdWJsaWMnOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGtleU9iamVjdC5hc3ltbWV0cmljS2V5VHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JzYSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyID0ga2V5T2JqZWN0LmV4cG9ydCh7IGZvcm1hdDogJ2RlcicsIHR5cGU6ICdwa2NzMScgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlYyA9IG5ldyBhc24xX3NlcXVlbmNlX2RlY29kZXJfanNfMS5kZWZhdWx0KGRlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlPYmplY3QudHlwZSA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWMudW5zaWduZWRJbnRlZ2VyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGRlYy51bnNpZ25lZEludGVnZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgandrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5T2JqZWN0LnR5cGUgPT09ICdwcml2YXRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgandrID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGRlYy51bnNpZ25lZEludGVnZXIoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVjLnVuc2lnbmVkSW50ZWdlcigpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRwOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRxOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFpOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWMuZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGt0eTogJ1JTQScsIG4sIGUsIC4uLmp3ayB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdlYyc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3J2ID0gKDAsIGdldF9uYW1lZF9jdXJ2ZV9qc18xLmRlZmF1bHQpKGtleU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsZW47XG4gICAgICAgICAgICAgICAgICAgIGxldCBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb3JyZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNydikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2VjcDI1NmsxJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSA2NDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAzMSArIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdGlvbiA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUC0yNTYnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IDY0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDM0ICsgMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0aW9uID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQLTM4NCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gOTY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMzMgKyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAtMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1AtNTIxJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSAxMzI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMzMgKyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAtMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIGN1cnZlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleU9iamVjdC50eXBlID09PSAncHVibGljJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyID0ga2V5T2JqZWN0LmV4cG9ydCh7IHR5cGU6ICdzcGtpJywgZm9ybWF0OiAnZGVyJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga3R5OiAnRUMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNydixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoLWxlbiwgLWxlbiAvIDIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoLWxlbiAvIDIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyID0ga2V5T2JqZWN0LmV4cG9ydCh7IHR5cGU6ICdwa2NzOCcsIGZvcm1hdDogJ2RlcicgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXIubGVuZ3RoIDwgMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gY29ycmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ua2V5VG9KV0soKDAsIGNyeXB0b18xLmNyZWF0ZVB1YmxpY0tleSkoa2V5T2JqZWN0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyBsZW4gLyAyKSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2VkMjU1MTknOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3gyNTUxOSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3J2ID0gKDAsIGdldF9uYW1lZF9jdXJ2ZV9qc18xLmRlZmF1bHQpKGtleU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlPYmplY3QudHlwZSA9PT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlciA9IGtleU9iamVjdC5leHBvcnQoeyB0eXBlOiAnc3BraScsIGZvcm1hdDogJ2RlcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGt0eTogJ09LUCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3J2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGRlci5zdWJhcnJheSgtMzIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyID0ga2V5T2JqZWN0LmV4cG9ydCh7IHR5cGU6ICdwa2NzOCcsIGZvcm1hdDogJ2RlcicgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5rZXlUb0pXSygoMCwgY3J5cHRvXzEuY3JlYXRlUHVibGljS2V5KShrZXlPYmplY3QpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQ6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGRlci5zdWJhcnJheSgtMzIpKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZWQ0NDgnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3g0NDgnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNydiA9ICgwLCBnZXRfbmFtZWRfY3VydmVfanNfMS5kZWZhdWx0KShrZXlPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5T2JqZWN0LnR5cGUgPT09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXIgPSBrZXlPYmplY3QuZXhwb3J0KHsgdHlwZTogJ3Nwa2knLCBmb3JtYXQ6ICdkZXInIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrdHk6ICdPS1AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNydixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoY3J2ID09PSAnRWQ0NDgnID8gLTU3IDogLTU2KSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlciA9IGtleU9iamVjdC5leHBvcnQoeyB0eXBlOiAncGtjczgnLCBmb3JtYXQ6ICdkZXInIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ua2V5VG9KV0soKDAsIGNyeXB0b18xLmNyZWF0ZVB1YmxpY0tleSkoa2V5T2JqZWN0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoY3J2ID09PSAnRWQ0NDgnID8gLTU3IDogLTU2KSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKCdVbnN1cHBvcnRlZCBrZXkgYXN5bW1ldHJpY0tleVR5cGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIGtleSB0eXBlJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGtleVRvSldLO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwiYmFzZTY0dXJsX2pzXzEiLCJhc24xX3NlcXVlbmNlX2RlY29kZXJfanNfMSIsImVycm9yc19qc18xIiwiZ2V0X25hbWVkX2N1cnZlX2pzXzEiLCJ3ZWJjcnlwdG9fanNfMSIsImlzX2tleV9vYmplY3RfanNfMSIsImludmFsaWRfa2V5X2lucHV0X2pzXzEiLCJpc19rZXlfbGlrZV9qc18xIiwiZmxhZ3NfanNfMSIsImtleVRvSldLIiwia2V5Iiwia2V5T2JqZWN0IiwiaXNDcnlwdG9LZXkiLCJleHRyYWN0YWJsZSIsIlR5cGVFcnJvciIsIktleU9iamVjdCIsImZyb20iLCJkZWZhdWx0IiwiVWludDhBcnJheSIsImt0eSIsImsiLCJlbmNvZGUiLCJ0eXBlcyIsImp3a0V4cG9ydCIsInR5cGUiLCJpbmNsdWRlcyIsImFzeW1tZXRyaWNLZXlUeXBlIiwiSk9TRU5vdFN1cHBvcnRlZCIsImV4cG9ydCIsImZvcm1hdCIsImRlciIsImRlYyIsInVuc2lnbmVkSW50ZWdlciIsIm4iLCJlIiwiandrIiwiZCIsInAiLCJxIiwiZHAiLCJkcSIsInFpIiwiZW5kIiwiY3J2IiwibGVuIiwib2Zmc2V0IiwiY29ycmVjdGlvbiIsIngiLCJzdWJhcnJheSIsInkiLCJsZW5ndGgiLCJjcmVhdGVQdWJsaWNLZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/key_to_jwk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst get_named_curve_js_1 = __webpack_require__(/*! ./get_named_curve.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst check_modulus_length_js_1 = __webpack_require__(/*! ./check_modulus_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\");\nconst flags_js_1 = __webpack_require__(/*! ./flags.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\");\nconst PSS = {\n    padding: crypto_1.constants.RSA_PKCS1_PSS_PADDING,\n    saltLength: crypto_1.constants.RSA_PSS_SALTLEN_DIGEST\n};\nconst ecCurveAlgMap = new Map([\n    [\n        \"ES256\",\n        \"P-256\"\n    ],\n    [\n        \"ES256K\",\n        \"secp256k1\"\n    ],\n    [\n        \"ES384\",\n        \"P-384\"\n    ],\n    [\n        \"ES512\",\n        \"P-521\"\n    ]\n]);\nfunction keyForCrypto(alg, key) {\n    switch(alg){\n        case \"EdDSA\":\n            if (![\n                \"ed25519\",\n                \"ed448\"\n            ].includes(key.asymmetricKeyType)) {\n                throw new TypeError(\"Invalid key for this operation, its asymmetricKeyType must be ed25519 or ed448\");\n            }\n            return key;\n        case \"RS256\":\n        case \"RS384\":\n        case \"RS512\":\n            if (key.asymmetricKeyType !== \"rsa\") {\n                throw new TypeError(\"Invalid key for this operation, its asymmetricKeyType must be rsa\");\n            }\n            (0, check_modulus_length_js_1.default)(key, alg);\n            return key;\n        case flags_js_1.rsaPssParams && \"PS256\":\n        case flags_js_1.rsaPssParams && \"PS384\":\n        case flags_js_1.rsaPssParams && \"PS512\":\n            if (key.asymmetricKeyType === \"rsa-pss\") {\n                const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;\n                const length = parseInt(alg.slice(-3), 10);\n                if (hashAlgorithm !== undefined && (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm)) {\n                    throw new TypeError(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \"alg\" ${alg}`);\n                }\n                if (saltLength !== undefined && saltLength > length >> 3) {\n                    throw new TypeError(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \"alg\" ${alg}`);\n                }\n            } else if (key.asymmetricKeyType !== \"rsa\") {\n                throw new TypeError(\"Invalid key for this operation, its asymmetricKeyType must be rsa or rsa-pss\");\n            }\n            (0, check_modulus_length_js_1.default)(key, alg);\n            return {\n                key,\n                ...PSS\n            };\n        case !flags_js_1.rsaPssParams && \"PS256\":\n        case !flags_js_1.rsaPssParams && \"PS384\":\n        case !flags_js_1.rsaPssParams && \"PS512\":\n            if (key.asymmetricKeyType !== \"rsa\") {\n                throw new TypeError(\"Invalid key for this operation, its asymmetricKeyType must be rsa\");\n            }\n            (0, check_modulus_length_js_1.default)(key, alg);\n            return {\n                key,\n                ...PSS\n            };\n        case \"ES256\":\n        case \"ES256K\":\n        case \"ES384\":\n        case \"ES512\":\n            {\n                if (key.asymmetricKeyType !== \"ec\") {\n                    throw new TypeError(\"Invalid key for this operation, its asymmetricKeyType must be ec\");\n                }\n                const actual = (0, get_named_curve_js_1.default)(key);\n                const expected = ecCurveAlgMap.get(alg);\n                if (actual !== expected) {\n                    throw new TypeError(`Invalid key curve for the algorithm, its curve must be ${expected}, got ${actual}`);\n                }\n                return {\n                    dsaEncoding: \"ieee-p1363\",\n                    key\n                };\n            }\n        default:\n            throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n    }\n}\nexports[\"default\"] = keyForCrypto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decrypt = exports.encrypt = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst random_js_1 = __webpack_require__(/*! ./random.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst aeskw_js_1 = __webpack_require__(/*! ./aeskw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js\");\nconst check_p2s_js_1 = __webpack_require__(/*! ../lib/check_p2s.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_p2s.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst pbkdf2 = (0, util_1.promisify)(crypto_1.pbkdf2);\nfunction getPassword(key, alg) {\n    if ((0, is_key_object_js_1.default)(key)) {\n        return key.export();\n    }\n    if (key instanceof Uint8Array) {\n        return key;\n    }\n    if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n        (0, crypto_key_js_1.checkEncCryptoKey)(key, alg, \"deriveBits\", \"deriveKey\");\n        return crypto_1.KeyObject.from(key).export();\n    }\n    throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, \"Uint8Array\"));\n}\nconst encrypt = async (alg, key, cek, p2c = 2048, p2s = (0, random_js_1.default)(new Uint8Array(16)))=>{\n    (0, check_p2s_js_1.default)(p2s);\n    const salt = (0, buffer_utils_js_1.p2s)(alg, p2s);\n    const keylen = parseInt(alg.slice(13, 16), 10) >> 3;\n    const password = getPassword(key, alg);\n    const derivedKey = await pbkdf2(password, salt, p2c, keylen, `sha${alg.slice(8, 11)}`);\n    const encryptedKey = await (0, aeskw_js_1.wrap)(alg.slice(-6), derivedKey, cek);\n    return {\n        encryptedKey,\n        p2c,\n        p2s: (0, base64url_js_1.encode)(p2s)\n    };\n};\nexports.encrypt = encrypt;\nconst decrypt = async (alg, key, encryptedKey, p2c, p2s)=>{\n    (0, check_p2s_js_1.default)(p2s);\n    const salt = (0, buffer_utils_js_1.p2s)(alg, p2s);\n    const keylen = parseInt(alg.slice(13, 16), 10) >> 3;\n    const password = getPassword(key, alg);\n    const derivedKey = await pbkdf2(password, salt, p2c, keylen, `sha${alg.slice(8, 11)}`);\n    return (0, aeskw_js_1.unwrap)(alg.slice(-6), derivedKey, encryptedKey);\n};\nexports.decrypt = decrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcGJlczJrdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHQSxlQUFlLEdBQUcsS0FBSztBQUN6QyxNQUFNSSxTQUFTQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QixNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyx5R0FBYTtBQUN6QyxNQUFNRyxvQkFBb0JILG1CQUFPQSxDQUFDLHNIQUF3QjtBQUMxRCxNQUFNSSxpQkFBaUJKLG1CQUFPQSxDQUFDLCtHQUFnQjtBQUMvQyxNQUFNSyxhQUFhTCxtQkFBT0EsQ0FBQyx1R0FBWTtBQUN2QyxNQUFNTSxpQkFBaUJOLG1CQUFPQSxDQUFDLGdIQUFxQjtBQUNwRCxNQUFNTyxpQkFBaUJQLG1CQUFPQSxDQUFDLCtHQUFnQjtBQUMvQyxNQUFNUSxrQkFBa0JSLG1CQUFPQSxDQUFDLGtIQUFzQjtBQUN0RCxNQUFNUyxxQkFBcUJULG1CQUFPQSxDQUFDLHVIQUFvQjtBQUN2RCxNQUFNVSx5QkFBeUJWLG1CQUFPQSxDQUFDLGdJQUE2QjtBQUNwRSxNQUFNVyxtQkFBbUJYLG1CQUFPQSxDQUFDLG1IQUFrQjtBQUNuRCxNQUFNWSxTQUFTLENBQUMsR0FBR2IsT0FBT2MsU0FBUyxFQUFFWixTQUFTVyxNQUFNO0FBQ3BELFNBQVNFLFlBQVlDLEdBQUcsRUFBRUMsR0FBRztJQUN6QixJQUFJLENBQUMsR0FBR1AsbUJBQW1CUSxPQUFPLEVBQUVGLE1BQU07UUFDdEMsT0FBT0EsSUFBSUcsTUFBTTtJQUNyQjtJQUNBLElBQUlILGVBQWVJLFlBQVk7UUFDM0IsT0FBT0o7SUFDWDtJQUNBLElBQUksQ0FBQyxHQUFHUixlQUFlYSxXQUFXLEVBQUVMLE1BQU07UUFDckMsSUFBR1AsZ0JBQWdCYSxpQkFBaUIsRUFBRU4sS0FBS0MsS0FBSyxjQUFjO1FBQy9ELE9BQU9mLFNBQVNxQixTQUFTLENBQUNDLElBQUksQ0FBQ1IsS0FBS0csTUFBTTtJQUM5QztJQUNBLE1BQU0sSUFBSU0sVUFBVSxDQUFDLEdBQUdkLHVCQUF1Qk8sT0FBTyxFQUFFRixRQUFRSixpQkFBaUJjLEtBQUssRUFBRTtBQUM1RjtBQUNBLE1BQU0zQixVQUFVLE9BQU9rQixLQUFLRCxLQUFLVyxLQUFLQyxNQUFNLElBQUksRUFBRUMsTUFBTSxDQUFDLEdBQUcxQixZQUFZZSxPQUFPLEVBQUUsSUFBSUUsV0FBVyxJQUFJO0lBQy9GLElBQUdiLGVBQWVXLE9BQU8sRUFBRVc7SUFDNUIsTUFBTUMsT0FBTyxDQUFDLEdBQUcxQixrQkFBa0J5QixHQUFHLEVBQUVaLEtBQUtZO0lBQzdDLE1BQU1FLFNBQVNDLFNBQVNmLElBQUlnQixLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU87SUFDbEQsTUFBTUMsV0FBV25CLFlBQVlDLEtBQUtDO0lBQ2xDLE1BQU1rQixhQUFhLE1BQU10QixPQUFPcUIsVUFBVUosTUFBTUYsS0FBS0csUUFBUSxDQUFDLEdBQUcsRUFBRWQsSUFBSWdCLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNyRixNQUFNRyxlQUFlLE1BQU0sQ0FBQyxHQUFHOUIsV0FBVytCLElBQUksRUFBRXBCLElBQUlnQixLQUFLLENBQUMsQ0FBQyxJQUFJRSxZQUFZUjtJQUMzRSxPQUFPO1FBQUVTO1FBQWNSO1FBQUtDLEtBQUssQ0FBQyxHQUFHeEIsZUFBZWlDLE1BQU0sRUFBRVQ7SUFBSztBQUNyRTtBQUNBakMsZUFBZSxHQUFHRztBQUNsQixNQUFNRCxVQUFVLE9BQU9tQixLQUFLRCxLQUFLb0IsY0FBY1IsS0FBS0M7SUFDL0MsSUFBR3RCLGVBQWVXLE9BQU8sRUFBRVc7SUFDNUIsTUFBTUMsT0FBTyxDQUFDLEdBQUcxQixrQkFBa0J5QixHQUFHLEVBQUVaLEtBQUtZO0lBQzdDLE1BQU1FLFNBQVNDLFNBQVNmLElBQUlnQixLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU87SUFDbEQsTUFBTUMsV0FBV25CLFlBQVlDLEtBQUtDO0lBQ2xDLE1BQU1rQixhQUFhLE1BQU10QixPQUFPcUIsVUFBVUosTUFBTUYsS0FBS0csUUFBUSxDQUFDLEdBQUcsRUFBRWQsSUFBSWdCLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztJQUNyRixPQUFPLENBQUMsR0FBRzNCLFdBQVdpQyxNQUFNLEVBQUV0QixJQUFJZ0IsS0FBSyxDQUFDLENBQUMsSUFBSUUsWUFBWUM7QUFDN0Q7QUFDQXhDLGVBQWUsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL3BiZXMya3cuanM/MjRhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjcnlwdCA9IGV4cG9ydHMuZW5jcnlwdCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgcmFuZG9tX2pzXzEgPSByZXF1aXJlKFwiLi9yYW5kb20uanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgYmFzZTY0dXJsX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlNjR1cmwuanNcIik7XG5jb25zdCBhZXNrd19qc18xID0gcmVxdWlyZShcIi4vYWVza3cuanNcIik7XG5jb25zdCBjaGVja19wMnNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvY2hlY2tfcDJzLmpzXCIpO1xuY29uc3Qgd2ViY3J5cHRvX2pzXzEgPSByZXF1aXJlKFwiLi93ZWJjcnlwdG8uanNcIik7XG5jb25zdCBjcnlwdG9fa2V5X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NyeXB0b19rZXkuanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuY29uc3QgaW52YWxpZF9rZXlfaW5wdXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanNcIik7XG5jb25zdCBpc19rZXlfbGlrZV9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X2xpa2UuanNcIik7XG5jb25zdCBwYmtkZjIgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoY3J5cHRvXzEucGJrZGYyKTtcbmZ1bmN0aW9uIGdldFBhc3N3b3JkKGtleSwgYWxnKSB7XG4gICAgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkoa2V5KSkge1xuICAgICAgICByZXR1cm4ga2V5LmV4cG9ydCgpO1xuICAgIH1cbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICBpZiAoKDAsIHdlYmNyeXB0b19qc18xLmlzQ3J5cHRvS2V5KShrZXkpKSB7XG4gICAgICAgICgwLCBjcnlwdG9fa2V5X2pzXzEuY2hlY2tFbmNDcnlwdG9LZXkpKGtleSwgYWxnLCAnZGVyaXZlQml0cycsICdkZXJpdmVLZXknKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSkuZXhwb3J0KCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoa2V5LCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzLCAnVWludDhBcnJheScpKTtcbn1cbmNvbnN0IGVuY3J5cHQgPSBhc3luYyAoYWxnLCBrZXksIGNlaywgcDJjID0gMjA0OCwgcDJzID0gKDAsIHJhbmRvbV9qc18xLmRlZmF1bHQpKG5ldyBVaW50OEFycmF5KDE2KSkpID0+IHtcbiAgICAoMCwgY2hlY2tfcDJzX2pzXzEuZGVmYXVsdCkocDJzKTtcbiAgICBjb25zdCBzYWx0ID0gKDAsIGJ1ZmZlcl91dGlsc19qc18xLnAycykoYWxnLCBwMnMpO1xuICAgIGNvbnN0IGtleWxlbiA9IHBhcnNlSW50KGFsZy5zbGljZSgxMywgMTYpLCAxMCkgPj4gMztcbiAgICBjb25zdCBwYXNzd29yZCA9IGdldFBhc3N3b3JkKGtleSwgYWxnKTtcbiAgICBjb25zdCBkZXJpdmVkS2V5ID0gYXdhaXQgcGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBwMmMsIGtleWxlbiwgYHNoYSR7YWxnLnNsaWNlKDgsIDExKX1gKTtcbiAgICBjb25zdCBlbmNyeXB0ZWRLZXkgPSBhd2FpdCAoMCwgYWVza3dfanNfMS53cmFwKShhbGcuc2xpY2UoLTYpLCBkZXJpdmVkS2V5LCBjZWspO1xuICAgIHJldHVybiB7IGVuY3J5cHRlZEtleSwgcDJjLCBwMnM6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKHAycykgfTtcbn07XG5leHBvcnRzLmVuY3J5cHQgPSBlbmNyeXB0O1xuY29uc3QgZGVjcnlwdCA9IGFzeW5jIChhbGcsIGtleSwgZW5jcnlwdGVkS2V5LCBwMmMsIHAycykgPT4ge1xuICAgICgwLCBjaGVja19wMnNfanNfMS5kZWZhdWx0KShwMnMpO1xuICAgIGNvbnN0IHNhbHQgPSAoMCwgYnVmZmVyX3V0aWxzX2pzXzEucDJzKShhbGcsIHAycyk7XG4gICAgY29uc3Qga2V5bGVuID0gcGFyc2VJbnQoYWxnLnNsaWNlKDEzLCAxNiksIDEwKSA+PiAzO1xuICAgIGNvbnN0IHBhc3N3b3JkID0gZ2V0UGFzc3dvcmQoa2V5LCBhbGcpO1xuICAgIGNvbnN0IGRlcml2ZWRLZXkgPSBhd2FpdCBwYmtkZjIocGFzc3dvcmQsIHNhbHQsIHAyYywga2V5bGVuLCBgc2hhJHthbGcuc2xpY2UoOCwgMTEpfWApO1xuICAgIHJldHVybiAoMCwgYWVza3dfanNfMS51bndyYXApKGFsZy5zbGljZSgtNiksIGRlcml2ZWRLZXksIGVuY3J5cHRlZEtleSk7XG59O1xuZXhwb3J0cy5kZWNyeXB0ID0gZGVjcnlwdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlY3J5cHQiLCJlbmNyeXB0IiwidXRpbF8xIiwicmVxdWlyZSIsImNyeXB0b18xIiwicmFuZG9tX2pzXzEiLCJidWZmZXJfdXRpbHNfanNfMSIsImJhc2U2NHVybF9qc18xIiwiYWVza3dfanNfMSIsImNoZWNrX3Ayc19qc18xIiwid2ViY3J5cHRvX2pzXzEiLCJjcnlwdG9fa2V5X2pzXzEiLCJpc19rZXlfb2JqZWN0X2pzXzEiLCJpbnZhbGlkX2tleV9pbnB1dF9qc18xIiwiaXNfa2V5X2xpa2VfanNfMSIsInBia2RmMiIsInByb21pc2lmeSIsImdldFBhc3N3b3JkIiwia2V5IiwiYWxnIiwiZGVmYXVsdCIsImV4cG9ydCIsIlVpbnQ4QXJyYXkiLCJpc0NyeXB0b0tleSIsImNoZWNrRW5jQ3J5cHRvS2V5IiwiS2V5T2JqZWN0IiwiZnJvbSIsIlR5cGVFcnJvciIsInR5cGVzIiwiY2VrIiwicDJjIiwicDJzIiwic2FsdCIsImtleWxlbiIsInBhcnNlSW50Iiwic2xpY2UiLCJwYXNzd29yZCIsImRlcml2ZWRLZXkiLCJlbmNyeXB0ZWRLZXkiLCJ3cmFwIiwiZW5jb2RlIiwidW53cmFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return crypto_1.randomFillSync;\n    }\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcmFuZG9tLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUcsV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDL0JOLDJDQUEwQztJQUFFTyxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxTQUFTSSxjQUFjO0lBQUU7QUFBRSxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL3JhbmRvbS5qcz9jOGIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyeXB0b18xLnJhbmRvbUZpbGxTeW5jOyB9IH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImNyeXB0b18xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJyYW5kb21GaWxsU3luYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decrypt = exports.encrypt = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst check_modulus_length_js_1 = __webpack_require__(/*! ./check_modulus_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst checkKey = (key, alg)=>{\n    if (key.asymmetricKeyType !== \"rsa\") {\n        throw new TypeError(\"Invalid key for this operation, its asymmetricKeyType must be rsa\");\n    }\n    (0, check_modulus_length_js_1.default)(key, alg);\n};\nconst resolvePadding = (alg)=>{\n    switch(alg){\n        case \"RSA-OAEP\":\n        case \"RSA-OAEP-256\":\n        case \"RSA-OAEP-384\":\n        case \"RSA-OAEP-512\":\n            return crypto_1.constants.RSA_PKCS1_OAEP_PADDING;\n        case \"RSA1_5\":\n            return crypto_1.constants.RSA_PKCS1_PADDING;\n        default:\n            return undefined;\n    }\n};\nconst resolveOaepHash = (alg)=>{\n    switch(alg){\n        case \"RSA-OAEP\":\n            return \"sha1\";\n        case \"RSA-OAEP-256\":\n            return \"sha256\";\n        case \"RSA-OAEP-384\":\n            return \"sha384\";\n        case \"RSA-OAEP-512\":\n            return \"sha512\";\n        default:\n            return undefined;\n    }\n};\nfunction ensureKeyObject(key, alg, ...usages) {\n    if ((0, is_key_object_js_1.default)(key)) {\n        return key;\n    }\n    if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n        (0, crypto_key_js_1.checkEncCryptoKey)(key, alg, ...usages);\n        return crypto_1.KeyObject.from(key);\n    }\n    throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types));\n}\nconst encrypt = (alg, key, cek)=>{\n    const padding = resolvePadding(alg);\n    const oaepHash = resolveOaepHash(alg);\n    const keyObject = ensureKeyObject(key, alg, \"wrapKey\", \"encrypt\");\n    checkKey(keyObject, alg);\n    return (0, crypto_1.publicEncrypt)({\n        key: keyObject,\n        oaepHash,\n        padding\n    }, cek);\n};\nexports.encrypt = encrypt;\nconst decrypt = (alg, key, encryptedKey)=>{\n    const padding = resolvePadding(alg);\n    const oaepHash = resolveOaepHash(alg);\n    const keyObject = ensureKeyObject(key, alg, \"unwrapKey\", \"decrypt\");\n    checkKey(keyObject, alg);\n    return (0, crypto_1.privateDecrypt)({\n        key: keyObject,\n        oaepHash,\n        padding\n    }, encryptedKey);\n};\nexports.decrypt = decrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcnNhZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0EsZUFBZSxHQUFHLEtBQUs7QUFDekMsTUFBTUksV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUMsNEJBQTRCRCxtQkFBT0EsQ0FBQyxxSUFBMkI7QUFDckUsTUFBTUUsaUJBQWlCRixtQkFBT0EsQ0FBQywrR0FBZ0I7QUFDL0MsTUFBTUcsa0JBQWtCSCxtQkFBT0EsQ0FBQyxrSEFBc0I7QUFDdEQsTUFBTUkscUJBQXFCSixtQkFBT0EsQ0FBQyx1SEFBb0I7QUFDdkQsTUFBTUsseUJBQXlCTCxtQkFBT0EsQ0FBQyxnSUFBNkI7QUFDcEUsTUFBTU0sbUJBQW1CTixtQkFBT0EsQ0FBQyxtSEFBa0I7QUFDbkQsTUFBTU8sV0FBVyxDQUFDQyxLQUFLQztJQUNuQixJQUFJRCxJQUFJRSxpQkFBaUIsS0FBSyxPQUFPO1FBQ2pDLE1BQU0sSUFBSUMsVUFBVTtJQUN4QjtJQUNDLElBQUdWLDBCQUEwQlcsT0FBTyxFQUFFSixLQUFLQztBQUNoRDtBQUNBLE1BQU1JLGlCQUFpQixDQUFDSjtJQUNwQixPQUFRQTtRQUNKLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPVixTQUFTZSxTQUFTLENBQUNDLHNCQUFzQjtRQUNwRCxLQUFLO1lBQ0QsT0FBT2hCLFNBQVNlLFNBQVMsQ0FBQ0UsaUJBQWlCO1FBQy9DO1lBQ0ksT0FBT0M7SUFDZjtBQUNKO0FBQ0EsTUFBTUMsa0JBQWtCLENBQUNUO0lBQ3JCLE9BQVFBO1FBQ0osS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWDtZQUNJLE9BQU9RO0lBQ2Y7QUFDSjtBQUNBLFNBQVNFLGdCQUFnQlgsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR1csTUFBTTtJQUN4QyxJQUFJLENBQUMsR0FBR2hCLG1CQUFtQlEsT0FBTyxFQUFFSixNQUFNO1FBQ3RDLE9BQU9BO0lBQ1g7SUFDQSxJQUFJLENBQUMsR0FBR04sZUFBZW1CLFdBQVcsRUFBRWIsTUFBTTtRQUNyQyxJQUFHTCxnQkFBZ0JtQixpQkFBaUIsRUFBRWQsS0FBS0MsUUFBUVc7UUFDcEQsT0FBT3JCLFNBQVN3QixTQUFTLENBQUNDLElBQUksQ0FBQ2hCO0lBQ25DO0lBQ0EsTUFBTSxJQUFJRyxVQUFVLENBQUMsR0FBR04sdUJBQXVCTyxPQUFPLEVBQUVKLFFBQVFGLGlCQUFpQm1CLEtBQUs7QUFDMUY7QUFDQSxNQUFNM0IsVUFBVSxDQUFDVyxLQUFLRCxLQUFLa0I7SUFDdkIsTUFBTUMsVUFBVWQsZUFBZUo7SUFDL0IsTUFBTW1CLFdBQVdWLGdCQUFnQlQ7SUFDakMsTUFBTW9CLFlBQVlWLGdCQUFnQlgsS0FBS0MsS0FBSyxXQUFXO0lBQ3ZERixTQUFTc0IsV0FBV3BCO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHVixTQUFTK0IsYUFBYSxFQUFFO1FBQUV0QixLQUFLcUI7UUFBV0Q7UUFBVUQ7SUFBUSxHQUFHRDtBQUM5RTtBQUNBL0IsZUFBZSxHQUFHRztBQUNsQixNQUFNRCxVQUFVLENBQUNZLEtBQUtELEtBQUt1QjtJQUN2QixNQUFNSixVQUFVZCxlQUFlSjtJQUMvQixNQUFNbUIsV0FBV1YsZ0JBQWdCVDtJQUNqQyxNQUFNb0IsWUFBWVYsZ0JBQWdCWCxLQUFLQyxLQUFLLGFBQWE7SUFDekRGLFNBQVNzQixXQUFXcEI7SUFDcEIsT0FBTyxDQUFDLEdBQUdWLFNBQVNpQyxjQUFjLEVBQUU7UUFBRXhCLEtBQUtxQjtRQUFXRDtRQUFVRDtJQUFRLEdBQUdJO0FBQy9FO0FBQ0FwQyxlQUFlLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9yc2Flcy5qcz8zZTExIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNyeXB0ID0gZXhwb3J0cy5lbmNyeXB0ID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgY2hlY2tfbW9kdWx1c19sZW5ndGhfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrX21vZHVsdXNfbGVuZ3RoLmpzXCIpO1xuY29uc3Qgd2ViY3J5cHRvX2pzXzEgPSByZXF1aXJlKFwiLi93ZWJjcnlwdG8uanNcIik7XG5jb25zdCBjcnlwdG9fa2V5X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2NyeXB0b19rZXkuanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuY29uc3QgaW52YWxpZF9rZXlfaW5wdXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaW52YWxpZF9rZXlfaW5wdXQuanNcIik7XG5jb25zdCBpc19rZXlfbGlrZV9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X2xpa2UuanNcIik7XG5jb25zdCBjaGVja0tleSA9IChrZXksIGFsZykgPT4ge1xuICAgIGlmIChrZXkuYXN5bW1ldHJpY0tleVR5cGUgIT09ICdyc2EnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQga2V5IGZvciB0aGlzIG9wZXJhdGlvbiwgaXRzIGFzeW1tZXRyaWNLZXlUeXBlIG11c3QgYmUgcnNhJyk7XG4gICAgfVxuICAgICgwLCBjaGVja19tb2R1bHVzX2xlbmd0aF9qc18xLmRlZmF1bHQpKGtleSwgYWxnKTtcbn07XG5jb25zdCByZXNvbHZlUGFkZGluZyA9IChhbGcpID0+IHtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdSU0EtT0FFUCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTI1Nic6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTM4NCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTUxMic6XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvXzEuY29uc3RhbnRzLlJTQV9QS0NTMV9PQUVQX1BBRERJTkc7XG4gICAgICAgIGNhc2UgJ1JTQTFfNSc6XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvXzEuY29uc3RhbnRzLlJTQV9QS0NTMV9QQURESU5HO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59O1xuY29uc3QgcmVzb2x2ZU9hZXBIYXNoID0gKGFsZykgPT4ge1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMSc7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTI1Nic6XG4gICAgICAgICAgICByZXR1cm4gJ3NoYTI1Nic7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTM4NCc6XG4gICAgICAgICAgICByZXR1cm4gJ3NoYTM4NCc7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTUxMic6XG4gICAgICAgICAgICByZXR1cm4gJ3NoYTUxMic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5mdW5jdGlvbiBlbnN1cmVLZXlPYmplY3Qoa2V5LCBhbGcsIC4uLnVzYWdlcykge1xuICAgIGlmICgoMCwgaXNfa2V5X29iamVjdF9qc18xLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgaWYgKCgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkoa2V5KSkge1xuICAgICAgICAoMCwgY3J5cHRvX2tleV9qc18xLmNoZWNrRW5jQ3J5cHRvS2V5KShrZXksIGFsZywgLi4udXNhZ2VzKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoa2V5LCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzKSk7XG59XG5jb25zdCBlbmNyeXB0ID0gKGFsZywga2V5LCBjZWspID0+IHtcbiAgICBjb25zdCBwYWRkaW5nID0gcmVzb2x2ZVBhZGRpbmcoYWxnKTtcbiAgICBjb25zdCBvYWVwSGFzaCA9IHJlc29sdmVPYWVwSGFzaChhbGcpO1xuICAgIGNvbnN0IGtleU9iamVjdCA9IGVuc3VyZUtleU9iamVjdChrZXksIGFsZywgJ3dyYXBLZXknLCAnZW5jcnlwdCcpO1xuICAgIGNoZWNrS2V5KGtleU9iamVjdCwgYWxnKTtcbiAgICByZXR1cm4gKDAsIGNyeXB0b18xLnB1YmxpY0VuY3J5cHQpKHsga2V5OiBrZXlPYmplY3QsIG9hZXBIYXNoLCBwYWRkaW5nIH0sIGNlayk7XG59O1xuZXhwb3J0cy5lbmNyeXB0ID0gZW5jcnlwdDtcbmNvbnN0IGRlY3J5cHQgPSAoYWxnLCBrZXksIGVuY3J5cHRlZEtleSkgPT4ge1xuICAgIGNvbnN0IHBhZGRpbmcgPSByZXNvbHZlUGFkZGluZyhhbGcpO1xuICAgIGNvbnN0IG9hZXBIYXNoID0gcmVzb2x2ZU9hZXBIYXNoKGFsZyk7XG4gICAgY29uc3Qga2V5T2JqZWN0ID0gZW5zdXJlS2V5T2JqZWN0KGtleSwgYWxnLCAndW53cmFwS2V5JywgJ2RlY3J5cHQnKTtcbiAgICBjaGVja0tleShrZXlPYmplY3QsIGFsZyk7XG4gICAgcmV0dXJuICgwLCBjcnlwdG9fMS5wcml2YXRlRGVjcnlwdCkoeyBrZXk6IGtleU9iamVjdCwgb2FlcEhhc2gsIHBhZGRpbmcgfSwgZW5jcnlwdGVkS2V5KTtcbn07XG5leHBvcnRzLmRlY3J5cHQgPSBkZWNyeXB0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVjcnlwdCIsImVuY3J5cHQiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJjaGVja19tb2R1bHVzX2xlbmd0aF9qc18xIiwid2ViY3J5cHRvX2pzXzEiLCJjcnlwdG9fa2V5X2pzXzEiLCJpc19rZXlfb2JqZWN0X2pzXzEiLCJpbnZhbGlkX2tleV9pbnB1dF9qc18xIiwiaXNfa2V5X2xpa2VfanNfMSIsImNoZWNrS2V5Iiwia2V5IiwiYWxnIiwiYXN5bW1ldHJpY0tleVR5cGUiLCJUeXBlRXJyb3IiLCJkZWZhdWx0IiwicmVzb2x2ZVBhZGRpbmciLCJjb25zdGFudHMiLCJSU0FfUEtDUzFfT0FFUF9QQURESU5HIiwiUlNBX1BLQ1MxX1BBRERJTkciLCJ1bmRlZmluZWQiLCJyZXNvbHZlT2FlcEhhc2giLCJlbnN1cmVLZXlPYmplY3QiLCJ1c2FnZXMiLCJpc0NyeXB0b0tleSIsImNoZWNrRW5jQ3J5cHRvS2V5IiwiS2V5T2JqZWN0IiwiZnJvbSIsInR5cGVzIiwiY2VrIiwicGFkZGluZyIsIm9hZXBIYXNoIiwia2V5T2JqZWN0IiwicHVibGljRW5jcnlwdCIsImVuY3J5cHRlZEtleSIsInByaXZhdGVEZWNyeXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/runtime.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/runtime.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = \"node:crypto\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWUsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcnVudGltZS5qcz9hMTMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gJ25vZGU6Y3J5cHRvJztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst dsa_digest_js_1 = __webpack_require__(/*! ./dsa_digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js\");\nconst hmac_digest_js_1 = __webpack_require__(/*! ./hmac_digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/hmac_digest.js\");\nconst node_key_js_1 = __webpack_require__(/*! ./node_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js\");\nconst get_sign_verify_key_js_1 = __webpack_require__(/*! ./get_sign_verify_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js\");\nlet oneShotSign;\nif (crypto.sign.length > 3) {\n    oneShotSign = (0, util_1.promisify)(crypto.sign);\n} else {\n    oneShotSign = crypto.sign;\n}\nconst sign = async (alg, key, data)=>{\n    const keyObject = (0, get_sign_verify_key_js_1.default)(alg, key, \"sign\");\n    if (alg.startsWith(\"HS\")) {\n        const hmac = crypto.createHmac((0, hmac_digest_js_1.default)(alg), keyObject);\n        hmac.update(data);\n        return hmac.digest();\n    }\n    return oneShotSign((0, dsa_digest_js_1.default)(alg), data, (0, node_key_js_1.default)(alg, keyObject));\n};\nexports[\"default\"] = sign;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvc2lnbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxTQUFTQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUMvQixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QixNQUFNRSxrQkFBa0JGLG1CQUFPQSxDQUFDLGlIQUFpQjtBQUNqRCxNQUFNRyxtQkFBbUJILG1CQUFPQSxDQUFDLG1IQUFrQjtBQUNuRCxNQUFNSSxnQkFBZ0JKLG1CQUFPQSxDQUFDLDZHQUFlO0FBQzdDLE1BQU1LLDJCQUEyQkwsbUJBQU9BLENBQUMsbUlBQTBCO0FBQ25FLElBQUlNO0FBQ0osSUFBSVAsT0FBT1EsSUFBSSxDQUFDQyxNQUFNLEdBQUcsR0FBRztJQUN4QkYsY0FBYyxDQUFDLEdBQUdMLE9BQU9RLFNBQVMsRUFBRVYsT0FBT1EsSUFBSTtBQUNuRCxPQUNLO0lBQ0RELGNBQWNQLE9BQU9RLElBQUk7QUFDN0I7QUFDQSxNQUFNQSxPQUFPLE9BQU9HLEtBQUtDLEtBQUtDO0lBQzFCLE1BQU1DLFlBQVksQ0FBQyxHQUFHUix5QkFBeUJTLE9BQU8sRUFBRUosS0FBS0MsS0FBSztJQUNsRSxJQUFJRCxJQUFJSyxVQUFVLENBQUMsT0FBTztRQUN0QixNQUFNQyxPQUFPakIsT0FBT2tCLFVBQVUsQ0FBQyxDQUFDLEdBQUdkLGlCQUFpQlcsT0FBTyxFQUFFSixNQUFNRztRQUNuRUcsS0FBS0UsTUFBTSxDQUFDTjtRQUNaLE9BQU9JLEtBQUtHLE1BQU07SUFDdEI7SUFDQSxPQUFPYixZQUFZLENBQUMsR0FBR0osZ0JBQWdCWSxPQUFPLEVBQUVKLE1BQU1FLE1BQU0sQ0FBQyxHQUFHUixjQUFjVSxPQUFPLEVBQUVKLEtBQUtHO0FBQ2hHO0FBQ0FoQixrQkFBZSxHQUFHVSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvc2lnbi5qcz9lNmY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgZHNhX2RpZ2VzdF9qc18xID0gcmVxdWlyZShcIi4vZHNhX2RpZ2VzdC5qc1wiKTtcbmNvbnN0IGhtYWNfZGlnZXN0X2pzXzEgPSByZXF1aXJlKFwiLi9obWFjX2RpZ2VzdC5qc1wiKTtcbmNvbnN0IG5vZGVfa2V5X2pzXzEgPSByZXF1aXJlKFwiLi9ub2RlX2tleS5qc1wiKTtcbmNvbnN0IGdldF9zaWduX3ZlcmlmeV9rZXlfanNfMSA9IHJlcXVpcmUoXCIuL2dldF9zaWduX3ZlcmlmeV9rZXkuanNcIik7XG5sZXQgb25lU2hvdFNpZ247XG5pZiAoY3J5cHRvLnNpZ24ubGVuZ3RoID4gMykge1xuICAgIG9uZVNob3RTaWduID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKGNyeXB0by5zaWduKTtcbn1cbmVsc2Uge1xuICAgIG9uZVNob3RTaWduID0gY3J5cHRvLnNpZ247XG59XG5jb25zdCBzaWduID0gYXN5bmMgKGFsZywga2V5LCBkYXRhKSA9PiB7XG4gICAgY29uc3Qga2V5T2JqZWN0ID0gKDAsIGdldF9zaWduX3ZlcmlmeV9rZXlfanNfMS5kZWZhdWx0KShhbGcsIGtleSwgJ3NpZ24nKTtcbiAgICBpZiAoYWxnLnN0YXJ0c1dpdGgoJ0hTJykpIHtcbiAgICAgICAgY29uc3QgaG1hYyA9IGNyeXB0by5jcmVhdGVIbWFjKCgwLCBobWFjX2RpZ2VzdF9qc18xLmRlZmF1bHQpKGFsZyksIGtleU9iamVjdCk7XG4gICAgICAgIGhtYWMudXBkYXRlKGRhdGEpO1xuICAgICAgICByZXR1cm4gaG1hYy5kaWdlc3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIG9uZVNob3RTaWduKCgwLCBkc2FfZGlnZXN0X2pzXzEuZGVmYXVsdCkoYWxnKSwgZGF0YSwgKDAsIG5vZGVfa2V5X2pzXzEuZGVmYXVsdCkoYWxnLCBrZXlPYmplY3QpKTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBzaWduO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3J5cHRvIiwicmVxdWlyZSIsInV0aWxfMSIsImRzYV9kaWdlc3RfanNfMSIsImhtYWNfZGlnZXN0X2pzXzEiLCJub2RlX2tleV9qc18xIiwiZ2V0X3NpZ25fdmVyaWZ5X2tleV9qc18xIiwib25lU2hvdFNpZ24iLCJzaWduIiwibGVuZ3RoIiwicHJvbWlzaWZ5IiwiYWxnIiwia2V5IiwiZGF0YSIsImtleU9iamVjdCIsImRlZmF1bHQiLCJzdGFydHNXaXRoIiwiaG1hYyIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/timing_safe_equal.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/timing_safe_equal.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst timingSafeEqual = crypto_1.timingSafeEqual;\nexports[\"default\"] = timingSafeEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvdGltaW5nX3NhZmVfZXF1YWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsV0FBV0MsbUJBQU9BLENBQUMsc0JBQVE7QUFDakMsTUFBTUMsa0JBQWtCRixTQUFTRSxlQUFlO0FBQ2hESixrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL2ltYWdlLWdhbGxlcnkvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvdGltaW5nX3NhZmVfZXF1YWwuanM/NGUzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHRpbWluZ1NhZmVFcXVhbCA9IGNyeXB0b18xLnRpbWluZ1NhZmVFcXVhbDtcbmV4cG9ydHMuZGVmYXVsdCA9IHRpbWluZ1NhZmVFcXVhbDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyeXB0b18xIiwicmVxdWlyZSIsInRpbWluZ1NhZmVFcXVhbCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/timing_safe_equal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/verify.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/verify.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst dsa_digest_js_1 = __webpack_require__(/*! ./dsa_digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js\");\nconst node_key_js_1 = __webpack_require__(/*! ./node_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js\");\nconst sign_js_1 = __webpack_require__(/*! ./sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js\");\nconst get_sign_verify_key_js_1 = __webpack_require__(/*! ./get_sign_verify_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js\");\nconst flags_js_1 = __webpack_require__(/*! ./flags.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\");\nlet oneShotVerify;\nif (crypto.verify.length > 4 && flags_js_1.oneShotCallback) {\n    oneShotVerify = (0, util_1.promisify)(crypto.verify);\n} else {\n    oneShotVerify = crypto.verify;\n}\nconst verify = async (alg, key, signature, data)=>{\n    const keyObject = (0, get_sign_verify_key_js_1.default)(alg, key, \"verify\");\n    if (alg.startsWith(\"HS\")) {\n        const expected = await (0, sign_js_1.default)(alg, keyObject, data);\n        const actual = signature;\n        try {\n            return crypto.timingSafeEqual(actual, expected);\n        } catch  {\n            return false;\n        }\n    }\n    const algorithm = (0, dsa_digest_js_1.default)(alg);\n    const keyInput = (0, node_key_js_1.default)(alg, keyObject);\n    try {\n        return await oneShotVerify(algorithm, data, keyInput, signature);\n    } catch  {\n        return false;\n    }\n};\nexports[\"default\"] = verify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvdmVyaWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFNBQVNDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQy9CLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLGtCQUFNO0FBQzdCLE1BQU1FLGtCQUFrQkYsbUJBQU9BLENBQUMsaUhBQWlCO0FBQ2pELE1BQU1HLGdCQUFnQkgsbUJBQU9BLENBQUMsNkdBQWU7QUFDN0MsTUFBTUksWUFBWUosbUJBQU9BLENBQUMscUdBQVc7QUFDckMsTUFBTUssMkJBQTJCTCxtQkFBT0EsQ0FBQyxtSUFBMEI7QUFDbkUsTUFBTU0sYUFBYU4sbUJBQU9BLENBQUMsdUdBQVk7QUFDdkMsSUFBSU87QUFDSixJQUFJUixPQUFPUyxNQUFNLENBQUNDLE1BQU0sR0FBRyxLQUFLSCxXQUFXSSxlQUFlLEVBQUU7SUFDeERILGdCQUFnQixDQUFDLEdBQUdOLE9BQU9VLFNBQVMsRUFBRVosT0FBT1MsTUFBTTtBQUN2RCxPQUNLO0lBQ0RELGdCQUFnQlIsT0FBT1MsTUFBTTtBQUNqQztBQUNBLE1BQU1BLFNBQVMsT0FBT0ksS0FBS0MsS0FBS0MsV0FBV0M7SUFDdkMsTUFBTUMsWUFBWSxDQUFDLEdBQUdYLHlCQUF5QlksT0FBTyxFQUFFTCxLQUFLQyxLQUFLO0lBQ2xFLElBQUlELElBQUlNLFVBQVUsQ0FBQyxPQUFPO1FBQ3RCLE1BQU1DLFdBQVcsTUFBTSxDQUFDLEdBQUdmLFVBQVVhLE9BQU8sRUFBRUwsS0FBS0ksV0FBV0Q7UUFDOUQsTUFBTUssU0FBU047UUFDZixJQUFJO1lBQ0EsT0FBT2YsT0FBT3NCLGVBQWUsQ0FBQ0QsUUFBUUQ7UUFDMUMsRUFDQSxPQUFNO1lBQ0YsT0FBTztRQUNYO0lBQ0o7SUFDQSxNQUFNRyxZQUFZLENBQUMsR0FBR3BCLGdCQUFnQmUsT0FBTyxFQUFFTDtJQUMvQyxNQUFNVyxXQUFXLENBQUMsR0FBR3BCLGNBQWNjLE9BQU8sRUFBRUwsS0FBS0k7SUFDakQsSUFBSTtRQUNBLE9BQU8sTUFBTVQsY0FBY2UsV0FBV1AsTUFBTVEsVUFBVVQ7SUFDMUQsRUFDQSxPQUFNO1FBQ0YsT0FBTztJQUNYO0FBQ0o7QUFDQWpCLGtCQUFlLEdBQUdXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS92ZXJpZnkuanM/NTBjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGRzYV9kaWdlc3RfanNfMSA9IHJlcXVpcmUoXCIuL2RzYV9kaWdlc3QuanNcIik7XG5jb25zdCBub2RlX2tleV9qc18xID0gcmVxdWlyZShcIi4vbm9kZV9rZXkuanNcIik7XG5jb25zdCBzaWduX2pzXzEgPSByZXF1aXJlKFwiLi9zaWduLmpzXCIpO1xuY29uc3QgZ2V0X3NpZ25fdmVyaWZ5X2tleV9qc18xID0gcmVxdWlyZShcIi4vZ2V0X3NpZ25fdmVyaWZ5X2tleS5qc1wiKTtcbmNvbnN0IGZsYWdzX2pzXzEgPSByZXF1aXJlKFwiLi9mbGFncy5qc1wiKTtcbmxldCBvbmVTaG90VmVyaWZ5O1xuaWYgKGNyeXB0by52ZXJpZnkubGVuZ3RoID4gNCAmJiBmbGFnc19qc18xLm9uZVNob3RDYWxsYmFjaykge1xuICAgIG9uZVNob3RWZXJpZnkgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoY3J5cHRvLnZlcmlmeSk7XG59XG5lbHNlIHtcbiAgICBvbmVTaG90VmVyaWZ5ID0gY3J5cHRvLnZlcmlmeTtcbn1cbmNvbnN0IHZlcmlmeSA9IGFzeW5jIChhbGcsIGtleSwgc2lnbmF0dXJlLCBkYXRhKSA9PiB7XG4gICAgY29uc3Qga2V5T2JqZWN0ID0gKDAsIGdldF9zaWduX3ZlcmlmeV9rZXlfanNfMS5kZWZhdWx0KShhbGcsIGtleSwgJ3ZlcmlmeScpO1xuICAgIGlmIChhbGcuc3RhcnRzV2l0aCgnSFMnKSkge1xuICAgICAgICBjb25zdCBleHBlY3RlZCA9IGF3YWl0ICgwLCBzaWduX2pzXzEuZGVmYXVsdCkoYWxnLCBrZXlPYmplY3QsIGRhdGEpO1xuICAgICAgICBjb25zdCBhY3R1YWwgPSBzaWduYXR1cmU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvLnRpbWluZ1NhZmVFcXVhbChhY3R1YWwsIGV4cGVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYWxnb3JpdGhtID0gKDAsIGRzYV9kaWdlc3RfanNfMS5kZWZhdWx0KShhbGcpO1xuICAgIGNvbnN0IGtleUlucHV0ID0gKDAsIG5vZGVfa2V5X2pzXzEuZGVmYXVsdCkoYWxnLCBrZXlPYmplY3QpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBvbmVTaG90VmVyaWZ5KGFsZ29yaXRobSwgZGF0YSwga2V5SW5wdXQsIHNpZ25hdHVyZSk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSB2ZXJpZnk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcnlwdG8iLCJyZXF1aXJlIiwidXRpbF8xIiwiZHNhX2RpZ2VzdF9qc18xIiwibm9kZV9rZXlfanNfMSIsInNpZ25fanNfMSIsImdldF9zaWduX3ZlcmlmeV9rZXlfanNfMSIsImZsYWdzX2pzXzEiLCJvbmVTaG90VmVyaWZ5IiwidmVyaWZ5IiwibGVuZ3RoIiwib25lU2hvdENhbGxiYWNrIiwicHJvbWlzaWZ5IiwiYWxnIiwia2V5Iiwic2lnbmF0dXJlIiwiZGF0YSIsImtleU9iamVjdCIsImRlZmF1bHQiLCJzdGFydHNXaXRoIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJ0aW1pbmdTYWZlRXF1YWwiLCJhbGdvcml0aG0iLCJrZXlJbnB1dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isCryptoKey = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst webcrypto = crypto.webcrypto;\nexports[\"default\"] = webcrypto;\nexports.isCryptoKey = util.types.isCryptoKey ? (key)=>util.types.isCryptoKey(key) : (key)=>false;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvd2ViY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLE1BQU1HLFNBQVNDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQy9CLE1BQU1DLE9BQU9ELG1CQUFPQSxDQUFDLGtCQUFNO0FBQzNCLE1BQU1FLFlBQVlILE9BQU9HLFNBQVM7QUFDbENOLGtCQUFlLEdBQUdNO0FBQ2xCTixtQkFBbUIsR0FBR0ssS0FBS0csS0FBSyxDQUFDTixXQUFXLEdBQ3RDLENBQUNPLE1BQVFKLEtBQUtHLEtBQUssQ0FBQ04sV0FBVyxDQUFDTyxPQUU5QixDQUFDQSxNQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS93ZWJjcnlwdG8uanM/ZWYzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNDcnlwdG9LZXkgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3Qgd2ViY3J5cHRvID0gY3J5cHRvLndlYmNyeXB0bztcbmV4cG9ydHMuZGVmYXVsdCA9IHdlYmNyeXB0bztcbmV4cG9ydHMuaXNDcnlwdG9LZXkgPSB1dGlsLnR5cGVzLmlzQ3J5cHRvS2V5XG4gICAgPyAoa2V5KSA9PiB1dGlsLnR5cGVzLmlzQ3J5cHRvS2V5KGtleSlcbiAgICA6XG4gICAgICAgIChrZXkpID0+IGZhbHNlO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNDcnlwdG9LZXkiLCJjcnlwdG8iLCJyZXF1aXJlIiwidXRpbCIsIndlYmNyeXB0byIsImRlZmF1bHQiLCJ0eXBlcyIsImtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.deflate = exports.inflate = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst zlib_1 = __webpack_require__(/*! zlib */ \"zlib\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst inflateRaw = (0, util_1.promisify)(zlib_1.inflateRaw);\nconst deflateRaw = (0, util_1.promisify)(zlib_1.deflateRaw);\nconst inflate = (input)=>inflateRaw(input, {\n        maxOutputLength: 250000\n    }).catch(()=>{\n        throw new errors_js_1.JWEDecompressionFailed();\n    });\nexports.inflate = inflate;\nconst deflate = (input)=>deflateRaw(input);\nexports.deflate = deflate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvemxpYi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHQSxlQUFlLEdBQUcsS0FBSztBQUN6QyxNQUFNSSxTQUFTQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QixNQUFNRSxjQUFjRixtQkFBT0EsQ0FBQyw0R0FBbUI7QUFDL0MsTUFBTUcsYUFBYSxDQUFDLEdBQUdKLE9BQU9LLFNBQVMsRUFBRUgsT0FBT0UsVUFBVTtBQUMxRCxNQUFNRSxhQUFhLENBQUMsR0FBR04sT0FBT0ssU0FBUyxFQUFFSCxPQUFPSSxVQUFVO0FBQzFELE1BQU1QLFVBQVUsQ0FBQ1EsUUFBVUgsV0FBV0csT0FBTztRQUFFQyxpQkFBaUI7SUFBTyxHQUFHQyxLQUFLLENBQUM7UUFDNUUsTUFBTSxJQUFJTixZQUFZTyxzQkFBc0I7SUFDaEQ7QUFDQWQsZUFBZSxHQUFHRztBQUNsQixNQUFNRCxVQUFVLENBQUNTLFFBQVVELFdBQVdDO0FBQ3RDWCxlQUFlLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS96bGliLmpzPzZjNmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmxhdGUgPSBleHBvcnRzLmluZmxhdGUgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IHpsaWJfMSA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBpbmZsYXRlUmF3ID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHpsaWJfMS5pbmZsYXRlUmF3KTtcbmNvbnN0IGRlZmxhdGVSYXcgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoemxpYl8xLmRlZmxhdGVSYXcpO1xuY29uc3QgaW5mbGF0ZSA9IChpbnB1dCkgPT4gaW5mbGF0ZVJhdyhpbnB1dCwgeyBtYXhPdXRwdXRMZW5ndGg6IDI1MDAwMCB9KS5jYXRjaCgoKSA9PiB7XG4gICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRURlY29tcHJlc3Npb25GYWlsZWQoKTtcbn0pO1xuZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcbmNvbnN0IGRlZmxhdGUgPSAoaW5wdXQpID0+IGRlZmxhdGVSYXcoaW5wdXQpO1xuZXhwb3J0cy5kZWZsYXRlID0gZGVmbGF0ZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmxhdGUiLCJpbmZsYXRlIiwidXRpbF8xIiwicmVxdWlyZSIsInpsaWJfMSIsImVycm9yc19qc18xIiwiaW5mbGF0ZVJhdyIsInByb21pc2lmeSIsImRlZmxhdGVSYXciLCJpbnB1dCIsIm1heE91dHB1dExlbmd0aCIsImNhdGNoIiwiSldFRGVjb21wcmVzc2lvbkZhaWxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decode = exports.encode = void 0;\nconst base64url = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nexports.encode = base64url.encode;\nexports.decode = base64url.decode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvYmFzZTY0dXJsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdBLGNBQWMsR0FBRyxLQUFLO0FBQ3ZDLE1BQU1JLFlBQVlDLG1CQUFPQSxDQUFDLHdIQUF5QjtBQUNuREwsY0FBYyxHQUFHSSxVQUFVRCxNQUFNO0FBQ2pDSCxjQUFjLEdBQUdJLFVBQVVGLE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy91dGlsL2Jhc2U2NHVybC5qcz9hNjgyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLmVuY29kZSA9IHZvaWQgMDtcbmNvbnN0IGJhc2U2NHVybCA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2Jhc2U2NHVybC5qc1wiKTtcbmV4cG9ydHMuZW5jb2RlID0gYmFzZTY0dXJsLmVuY29kZTtcbmV4cG9ydHMuZGVjb2RlID0gYmFzZTY0dXJsLmRlY29kZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlY29kZSIsImVuY29kZSIsImJhc2U2NHVybCIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_jwt.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_jwt.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeJwt = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction decodeJwt(jwt) {\n    if (typeof jwt !== \"string\") throw new errors_js_1.JWTInvalid(\"JWTs must use Compact JWS serialization, JWT must be a string\");\n    const { 1: payload, length } = jwt.split(\".\");\n    if (length === 5) throw new errors_js_1.JWTInvalid(\"Only JWTs using Compact JWS serialization can be decoded\");\n    if (length !== 3) throw new errors_js_1.JWTInvalid(\"Invalid JWT\");\n    if (!payload) throw new errors_js_1.JWTInvalid(\"JWTs must contain a payload\");\n    let decoded;\n    try {\n        decoded = (0, base64url_js_1.decode)(payload);\n    } catch  {\n        throw new errors_js_1.JWTInvalid(\"Failed to base64url decode the payload\");\n    }\n    let result;\n    try {\n        result = JSON.parse(buffer_utils_js_1.decoder.decode(decoded));\n    } catch  {\n        throw new errors_js_1.JWTInvalid(\"Failed to parse the decoded payload as JSON\");\n    }\n    if (!(0, is_object_js_1.default)(result)) throw new errors_js_1.JWTInvalid(\"Invalid JWT Claims Set\");\n    return result;\n}\nexports.decodeJwt = decodeJwt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvZGVjb2RlX2p3dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRyxpQkFBaUJDLG1CQUFPQSxDQUFDLDRHQUFnQjtBQUMvQyxNQUFNQyxvQkFBb0JELG1CQUFPQSxDQUFDLHNIQUF3QjtBQUMxRCxNQUFNRSxpQkFBaUJGLG1CQUFPQSxDQUFDLGdIQUFxQjtBQUNwRCxNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQyxzR0FBYTtBQUN6QyxTQUFTRixVQUFVTSxHQUFHO0lBQ2xCLElBQUksT0FBT0EsUUFBUSxVQUNmLE1BQU0sSUFBSUQsWUFBWUUsVUFBVSxDQUFDO0lBQ3JDLE1BQU0sRUFBRSxHQUFHQyxPQUFPLEVBQUVDLE1BQU0sRUFBRSxHQUFHSCxJQUFJSSxLQUFLLENBQUM7SUFDekMsSUFBSUQsV0FBVyxHQUNYLE1BQU0sSUFBSUosWUFBWUUsVUFBVSxDQUFDO0lBQ3JDLElBQUlFLFdBQVcsR0FDWCxNQUFNLElBQUlKLFlBQVlFLFVBQVUsQ0FBQztJQUNyQyxJQUFJLENBQUNDLFNBQ0QsTUFBTSxJQUFJSCxZQUFZRSxVQUFVLENBQUM7SUFDckMsSUFBSUk7SUFDSixJQUFJO1FBQ0FBLFVBQVUsQ0FBQyxHQUFHVixlQUFlVyxNQUFNLEVBQUVKO0lBQ3pDLEVBQ0EsT0FBTTtRQUNGLE1BQU0sSUFBSUgsWUFBWUUsVUFBVSxDQUFDO0lBQ3JDO0lBQ0EsSUFBSU07SUFDSixJQUFJO1FBQ0FBLFNBQVNDLEtBQUtDLEtBQUssQ0FBQ1osa0JBQWtCYSxPQUFPLENBQUNKLE1BQU0sQ0FBQ0Q7SUFDekQsRUFDQSxPQUFNO1FBQ0YsTUFBTSxJQUFJTixZQUFZRSxVQUFVLENBQUM7SUFDckM7SUFDQSxJQUFJLENBQUMsQ0FBQyxHQUFHSCxlQUFlYSxPQUFPLEVBQUVKLFNBQzdCLE1BQU0sSUFBSVIsWUFBWUUsVUFBVSxDQUFDO0lBQ3JDLE9BQU9NO0FBQ1g7QUFDQWYsaUJBQWlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvdXRpbC9kZWNvZGVfand0LmpzPzU4YmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZUp3dCA9IHZvaWQgMDtcbmNvbnN0IGJhc2U2NHVybF9qc18xID0gcmVxdWlyZShcIi4vYmFzZTY0dXJsLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmNvbnN0IGlzX29iamVjdF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pc19vYmplY3QuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuL2Vycm9ycy5qc1wiKTtcbmZ1bmN0aW9uIGRlY29kZUp3dChqd3QpIHtcbiAgICBpZiAodHlwZW9mIGp3dCAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdKV1RzIG11c3QgdXNlIENvbXBhY3QgSldTIHNlcmlhbGl6YXRpb24sIEpXVCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgY29uc3QgeyAxOiBwYXlsb2FkLCBsZW5ndGggfSA9IGp3dC5zcGxpdCgnLicpO1xuICAgIGlmIChsZW5ndGggPT09IDUpXG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdPbmx5IEpXVHMgdXNpbmcgQ29tcGFjdCBKV1Mgc2VyaWFsaXphdGlvbiBjYW4gYmUgZGVjb2RlZCcpO1xuICAgIGlmIChsZW5ndGggIT09IDMpXG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdJbnZhbGlkIEpXVCcpO1xuICAgIGlmICghcGF5bG9hZClcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0pXVHMgbXVzdCBjb250YWluIGEgcGF5bG9hZCcpO1xuICAgIGxldCBkZWNvZGVkO1xuICAgIHRyeSB7XG4gICAgICAgIGRlY29kZWQgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZGVjb2RlKShwYXlsb2FkKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnRmFpbGVkIHRvIGJhc2U2NHVybCBkZWNvZGUgdGhlIHBheWxvYWQnKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKGRlY29kZWQpKTtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnRmFpbGVkIHRvIHBhcnNlIHRoZSBkZWNvZGVkIHBheWxvYWQgYXMgSlNPTicpO1xuICAgIH1cbiAgICBpZiAoISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShyZXN1bHQpKVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnSW52YWxpZCBKV1QgQ2xhaW1zIFNldCcpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmRlY29kZUp3dCA9IGRlY29kZUp3dDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlY29kZUp3dCIsImJhc2U2NHVybF9qc18xIiwicmVxdWlyZSIsImJ1ZmZlcl91dGlsc19qc18xIiwiaXNfb2JqZWN0X2pzXzEiLCJlcnJvcnNfanNfMSIsImp3dCIsIkpXVEludmFsaWQiLCJwYXlsb2FkIiwibGVuZ3RoIiwic3BsaXQiLCJkZWNvZGVkIiwiZGVjb2RlIiwicmVzdWx0IiwiSlNPTiIsInBhcnNlIiwiZGVjb2RlciIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_jwt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_protected_header.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_protected_header.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeProtectedHeader = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nfunction decodeProtectedHeader(token) {\n    let protectedB64u;\n    if (typeof token === \"string\") {\n        const parts = token.split(\".\");\n        if (parts.length === 3 || parts.length === 5) {\n            ;\n            [protectedB64u] = parts;\n        }\n    } else if (typeof token === \"object\" && token) {\n        if (\"protected\" in token) {\n            protectedB64u = token.protected;\n        } else {\n            throw new TypeError(\"Token does not contain a Protected Header\");\n        }\n    }\n    try {\n        if (typeof protectedB64u !== \"string\" || !protectedB64u) {\n            throw new Error();\n        }\n        const result = JSON.parse(buffer_utils_js_1.decoder.decode((0, base64url_js_1.decode)(protectedB64u)));\n        if (!(0, is_object_js_1.default)(result)) {\n            throw new Error();\n        }\n        return result;\n    } catch  {\n        throw new TypeError(\"Invalid Token or Protected Header formatting\");\n    }\n}\nexports.decodeProtectedHeader = decodeProtectedHeader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvZGVjb2RlX3Byb3RlY3RlZF9oZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHLEtBQUs7QUFDckMsTUFBTUcsaUJBQWlCQyxtQkFBT0EsQ0FBQyw0R0FBZ0I7QUFDL0MsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQyxzSEFBd0I7QUFDMUQsTUFBTUUsaUJBQWlCRixtQkFBT0EsQ0FBQyxnSEFBcUI7QUFDcEQsU0FBU0Ysc0JBQXNCSyxLQUFLO0lBQ2hDLElBQUlDO0lBQ0osSUFBSSxPQUFPRCxVQUFVLFVBQVU7UUFDM0IsTUFBTUUsUUFBUUYsTUFBTUcsS0FBSyxDQUFDO1FBQzFCLElBQUlELE1BQU1FLE1BQU0sS0FBSyxLQUFLRixNQUFNRSxNQUFNLEtBQUssR0FBRzs7WUFFMUMsQ0FBQ0gsY0FBYyxHQUFHQztRQUN0QjtJQUNKLE9BQ0ssSUFBSSxPQUFPRixVQUFVLFlBQVlBLE9BQU87UUFDekMsSUFBSSxlQUFlQSxPQUFPO1lBQ3RCQyxnQkFBZ0JELE1BQU1LLFNBQVM7UUFDbkMsT0FDSztZQUNELE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtJQUNKO0lBQ0EsSUFBSTtRQUNBLElBQUksT0FBT0wsa0JBQWtCLFlBQVksQ0FBQ0EsZUFBZTtZQUNyRCxNQUFNLElBQUlNO1FBQ2Q7UUFDQSxNQUFNQyxTQUFTQyxLQUFLQyxLQUFLLENBQUNaLGtCQUFrQmEsT0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxHQUFHaEIsZUFBZWdCLE1BQU0sRUFBRVg7UUFDdEYsSUFBSSxDQUFDLENBQUMsR0FBR0YsZUFBZWMsT0FBTyxFQUFFTCxTQUFTO1lBQ3RDLE1BQU0sSUFBSUQ7UUFDZDtRQUNBLE9BQU9DO0lBQ1gsRUFDQSxPQUFNO1FBQ0YsTUFBTSxJQUFJRixVQUFVO0lBQ3hCO0FBQ0o7QUFDQWIsNkJBQTZCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvdXRpbC9kZWNvZGVfcHJvdGVjdGVkX2hlYWRlci5qcz8xZWI2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVQcm90ZWN0ZWRIZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuZnVuY3Rpb24gZGVjb2RlUHJvdGVjdGVkSGVhZGVyKHRva2VuKSB7XG4gICAgbGV0IHByb3RlY3RlZEI2NHU7XG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAzIHx8IHBhcnRzLmxlbmd0aCA9PT0gNSkge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgW3Byb3RlY3RlZEI2NHVdID0gcGFydHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHRva2VuID09PSAnb2JqZWN0JyAmJiB0b2tlbikge1xuICAgICAgICBpZiAoJ3Byb3RlY3RlZCcgaW4gdG9rZW4pIHtcbiAgICAgICAgICAgIHByb3RlY3RlZEI2NHUgPSB0b2tlbi5wcm90ZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUb2tlbiBkb2VzIG5vdCBjb250YWluIGEgUHJvdGVjdGVkIEhlYWRlcicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvdGVjdGVkQjY0dSAhPT0gJ3N0cmluZycgfHwgIXByb3RlY3RlZEI2NHUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UoYnVmZmVyX3V0aWxzX2pzXzEuZGVjb2Rlci5kZWNvZGUoKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkocHJvdGVjdGVkQjY0dSkpKTtcbiAgICAgICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIFRva2VuIG9yIFByb3RlY3RlZCBIZWFkZXIgZm9ybWF0dGluZycpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVjb2RlUHJvdGVjdGVkSGVhZGVyID0gZGVjb2RlUHJvdGVjdGVkSGVhZGVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVjb2RlUHJvdGVjdGVkSGVhZGVyIiwiYmFzZTY0dXJsX2pzXzEiLCJyZXF1aXJlIiwiYnVmZmVyX3V0aWxzX2pzXzEiLCJpc19vYmplY3RfanNfMSIsInRva2VuIiwicHJvdGVjdGVkQjY0dSIsInBhcnRzIiwic3BsaXQiLCJsZW5ndGgiLCJwcm90ZWN0ZWQiLCJUeXBlRXJyb3IiLCJFcnJvciIsInJlc3VsdCIsIkpTT04iLCJwYXJzZSIsImRlY29kZXIiLCJkZWNvZGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_protected_header.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JWSSignatureVerificationFailed = exports.JWKSTimeout = exports.JWKSMultipleMatchingKeys = exports.JWKSNoMatchingKey = exports.JWKSInvalid = exports.JWKInvalid = exports.JWTInvalid = exports.JWSInvalid = exports.JWEInvalid = exports.JWEDecompressionFailed = exports.JWEDecryptionFailed = exports.JOSENotSupported = exports.JOSEAlgNotAllowed = exports.JWTExpired = exports.JWTClaimValidationFailed = exports.JOSEError = void 0;\nclass JOSEError extends Error {\n    static get code() {\n        return \"ERR_JOSE_GENERIC\";\n    }\n    constructor(message){\n        var _a;\n        super(message);\n        this.code = \"ERR_JOSE_GENERIC\";\n        this.name = this.constructor.name;\n        (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, this, this.constructor);\n    }\n}\nexports.JOSEError = JOSEError;\nclass JWTClaimValidationFailed extends JOSEError {\n    static get code() {\n        return \"ERR_JWT_CLAIM_VALIDATION_FAILED\";\n    }\n    constructor(message, claim = \"unspecified\", reason = \"unspecified\"){\n        super(message);\n        this.code = \"ERR_JWT_CLAIM_VALIDATION_FAILED\";\n        this.claim = claim;\n        this.reason = reason;\n    }\n}\nexports.JWTClaimValidationFailed = JWTClaimValidationFailed;\nclass JWTExpired extends JOSEError {\n    static get code() {\n        return \"ERR_JWT_EXPIRED\";\n    }\n    constructor(message, claim = \"unspecified\", reason = \"unspecified\"){\n        super(message);\n        this.code = \"ERR_JWT_EXPIRED\";\n        this.claim = claim;\n        this.reason = reason;\n    }\n}\nexports.JWTExpired = JWTExpired;\nclass JOSEAlgNotAllowed extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JOSE_ALG_NOT_ALLOWED\";\n    }\n    static get code() {\n        return \"ERR_JOSE_ALG_NOT_ALLOWED\";\n    }\n}\nexports.JOSEAlgNotAllowed = JOSEAlgNotAllowed;\nclass JOSENotSupported extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JOSE_NOT_SUPPORTED\";\n    }\n    static get code() {\n        return \"ERR_JOSE_NOT_SUPPORTED\";\n    }\n}\nexports.JOSENotSupported = JOSENotSupported;\nclass JWEDecryptionFailed extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWE_DECRYPTION_FAILED\";\n        this.message = \"decryption operation failed\";\n    }\n    static get code() {\n        return \"ERR_JWE_DECRYPTION_FAILED\";\n    }\n}\nexports.JWEDecryptionFailed = JWEDecryptionFailed;\nclass JWEDecompressionFailed extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWE_DECOMPRESSION_FAILED\";\n        this.message = \"decompression operation failed\";\n    }\n    static get code() {\n        return \"ERR_JWE_DECOMPRESSION_FAILED\";\n    }\n}\nexports.JWEDecompressionFailed = JWEDecompressionFailed;\nclass JWEInvalid extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWE_INVALID\";\n    }\n    static get code() {\n        return \"ERR_JWE_INVALID\";\n    }\n}\nexports.JWEInvalid = JWEInvalid;\nclass JWSInvalid extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWS_INVALID\";\n    }\n    static get code() {\n        return \"ERR_JWS_INVALID\";\n    }\n}\nexports.JWSInvalid = JWSInvalid;\nclass JWTInvalid extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWT_INVALID\";\n    }\n    static get code() {\n        return \"ERR_JWT_INVALID\";\n    }\n}\nexports.JWTInvalid = JWTInvalid;\nclass JWKInvalid extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWK_INVALID\";\n    }\n    static get code() {\n        return \"ERR_JWK_INVALID\";\n    }\n}\nexports.JWKInvalid = JWKInvalid;\nclass JWKSInvalid extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWKS_INVALID\";\n    }\n    static get code() {\n        return \"ERR_JWKS_INVALID\";\n    }\n}\nexports.JWKSInvalid = JWKSInvalid;\nclass JWKSNoMatchingKey extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWKS_NO_MATCHING_KEY\";\n        this.message = \"no applicable key found in the JSON Web Key Set\";\n    }\n    static get code() {\n        return \"ERR_JWKS_NO_MATCHING_KEY\";\n    }\n}\nexports.JWKSNoMatchingKey = JWKSNoMatchingKey;\nclass JWKSMultipleMatchingKeys extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWKS_MULTIPLE_MATCHING_KEYS\";\n        this.message = \"multiple matching keys found in the JSON Web Key Set\";\n    }\n    static get code() {\n        return \"ERR_JWKS_MULTIPLE_MATCHING_KEYS\";\n    }\n}\nexports.JWKSMultipleMatchingKeys = JWKSMultipleMatchingKeys;\nSymbol.asyncIterator;\nclass JWKSTimeout extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWKS_TIMEOUT\";\n        this.message = \"request timed out\";\n    }\n    static get code() {\n        return \"ERR_JWKS_TIMEOUT\";\n    }\n}\nexports.JWKSTimeout = JWKSTimeout;\nclass JWSSignatureVerificationFailed extends JOSEError {\n    constructor(){\n        super(...arguments);\n        this.code = \"ERR_JWS_SIGNATURE_VERIFICATION_FAILED\";\n        this.message = \"signature verification failed\";\n    }\n    static get code() {\n        return \"ERR_JWS_SIGNATURE_VERIFICATION_FAILED\";\n    }\n}\nexports.JWSSignatureVerificationFailed = JWSSignatureVerificationFailed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/runtime.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/runtime.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst runtime_js_1 = __webpack_require__(/*! ../runtime/runtime.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/runtime.js\");\nexports[\"default\"] = runtime_js_1.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxlQUFlQyxtQkFBT0EsQ0FBQyxvSEFBdUI7QUFDcERILGtCQUFlLEdBQUdFLGFBQWFFLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy91dGlsL3J1bnRpbWUuanM/MDY5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHJ1bnRpbWVfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL3J1bnRpbWUuanNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSBydW50aW1lX2pzXzEuZGVmYXVsdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJ1bnRpbWVfanNfMSIsInJlcXVpcmUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/package.json":
/*!*************************************************!*\
  !*** ./node_modules/openid-client/package.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"openid-client","version":"5.7.1","description":"OpenID Connect Relying Party (RP, Client) implementation for Node.js runtime, supports passportjs","keywords":["auth","authentication","basic","certified","client","connect","dynamic","electron","hybrid","identity","implicit","oauth","oauth2","oidc","openid","passport","relying party","strategy"],"homepage":"https://github.com/panva/openid-client","repository":"panva/openid-client","funding":{"url":"https://github.com/sponsors/panva"},"license":"MIT","author":"Filip Skokan <panva.ip@gmail.com>","exports":{"types":"./types/index.d.ts","import":"./lib/index.mjs","require":"./lib/index.js"},"main":"./lib/index.js","types":"./types/index.d.ts","files":["lib","types/index.d.ts"],"scripts":{"format":"npx prettier --loglevel silent --write ./lib ./test ./certification ./types","test":"mocha test/**/*.test.js"},"dependencies":{"jose":"^4.15.9","lru-cache":"^6.0.0","object-hash":"^2.2.0","oidc-token-hash":"^5.0.3"},"devDependencies":{"@types/node":"^16.18.106","@types/passport":"^1.0.16","base64url":"^3.0.1","chai":"^4.5.0","mocha":"^10.7.3","nock":"^13.5.5","prettier":"^2.8.8","readable-mock-req":"^0.2.2","sinon":"^9.2.4","timekeeper":"^2.3.1"},"standard-version":{"scripts":{"postchangelog":"sed -i \'\' -e \'s/### \\\\[/## [/g\' CHANGELOG.md"},"types":[{"type":"feat","section":"Features"},{"type":"fix","section":"Fixes"},{"type":"chore","hidden":true},{"type":"docs","hidden":true},{"type":"style","hidden":true},{"type":"refactor","section":"Refactor","hidden":false},{"type":"perf","section":"Performance","hidden":false},{"type":"test","hidden":true}]}}');

/***/ })

};
;