/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/exif-parser";
exports.ids = ["vendor-chunks/exif-parser"];
exports.modules = {

/***/ "(rsc)/./node_modules/exif-parser/index.js":
/*!*******************************************!*\
  !*** ./node_modules/exif-parser/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Parser = __webpack_require__(/*! ./lib/parser */ \"(rsc)/./node_modules/exif-parser/lib/parser.js\");\nfunction getGlobal() {\n    return (1, eval)(\"this\");\n}\nmodule.exports = {\n    create: function(buffer, global) {\n        global = global || getGlobal();\n        if (buffer instanceof global.ArrayBuffer) {\n            var DOMBufferStream = __webpack_require__(/*! ./lib/dom-bufferstream */ \"(rsc)/./node_modules/exif-parser/lib/dom-bufferstream.js\");\n            return new Parser(new DOMBufferStream(buffer, 0, buffer.byteLength, true, global));\n        } else {\n            var NodeBufferStream = __webpack_require__(/*! ./lib/bufferstream */ \"(rsc)/./node_modules/exif-parser/lib/bufferstream.js\");\n            return new Parser(new NodeBufferStream(buffer, 0, buffer.length, true));\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXhpZi1wYXJzZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFFckIsU0FBU0M7SUFDUixPQUFPLENBQUMsR0FBRUMsSUFBRyxFQUFHO0FBQ2pCO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUNoQkMsUUFBUSxTQUFTQyxNQUFNLEVBQUVDLE1BQU07UUFDOUJBLFNBQVNBLFVBQVVOO1FBQ25CLElBQUdLLGtCQUFrQkMsT0FBT0MsV0FBVyxFQUFFO1lBQ3hDLElBQUlDLGtCQUFrQlQsbUJBQU9BLENBQUM7WUFDOUIsT0FBTyxJQUFJRCxPQUFPLElBQUlVLGdCQUFnQkgsUUFBUSxHQUFHQSxPQUFPSSxVQUFVLEVBQUUsTUFBTUg7UUFDM0UsT0FBTztZQUNOLElBQUlJLG1CQUFtQlgsbUJBQU9BLENBQUM7WUFDL0IsT0FBTyxJQUFJRCxPQUFPLElBQUlZLGlCQUFpQkwsUUFBUSxHQUFHQSxPQUFPTSxNQUFNLEVBQUU7UUFDbEU7SUFDRDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9leGlmLXBhcnNlci9pbmRleC5qcz9lNWI1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBQYXJzZXIgPSByZXF1aXJlKCcuL2xpYi9wYXJzZXInKTtcblxuZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xuXHRyZXR1cm4gKDEsZXZhbCkoJ3RoaXMnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGNyZWF0ZTogZnVuY3Rpb24oYnVmZmVyLCBnbG9iYWwpIHtcblx0XHRnbG9iYWwgPSBnbG9iYWwgfHwgZ2V0R2xvYmFsKCk7XG5cdFx0aWYoYnVmZmVyIGluc3RhbmNlb2YgZ2xvYmFsLkFycmF5QnVmZmVyKSB7XG5cdFx0XHR2YXIgRE9NQnVmZmVyU3RyZWFtID0gcmVxdWlyZSgnLi9saWIvZG9tLWJ1ZmZlcnN0cmVhbScpO1xuXHRcdFx0cmV0dXJuIG5ldyBQYXJzZXIobmV3IERPTUJ1ZmZlclN0cmVhbShidWZmZXIsIDAsIGJ1ZmZlci5ieXRlTGVuZ3RoLCB0cnVlLCBnbG9iYWwpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIE5vZGVCdWZmZXJTdHJlYW0gPSByZXF1aXJlKCcuL2xpYi9idWZmZXJzdHJlYW0nKTtcblx0XHRcdHJldHVybiBuZXcgUGFyc2VyKG5ldyBOb2RlQnVmZmVyU3RyZWFtKGJ1ZmZlciwgMCwgYnVmZmVyLmxlbmd0aCwgdHJ1ZSkpO1xuXHRcdH1cblx0fVxufTtcbiJdLCJuYW1lcyI6WyJQYXJzZXIiLCJyZXF1aXJlIiwiZ2V0R2xvYmFsIiwiZXZhbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjcmVhdGUiLCJidWZmZXIiLCJnbG9iYWwiLCJBcnJheUJ1ZmZlciIsIkRPTUJ1ZmZlclN0cmVhbSIsImJ5dGVMZW5ndGgiLCJOb2RlQnVmZmVyU3RyZWFtIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/exif-parser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/exif-parser/lib/bufferstream.js":
/*!******************************************************!*\
  !*** ./node_modules/exif-parser/lib/bufferstream.js ***!
  \******************************************************/
/***/ ((module) => {

eval("function BufferStream(buffer, offset, length, bigEndian) {\n    this.buffer = buffer;\n    this.offset = offset || 0;\n    length = typeof length === \"number\" ? length : buffer.length;\n    this.endPosition = this.offset + length;\n    this.setBigEndian(bigEndian);\n}\nBufferStream.prototype = {\n    setBigEndian: function(bigEndian) {\n        this.bigEndian = !!bigEndian;\n    },\n    nextUInt8: function() {\n        var value = this.buffer.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    },\n    nextInt8: function() {\n        var value = this.buffer.readInt8(this.offset);\n        this.offset += 1;\n        return value;\n    },\n    nextUInt16: function() {\n        var value = this.bigEndian ? this.buffer.readUInt16BE(this.offset) : this.buffer.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    },\n    nextUInt32: function() {\n        var value = this.bigEndian ? this.buffer.readUInt32BE(this.offset) : this.buffer.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    },\n    nextInt16: function() {\n        var value = this.bigEndian ? this.buffer.readInt16BE(this.offset) : this.buffer.readInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    },\n    nextInt32: function() {\n        var value = this.bigEndian ? this.buffer.readInt32BE(this.offset) : this.buffer.readInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    },\n    nextFloat: function() {\n        var value = this.bigEndian ? this.buffer.readFloatBE(this.offset) : this.buffer.readFloatLE(this.offset);\n        this.offset += 4;\n        return value;\n    },\n    nextDouble: function() {\n        var value = this.bigEndian ? this.buffer.readDoubleBE(this.offset) : this.buffer.readDoubleLE(this.offset);\n        this.offset += 8;\n        return value;\n    },\n    nextBuffer: function(length) {\n        var value = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return value;\n    },\n    remainingLength: function() {\n        return this.endPosition - this.offset;\n    },\n    nextString: function(length) {\n        var value = this.buffer.toString(\"utf8\", this.offset, this.offset + length);\n        this.offset += length;\n        return value;\n    },\n    mark: function() {\n        var self = this;\n        return {\n            openWithOffset: function(offset) {\n                offset = (offset || 0) + this.offset;\n                return new BufferStream(self.buffer, offset, self.endPosition - offset, self.bigEndian);\n            },\n            offset: this.offset\n        };\n    },\n    offsetFrom: function(marker) {\n        return this.offset - marker.offset;\n    },\n    skip: function(amount) {\n        this.offset += amount;\n    },\n    branch: function(offset, length) {\n        length = typeof length === \"number\" ? length : this.endPosition - (this.offset + offset);\n        return new BufferStream(this.buffer, this.offset + offset, length, this.bigEndian);\n    }\n};\nmodule.exports = BufferStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/exif-parser/lib/bufferstream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/exif-parser/lib/date.js":
/*!**********************************************!*\
  !*** ./node_modules/exif-parser/lib/date.js ***!
  \**********************************************/
/***/ ((module) => {

eval("function parseNumber(s) {\n    return parseInt(s, 10);\n}\n//in seconds\nvar hours = 3600;\nvar minutes = 60;\n//take date (year, month, day) and time (hour, minutes, seconds) digits in UTC\n//and return a timestamp in seconds\nfunction parseDateTimeParts(dateParts, timeParts) {\n    dateParts = dateParts.map(parseNumber);\n    timeParts = timeParts.map(parseNumber);\n    var year = dateParts[0];\n    var month = dateParts[1] - 1;\n    var day = dateParts[2];\n    var hours = timeParts[0];\n    var minutes = timeParts[1];\n    var seconds = timeParts[2];\n    var date = Date.UTC(year, month, day, hours, minutes, seconds, 0);\n    var timestamp = date / 1000;\n    return timestamp;\n}\n//parse date with \"2004-09-04T23:39:06-08:00\" format,\n//one of the formats supported by ISO 8601, and\n//convert to utc timestamp in seconds\nfunction parseDateWithTimezoneFormat(dateTimeStr) {\n    var dateParts = dateTimeStr.substr(0, 10).split(\"-\");\n    var timeParts = dateTimeStr.substr(11, 8).split(\":\");\n    var timezoneStr = dateTimeStr.substr(19, 6);\n    var timezoneParts = timezoneStr.split(\":\").map(parseNumber);\n    var timezoneOffset = timezoneParts[0] * hours + timezoneParts[1] * minutes;\n    var timestamp = parseDateTimeParts(dateParts, timeParts);\n    //minus because the timezoneOffset describes\n    //how much the described time is ahead of UTC\n    timestamp -= timezoneOffset;\n    if (typeof timestamp === \"number\" && !isNaN(timestamp)) {\n        return timestamp;\n    }\n}\n//parse date with \"YYYY:MM:DD hh:mm:ss\" format, convert to utc timestamp in seconds\nfunction parseDateWithSpecFormat(dateTimeStr) {\n    var parts = dateTimeStr.split(\" \"), dateParts = parts[0].split(\":\"), timeParts = parts[1].split(\":\");\n    var timestamp = parseDateTimeParts(dateParts, timeParts);\n    if (typeof timestamp === \"number\" && !isNaN(timestamp)) {\n        return timestamp;\n    }\n}\nfunction parseExifDate(dateTimeStr) {\n    //some easy checks to determine two common date formats\n    //is the date in the standard \"YYYY:MM:DD hh:mm:ss\" format?\n    var isSpecFormat = dateTimeStr.length === 19 && dateTimeStr.charAt(4) === \":\";\n    //is the date in the non-standard format,\n    //\"2004-09-04T23:39:06-08:00\" to include a timezone?\n    var isTimezoneFormat = dateTimeStr.length === 25 && dateTimeStr.charAt(10) === \"T\";\n    var timestamp;\n    if (isTimezoneFormat) {\n        return parseDateWithTimezoneFormat(dateTimeStr);\n    } else if (isSpecFormat) {\n        return parseDateWithSpecFormat(dateTimeStr);\n    }\n}\nmodule.exports = {\n    parseDateWithSpecFormat: parseDateWithSpecFormat,\n    parseDateWithTimezoneFormat: parseDateWithTimezoneFormat,\n    parseExifDate: parseExifDate\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL2V4aWYtcGFyc2VyL2xpYi9kYXRlLmpzPzlhYjAiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcGFyc2VOdW1iZXIocykge1xuXHRyZXR1cm4gcGFyc2VJbnQocywgMTApO1xufVxuXG4vL2luIHNlY29uZHNcbnZhciBob3VycyA9IDM2MDA7XG52YXIgbWludXRlcyA9IDYwO1xuXG4vL3Rha2UgZGF0ZSAoeWVhciwgbW9udGgsIGRheSkgYW5kIHRpbWUgKGhvdXIsIG1pbnV0ZXMsIHNlY29uZHMpIGRpZ2l0cyBpbiBVVENcbi8vYW5kIHJldHVybiBhIHRpbWVzdGFtcCBpbiBzZWNvbmRzXG5mdW5jdGlvbiBwYXJzZURhdGVUaW1lUGFydHMoZGF0ZVBhcnRzLCB0aW1lUGFydHMpIHtcblx0ZGF0ZVBhcnRzID0gZGF0ZVBhcnRzLm1hcChwYXJzZU51bWJlcik7XG5cdHRpbWVQYXJ0cyA9IHRpbWVQYXJ0cy5tYXAocGFyc2VOdW1iZXIpO1xuXHR2YXIgeWVhciA9IGRhdGVQYXJ0c1swXTtcblx0dmFyIG1vbnRoID0gZGF0ZVBhcnRzWzFdIC0gMTtcblx0dmFyIGRheSA9IGRhdGVQYXJ0c1syXTtcblx0dmFyIGhvdXJzID0gdGltZVBhcnRzWzBdO1xuXHR2YXIgbWludXRlcyA9IHRpbWVQYXJ0c1sxXTtcblx0dmFyIHNlY29uZHMgPSB0aW1lUGFydHNbMl07XG5cdHZhciBkYXRlID0gRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIDApO1xuXHR2YXIgdGltZXN0YW1wID0gZGF0ZSAvIDEwMDA7XG5cdHJldHVybiB0aW1lc3RhbXA7XG59XG5cbi8vcGFyc2UgZGF0ZSB3aXRoIFwiMjAwNC0wOS0wNFQyMzozOTowNi0wODowMFwiIGZvcm1hdCxcbi8vb25lIG9mIHRoZSBmb3JtYXRzIHN1cHBvcnRlZCBieSBJU08gODYwMSwgYW5kXG4vL2NvbnZlcnQgdG8gdXRjIHRpbWVzdGFtcCBpbiBzZWNvbmRzXG5mdW5jdGlvbiBwYXJzZURhdGVXaXRoVGltZXpvbmVGb3JtYXQoZGF0ZVRpbWVTdHIpIHtcblxuXHR2YXIgZGF0ZVBhcnRzID0gZGF0ZVRpbWVTdHIuc3Vic3RyKDAsIDEwKS5zcGxpdCgnLScpO1xuXHR2YXIgdGltZVBhcnRzID0gZGF0ZVRpbWVTdHIuc3Vic3RyKDExLCA4KS5zcGxpdCgnOicpO1xuXHR2YXIgdGltZXpvbmVTdHIgPSBkYXRlVGltZVN0ci5zdWJzdHIoMTksIDYpO1xuXHR2YXIgdGltZXpvbmVQYXJ0cyA9IHRpbWV6b25lU3RyLnNwbGl0KCc6JykubWFwKHBhcnNlTnVtYmVyKTtcblx0dmFyIHRpbWV6b25lT2Zmc2V0ID0gKHRpbWV6b25lUGFydHNbMF0gKiBob3VycykgK1xuXHRcdCh0aW1lem9uZVBhcnRzWzFdICogbWludXRlcyk7XG5cblx0dmFyIHRpbWVzdGFtcCA9IHBhcnNlRGF0ZVRpbWVQYXJ0cyhkYXRlUGFydHMsIHRpbWVQYXJ0cyk7XG5cdC8vbWludXMgYmVjYXVzZSB0aGUgdGltZXpvbmVPZmZzZXQgZGVzY3JpYmVzXG5cdC8vaG93IG11Y2ggdGhlIGRlc2NyaWJlZCB0aW1lIGlzIGFoZWFkIG9mIFVUQ1xuXHR0aW1lc3RhbXAgLT0gdGltZXpvbmVPZmZzZXQ7XG5cblx0aWYodHlwZW9mIHRpbWVzdGFtcCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHRpbWVzdGFtcCkpIHtcblx0XHRyZXR1cm4gdGltZXN0YW1wO1xuXHR9XG59XG5cbi8vcGFyc2UgZGF0ZSB3aXRoIFwiWVlZWTpNTTpERCBoaDptbTpzc1wiIGZvcm1hdCwgY29udmVydCB0byB1dGMgdGltZXN0YW1wIGluIHNlY29uZHNcbmZ1bmN0aW9uIHBhcnNlRGF0ZVdpdGhTcGVjRm9ybWF0KGRhdGVUaW1lU3RyKSB7XG5cdHZhciBwYXJ0cyA9IGRhdGVUaW1lU3RyLnNwbGl0KCcgJyksXG5cdFx0ZGF0ZVBhcnRzID0gcGFydHNbMF0uc3BsaXQoJzonKSxcblx0XHR0aW1lUGFydHMgPSBwYXJ0c1sxXS5zcGxpdCgnOicpO1xuXG5cdHZhciB0aW1lc3RhbXAgPSBwYXJzZURhdGVUaW1lUGFydHMoZGF0ZVBhcnRzLCB0aW1lUGFydHMpO1xuXG5cdGlmKHR5cGVvZiB0aW1lc3RhbXAgPT09ICdudW1iZXInICYmICFpc05hTih0aW1lc3RhbXApKSB7XG5cdFx0cmV0dXJuIHRpbWVzdGFtcDtcblx0fVxufVxuXG5mdW5jdGlvbiBwYXJzZUV4aWZEYXRlKGRhdGVUaW1lU3RyKSB7XG5cdC8vc29tZSBlYXN5IGNoZWNrcyB0byBkZXRlcm1pbmUgdHdvIGNvbW1vbiBkYXRlIGZvcm1hdHNcblxuXHQvL2lzIHRoZSBkYXRlIGluIHRoZSBzdGFuZGFyZCBcIllZWVk6TU06REQgaGg6bW06c3NcIiBmb3JtYXQ/XG5cdHZhciBpc1NwZWNGb3JtYXQgPSBkYXRlVGltZVN0ci5sZW5ndGggPT09IDE5ICYmXG5cdFx0ZGF0ZVRpbWVTdHIuY2hhckF0KDQpID09PSAnOic7XG5cdC8vaXMgdGhlIGRhdGUgaW4gdGhlIG5vbi1zdGFuZGFyZCBmb3JtYXQsXG5cdC8vXCIyMDA0LTA5LTA0VDIzOjM5OjA2LTA4OjAwXCIgdG8gaW5jbHVkZSBhIHRpbWV6b25lP1xuXHR2YXIgaXNUaW1lem9uZUZvcm1hdCA9IGRhdGVUaW1lU3RyLmxlbmd0aCA9PT0gMjUgJiZcblx0XHRkYXRlVGltZVN0ci5jaGFyQXQoMTApID09PSAnVCc7XG5cdHZhciB0aW1lc3RhbXA7XG5cblx0aWYoaXNUaW1lem9uZUZvcm1hdCkge1xuXHRcdHJldHVybiBwYXJzZURhdGVXaXRoVGltZXpvbmVGb3JtYXQoZGF0ZVRpbWVTdHIpO1xuXHR9XG5cdGVsc2UgaWYoaXNTcGVjRm9ybWF0KSB7XG5cdFx0cmV0dXJuIHBhcnNlRGF0ZVdpdGhTcGVjRm9ybWF0KGRhdGVUaW1lU3RyKTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cGFyc2VEYXRlV2l0aFNwZWNGb3JtYXQ6IHBhcnNlRGF0ZVdpdGhTcGVjRm9ybWF0LFxuXHRwYXJzZURhdGVXaXRoVGltZXpvbmVGb3JtYXQ6IHBhcnNlRGF0ZVdpdGhUaW1lem9uZUZvcm1hdCxcblx0cGFyc2VFeGlmRGF0ZTogcGFyc2VFeGlmRGF0ZVxufTtcbiJdLCJuYW1lcyI6WyJwYXJzZU51bWJlciIsInMiLCJwYXJzZUludCIsImhvdXJzIiwibWludXRlcyIsInBhcnNlRGF0ZVRpbWVQYXJ0cyIsImRhdGVQYXJ0cyIsInRpbWVQYXJ0cyIsIm1hcCIsInllYXIiLCJtb250aCIsImRheSIsInNlY29uZHMiLCJkYXRlIiwiRGF0ZSIsIlVUQyIsInRpbWVzdGFtcCIsInBhcnNlRGF0ZVdpdGhUaW1lem9uZUZvcm1hdCIsImRhdGVUaW1lU3RyIiwic3Vic3RyIiwic3BsaXQiLCJ0aW1lem9uZVN0ciIsInRpbWV6b25lUGFydHMiLCJ0aW1lem9uZU9mZnNldCIsImlzTmFOIiwicGFyc2VEYXRlV2l0aFNwZWNGb3JtYXQiLCJwYXJ0cyIsInBhcnNlRXhpZkRhdGUiLCJpc1NwZWNGb3JtYXQiLCJsZW5ndGgiLCJjaGFyQXQiLCJpc1RpbWV6b25lRm9ybWF0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsWUFBWUMsQ0FBQztJQUNyQixPQUFPQyxTQUFTRCxHQUFHO0FBQ3BCO0FBRUEsWUFBWTtBQUNaLElBQUlFLFFBQVE7QUFDWixJQUFJQyxVQUFVO0FBRWQsOEVBQThFO0FBQzlFLG1DQUFtQztBQUNuQyxTQUFTQyxtQkFBbUJDLFNBQVMsRUFBRUMsU0FBUztJQUMvQ0QsWUFBWUEsVUFBVUUsR0FBRyxDQUFDUjtJQUMxQk8sWUFBWUEsVUFBVUMsR0FBRyxDQUFDUjtJQUMxQixJQUFJUyxPQUFPSCxTQUFTLENBQUMsRUFBRTtJQUN2QixJQUFJSSxRQUFRSixTQUFTLENBQUMsRUFBRSxHQUFHO0lBQzNCLElBQUlLLE1BQU1MLFNBQVMsQ0FBQyxFQUFFO0lBQ3RCLElBQUlILFFBQVFJLFNBQVMsQ0FBQyxFQUFFO0lBQ3hCLElBQUlILFVBQVVHLFNBQVMsQ0FBQyxFQUFFO0lBQzFCLElBQUlLLFVBQVVMLFNBQVMsQ0FBQyxFQUFFO0lBQzFCLElBQUlNLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ04sTUFBTUMsT0FBT0MsS0FBS1IsT0FBT0MsU0FBU1EsU0FBUztJQUMvRCxJQUFJSSxZQUFZSCxPQUFPO0lBQ3ZCLE9BQU9HO0FBQ1I7QUFFQSxxREFBcUQ7QUFDckQsK0NBQStDO0FBQy9DLHFDQUFxQztBQUNyQyxTQUFTQyw0QkFBNEJDLFdBQVc7SUFFL0MsSUFBSVosWUFBWVksWUFBWUMsTUFBTSxDQUFDLEdBQUcsSUFBSUMsS0FBSyxDQUFDO0lBQ2hELElBQUliLFlBQVlXLFlBQVlDLE1BQU0sQ0FBQyxJQUFJLEdBQUdDLEtBQUssQ0FBQztJQUNoRCxJQUFJQyxjQUFjSCxZQUFZQyxNQUFNLENBQUMsSUFBSTtJQUN6QyxJQUFJRyxnQkFBZ0JELFlBQVlELEtBQUssQ0FBQyxLQUFLWixHQUFHLENBQUNSO0lBQy9DLElBQUl1QixpQkFBaUIsQUFBQ0QsYUFBYSxDQUFDLEVBQUUsR0FBR25CLFFBQ3ZDbUIsYUFBYSxDQUFDLEVBQUUsR0FBR2xCO0lBRXJCLElBQUlZLFlBQVlYLG1CQUFtQkMsV0FBV0M7SUFDOUMsNENBQTRDO0lBQzVDLDZDQUE2QztJQUM3Q1MsYUFBYU87SUFFYixJQUFHLE9BQU9QLGNBQWMsWUFBWSxDQUFDUSxNQUFNUixZQUFZO1FBQ3RELE9BQU9BO0lBQ1I7QUFDRDtBQUVBLG1GQUFtRjtBQUNuRixTQUFTUyx3QkFBd0JQLFdBQVc7SUFDM0MsSUFBSVEsUUFBUVIsWUFBWUUsS0FBSyxDQUFDLE1BQzdCZCxZQUFZb0IsS0FBSyxDQUFDLEVBQUUsQ0FBQ04sS0FBSyxDQUFDLE1BQzNCYixZQUFZbUIsS0FBSyxDQUFDLEVBQUUsQ0FBQ04sS0FBSyxDQUFDO0lBRTVCLElBQUlKLFlBQVlYLG1CQUFtQkMsV0FBV0M7SUFFOUMsSUFBRyxPQUFPUyxjQUFjLFlBQVksQ0FBQ1EsTUFBTVIsWUFBWTtRQUN0RCxPQUFPQTtJQUNSO0FBQ0Q7QUFFQSxTQUFTVyxjQUFjVCxXQUFXO0lBQ2pDLHVEQUF1RDtJQUV2RCwyREFBMkQ7SUFDM0QsSUFBSVUsZUFBZVYsWUFBWVcsTUFBTSxLQUFLLE1BQ3pDWCxZQUFZWSxNQUFNLENBQUMsT0FBTztJQUMzQix5Q0FBeUM7SUFDekMsb0RBQW9EO0lBQ3BELElBQUlDLG1CQUFtQmIsWUFBWVcsTUFBTSxLQUFLLE1BQzdDWCxZQUFZWSxNQUFNLENBQUMsUUFBUTtJQUM1QixJQUFJZDtJQUVKLElBQUdlLGtCQUFrQjtRQUNwQixPQUFPZCw0QkFBNEJDO0lBQ3BDLE9BQ0ssSUFBR1UsY0FBYztRQUNyQixPQUFPSCx3QkFBd0JQO0lBQ2hDO0FBQ0Q7QUFFQWMsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCUix5QkFBeUJBO0lBQ3pCUiw2QkFBNkJBO0lBQzdCVSxlQUFlQTtBQUNoQiIsImZpbGUiOiIocnNjKS8uL25vZGVfbW9kdWxlcy9leGlmLXBhcnNlci9saWIvZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/exif-parser/lib/date.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/exif-parser/lib/dom-bufferstream.js":
/*!**********************************************************!*\
  !*** ./node_modules/exif-parser/lib/dom-bufferstream.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */ function DOMBufferStream(arrayBuffer, offset, length, bigEndian, global, parentOffset) {\n    this.global = global;\n    offset = offset || 0;\n    length = length || arrayBuffer.byteLength - offset;\n    this.arrayBuffer = arrayBuffer.slice(offset, offset + length);\n    this.view = new global.DataView(this.arrayBuffer, 0, this.arrayBuffer.byteLength);\n    this.setBigEndian(bigEndian);\n    this.offset = 0;\n    this.parentOffset = (parentOffset || 0) + offset;\n}\nDOMBufferStream.prototype = {\n    setBigEndian: function(bigEndian) {\n        this.littleEndian = !bigEndian;\n    },\n    nextUInt8: function() {\n        var value = this.view.getUint8(this.offset);\n        this.offset += 1;\n        return value;\n    },\n    nextInt8: function() {\n        var value = this.view.getInt8(this.offset);\n        this.offset += 1;\n        return value;\n    },\n    nextUInt16: function() {\n        var value = this.view.getUint16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    },\n    nextUInt32: function() {\n        var value = this.view.getUint32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    },\n    nextInt16: function() {\n        var value = this.view.getInt16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    },\n    nextInt32: function() {\n        var value = this.view.getInt32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    },\n    nextFloat: function() {\n        var value = this.view.getFloat32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    },\n    nextDouble: function() {\n        var value = this.view.getFloat64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    },\n    nextBuffer: function(length) {\n        //this won't work in IE10\n        var value = this.arrayBuffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return value;\n    },\n    remainingLength: function() {\n        return this.arrayBuffer.byteLength - this.offset;\n    },\n    nextString: function(length) {\n        var value = this.arrayBuffer.slice(this.offset, this.offset + length);\n        value = String.fromCharCode.apply(null, new this.global.Uint8Array(value));\n        this.offset += length;\n        return value;\n    },\n    mark: function() {\n        var self = this;\n        return {\n            openWithOffset: function(offset) {\n                offset = (offset || 0) + this.offset;\n                return new DOMBufferStream(self.arrayBuffer, offset, self.arrayBuffer.byteLength - offset, !self.littleEndian, self.global, self.parentOffset);\n            },\n            offset: this.offset,\n            getParentOffset: function() {\n                return self.parentOffset;\n            }\n        };\n    },\n    offsetFrom: function(marker) {\n        return this.parentOffset + this.offset - (marker.offset + marker.getParentOffset());\n    },\n    skip: function(amount) {\n        this.offset += amount;\n    },\n    branch: function(offset, length) {\n        length = typeof length === \"number\" ? length : this.arrayBuffer.byteLength - (this.offset + offset);\n        return new DOMBufferStream(this.arrayBuffer, this.offset + offset, length, !this.littleEndian, this.global, this.parentOffset);\n    }\n};\nmodule.exports = DOMBufferStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/exif-parser/lib/dom-bufferstream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/exif-parser/lib/exif-tags.js":
/*!***************************************************!*\
  !*** ./node_modules/exif-parser/lib/exif-tags.js ***!
  \***************************************************/
/***/ ((module) => {

eval("module.exports = {\n    exif: {\n        0x0001: \"InteropIndex\",\n        0x0002: \"InteropVersion\",\n        0x000B: \"ProcessingSoftware\",\n        0x00FE: \"SubfileType\",\n        0x00FF: \"OldSubfileType\",\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0107: \"Thresholding\",\n        0x0108: \"CellWidth\",\n        0x0109: \"CellLength\",\n        0x010A: \"FillOrder\",\n        0x010D: \"DocumentName\",\n        0x010E: \"ImageDescription\",\n        0x010F: \"Make\",\n        0x0110: \"Model\",\n        0x0111: \"StripOffsets\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x0118: \"MinSampleValue\",\n        0x0119: \"MaxSampleValue\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x011C: \"PlanarConfiguration\",\n        0x011D: \"PageName\",\n        0x011E: \"XPosition\",\n        0x011F: \"YPosition\",\n        0x0120: \"FreeOffsets\",\n        0x0121: \"FreeByteCounts\",\n        0x0122: \"GrayResponseUnit\",\n        0x0123: \"GrayResponseCurve\",\n        0x0124: \"T4Options\",\n        0x0125: \"T6Options\",\n        0x0128: \"ResolutionUnit\",\n        0x0129: \"PageNumber\",\n        0x012C: \"ColorResponseUnit\",\n        0x012D: \"TransferFunction\",\n        0x0131: \"Software\",\n        0x0132: \"ModifyDate\",\n        0x013B: \"Artist\",\n        0x013C: \"HostComputer\",\n        0x013D: \"Predictor\",\n        0x013E: \"WhitePoint\",\n        0x013F: \"PrimaryChromaticities\",\n        0x0140: \"ColorMap\",\n        0x0141: \"HalftoneHints\",\n        0x0142: \"TileWidth\",\n        0x0143: \"TileLength\",\n        0x0144: \"TileOffsets\",\n        0x0145: \"TileByteCounts\",\n        0x0146: \"BadFaxLines\",\n        0x0147: \"CleanFaxData\",\n        0x0148: \"ConsecutiveBadFaxLines\",\n        0x014A: \"SubIFD\",\n        0x014C: \"InkSet\",\n        0x014D: \"InkNames\",\n        0x014E: \"NumberofInks\",\n        0x0150: \"DotRange\",\n        0x0151: \"TargetPrinter\",\n        0x0152: \"ExtraSamples\",\n        0x0153: \"SampleFormat\",\n        0x0154: \"SMinSampleValue\",\n        0x0155: \"SMaxSampleValue\",\n        0x0156: \"TransferRange\",\n        0x0157: \"ClipPath\",\n        0x0158: \"XClipPathUnits\",\n        0x0159: \"YClipPathUnits\",\n        0x015A: \"Indexed\",\n        0x015B: \"JPEGTables\",\n        0x015F: \"OPIProxy\",\n        0x0190: \"GlobalParametersIFD\",\n        0x0191: \"ProfileType\",\n        0x0192: \"FaxProfile\",\n        0x0193: \"CodingMethods\",\n        0x0194: \"VersionYear\",\n        0x0195: \"ModeNumber\",\n        0x01B1: \"Decode\",\n        0x01B2: \"DefaultImageColor\",\n        0x01B3: \"T82Options\",\n        0x01B5: \"JPEGTables\",\n        0x0200: \"JPEGProc\",\n        0x0201: \"ThumbnailOffset\",\n        0x0202: \"ThumbnailLength\",\n        0x0203: \"JPEGRestartInterval\",\n        0x0205: \"JPEGLosslessPredictors\",\n        0x0206: \"JPEGPointTransforms\",\n        0x0207: \"JPEGQTables\",\n        0x0208: \"JPEGDCTables\",\n        0x0209: \"JPEGACTables\",\n        0x0211: \"YCbCrCoefficients\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x0214: \"ReferenceBlackWhite\",\n        0x022F: \"StripRowCounts\",\n        0x02BC: \"ApplicationNotes\",\n        0x03E7: \"USPTOMiscellaneous\",\n        0x1000: \"RelatedImageFileFormat\",\n        0x1001: \"RelatedImageWidth\",\n        0x1002: \"RelatedImageHeight\",\n        0x4746: \"Rating\",\n        0x4747: \"XP_DIP_XML\",\n        0x4748: \"StitchInfo\",\n        0x4749: \"RatingPercent\",\n        0x800D: \"ImageID\",\n        0x80A3: \"WangTag1\",\n        0x80A4: \"WangAnnotation\",\n        0x80A5: \"WangTag3\",\n        0x80A6: \"WangTag4\",\n        0x80E3: \"Matteing\",\n        0x80E4: \"DataType\",\n        0x80E5: \"ImageDepth\",\n        0x80E6: \"TileDepth\",\n        0x827D: \"Model2\",\n        0x828D: \"CFARepeatPatternDim\",\n        0x828E: \"CFAPattern2\",\n        0x828F: \"BatteryLevel\",\n        0x8290: \"KodakIFD\",\n        0x8298: \"Copyright\",\n        0x829A: \"ExposureTime\",\n        0x829D: \"FNumber\",\n        0x82A5: \"MDFileTag\",\n        0x82A6: \"MDScalePixel\",\n        0x82A7: \"MDColorTable\",\n        0x82A8: \"MDLabName\",\n        0x82A9: \"MDSampleInfo\",\n        0x82AA: \"MDPrepDate\",\n        0x82AB: \"MDPrepTime\",\n        0x82AC: \"MDFileUnits\",\n        0x830E: \"PixelScale\",\n        0x8335: \"AdventScale\",\n        0x8336: \"AdventRevision\",\n        0x835C: \"UIC1Tag\",\n        0x835D: \"UIC2Tag\",\n        0x835E: \"UIC3Tag\",\n        0x835F: \"UIC4Tag\",\n        0x83BB: \"IPTC-NAA\",\n        0x847E: \"IntergraphPacketData\",\n        0x847F: \"IntergraphFlagRegisters\",\n        0x8480: \"IntergraphMatrix\",\n        0x8481: \"INGRReserved\",\n        0x8482: \"ModelTiePoint\",\n        0x84E0: \"Site\",\n        0x84E1: \"ColorSequence\",\n        0x84E2: \"IT8Header\",\n        0x84E3: \"RasterPadding\",\n        0x84E4: \"BitsPerRunLength\",\n        0x84E5: \"BitsPerExtendedRunLength\",\n        0x84E6: \"ColorTable\",\n        0x84E7: \"ImageColorIndicator\",\n        0x84E8: \"BackgroundColorIndicator\",\n        0x84E9: \"ImageColorValue\",\n        0x84EA: \"BackgroundColorValue\",\n        0x84EB: \"PixelIntensityRange\",\n        0x84EC: \"TransparencyIndicator\",\n        0x84ED: \"ColorCharacterization\",\n        0x84EE: \"HCUsage\",\n        0x84EF: \"TrapIndicator\",\n        0x84F0: \"CMYKEquivalent\",\n        0x8546: \"SEMInfo\",\n        0x8568: \"AFCP_IPTC\",\n        0x85B8: \"PixelMagicJBIGOptions\",\n        0x85D8: \"ModelTransform\",\n        0x8602: \"WB_GRGBLevels\",\n        0x8606: \"LeafData\",\n        0x8649: \"PhotoshopSettings\",\n        0x8769: \"ExifOffset\",\n        0x8773: \"ICC_Profile\",\n        0x877F: \"TIFF_FXExtensions\",\n        0x8780: \"MultiProfiles\",\n        0x8781: \"SharedData\",\n        0x8782: \"T88Options\",\n        0x87AC: \"ImageLayer\",\n        0x87AF: \"GeoTiffDirectory\",\n        0x87B0: \"GeoTiffDoubleParams\",\n        0x87B1: \"GeoTiffAsciiParams\",\n        0x8822: \"ExposureProgram\",\n        0x8824: \"SpectralSensitivity\",\n        0x8825: \"GPSInfo\",\n        0x8827: \"ISO\",\n        0x8828: \"Opto-ElectricConvFactor\",\n        0x8829: \"Interlace\",\n        0x882A: \"TimeZoneOffset\",\n        0x882B: \"SelfTimerMode\",\n        0x8830: \"SensitivityType\",\n        0x8831: \"StandardOutputSensitivity\",\n        0x8832: \"RecommendedExposureIndex\",\n        0x8833: \"ISOSpeed\",\n        0x8834: \"ISOSpeedLatitudeyyy\",\n        0x8835: \"ISOSpeedLatitudezzz\",\n        0x885C: \"FaxRecvParams\",\n        0x885D: \"FaxSubAddress\",\n        0x885E: \"FaxRecvTime\",\n        0x888A: \"LeafSubIFD\",\n        0x9000: \"ExifVersion\",\n        0x9003: \"DateTimeOriginal\",\n        0x9004: \"CreateDate\",\n        0x9101: \"ComponentsConfiguration\",\n        0x9102: \"CompressedBitsPerPixel\",\n        0x9201: \"ShutterSpeedValue\",\n        0x9202: \"ApertureValue\",\n        0x9203: \"BrightnessValue\",\n        0x9204: \"ExposureCompensation\",\n        0x9205: \"MaxApertureValue\",\n        0x9206: \"SubjectDistance\",\n        0x9207: \"MeteringMode\",\n        0x9208: \"LightSource\",\n        0x9209: \"Flash\",\n        0x920A: \"FocalLength\",\n        0x920B: \"FlashEnergy\",\n        0x920C: \"SpatialFrequencyResponse\",\n        0x920D: \"Noise\",\n        0x920E: \"FocalPlaneXResolution\",\n        0x920F: \"FocalPlaneYResolution\",\n        0x9210: \"FocalPlaneResolutionUnit\",\n        0x9211: \"ImageNumber\",\n        0x9212: \"SecurityClassification\",\n        0x9213: \"ImageHistory\",\n        0x9214: \"SubjectArea\",\n        0x9215: \"ExposureIndex\",\n        0x9216: \"TIFF-EPStandardID\",\n        0x9217: \"SensingMethod\",\n        0x923A: \"CIP3DataFile\",\n        0x923B: \"CIP3Sheet\",\n        0x923C: \"CIP3Side\",\n        0x923F: \"StoNits\",\n        0x927C: \"MakerNote\",\n        0x9286: \"UserComment\",\n        0x9290: \"SubSecTime\",\n        0x9291: \"SubSecTimeOriginal\",\n        0x9292: \"SubSecTimeDigitized\",\n        0x932F: \"MSDocumentText\",\n        0x9330: \"MSPropertySetStorage\",\n        0x9331: \"MSDocumentTextPosition\",\n        0x935C: \"ImageSourceData\",\n        0x9C9B: \"XPTitle\",\n        0x9C9C: \"XPComment\",\n        0x9C9D: \"XPAuthor\",\n        0x9C9E: \"XPKeywords\",\n        0x9C9F: \"XPSubject\",\n        0xA000: \"FlashpixVersion\",\n        0xA001: \"ColorSpace\",\n        0xA002: \"ExifImageWidth\",\n        0xA003: \"ExifImageHeight\",\n        0xA004: \"RelatedSoundFile\",\n        0xA005: \"InteropOffset\",\n        0xA20B: \"FlashEnergy\",\n        0xA20C: \"SpatialFrequencyResponse\",\n        0xA20D: \"Noise\",\n        0xA20E: \"FocalPlaneXResolution\",\n        0xA20F: \"FocalPlaneYResolution\",\n        0xA210: \"FocalPlaneResolutionUnit\",\n        0xA211: \"ImageNumber\",\n        0xA212: \"SecurityClassification\",\n        0xA213: \"ImageHistory\",\n        0xA214: \"SubjectLocation\",\n        0xA215: \"ExposureIndex\",\n        0xA216: \"TIFF-EPStandardID\",\n        0xA217: \"SensingMethod\",\n        0xA300: \"FileSource\",\n        0xA301: \"SceneType\",\n        0xA302: \"CFAPattern\",\n        0xA401: \"CustomRendered\",\n        0xA402: \"ExposureMode\",\n        0xA403: \"WhiteBalance\",\n        0xA404: \"DigitalZoomRatio\",\n        0xA405: \"FocalLengthIn35mmFormat\",\n        0xA406: \"SceneCaptureType\",\n        0xA407: \"GainControl\",\n        0xA408: \"Contrast\",\n        0xA409: \"Saturation\",\n        0xA40A: \"Sharpness\",\n        0xA40B: \"DeviceSettingDescription\",\n        0xA40C: \"SubjectDistanceRange\",\n        0xA420: \"ImageUniqueID\",\n        0xA430: \"OwnerName\",\n        0xA431: \"SerialNumber\",\n        0xA432: \"LensInfo\",\n        0xA433: \"LensMake\",\n        0xA434: \"LensModel\",\n        0xA435: \"LensSerialNumber\",\n        0xA480: \"GDALMetadata\",\n        0xA481: \"GDALNoData\",\n        0xA500: \"Gamma\",\n        0xAFC0: \"ExpandSoftware\",\n        0xAFC1: \"ExpandLens\",\n        0xAFC2: \"ExpandFilm\",\n        0xAFC3: \"ExpandFilterLens\",\n        0xAFC4: \"ExpandScanner\",\n        0xAFC5: \"ExpandFlashLamp\",\n        0xBC01: \"PixelFormat\",\n        0xBC02: \"Transformation\",\n        0xBC03: \"Uncompressed\",\n        0xBC04: \"ImageType\",\n        0xBC80: \"ImageWidth\",\n        0xBC81: \"ImageHeight\",\n        0xBC82: \"WidthResolution\",\n        0xBC83: \"HeightResolution\",\n        0xBCC0: \"ImageOffset\",\n        0xBCC1: \"ImageByteCount\",\n        0xBCC2: \"AlphaOffset\",\n        0xBCC3: \"AlphaByteCount\",\n        0xBCC4: \"ImageDataDiscard\",\n        0xBCC5: \"AlphaDataDiscard\",\n        0xC427: \"OceScanjobDesc\",\n        0xC428: \"OceApplicationSelector\",\n        0xC429: \"OceIDNumber\",\n        0xC42A: \"OceImageLogic\",\n        0xC44F: \"Annotations\",\n        0xC4A5: \"PrintIM\",\n        0xC580: \"USPTOOriginalContentType\",\n        0xC612: \"DNGVersion\",\n        0xC613: \"DNGBackwardVersion\",\n        0xC614: \"UniqueCameraModel\",\n        0xC615: \"LocalizedCameraModel\",\n        0xC616: \"CFAPlaneColor\",\n        0xC617: \"CFALayout\",\n        0xC618: \"LinearizationTable\",\n        0xC619: \"BlackLevelRepeatDim\",\n        0xC61A: \"BlackLevel\",\n        0xC61B: \"BlackLevelDeltaH\",\n        0xC61C: \"BlackLevelDeltaV\",\n        0xC61D: \"WhiteLevel\",\n        0xC61E: \"DefaultScale\",\n        0xC61F: \"DefaultCropOrigin\",\n        0xC620: \"DefaultCropSize\",\n        0xC621: \"ColorMatrix1\",\n        0xC622: \"ColorMatrix2\",\n        0xC623: \"CameraCalibration1\",\n        0xC624: \"CameraCalibration2\",\n        0xC625: \"ReductionMatrix1\",\n        0xC626: \"ReductionMatrix2\",\n        0xC627: \"AnalogBalance\",\n        0xC628: \"AsShotNeutral\",\n        0xC629: \"AsShotWhiteXY\",\n        0xC62A: \"BaselineExposure\",\n        0xC62B: \"BaselineNoise\",\n        0xC62C: \"BaselineSharpness\",\n        0xC62D: \"BayerGreenSplit\",\n        0xC62E: \"LinearResponseLimit\",\n        0xC62F: \"CameraSerialNumber\",\n        0xC630: \"DNGLensInfo\",\n        0xC631: \"ChromaBlurRadius\",\n        0xC632: \"AntiAliasStrength\",\n        0xC633: \"ShadowScale\",\n        0xC634: \"DNGPrivateData\",\n        0xC635: \"MakerNoteSafety\",\n        0xC640: \"RawImageSegmentation\",\n        0xC65A: \"CalibrationIlluminant1\",\n        0xC65B: \"CalibrationIlluminant2\",\n        0xC65C: \"BestQualityScale\",\n        0xC65D: \"RawDataUniqueID\",\n        0xC660: \"AliasLayerMetadata\",\n        0xC68B: \"OriginalRawFileName\",\n        0xC68C: \"OriginalRawFileData\",\n        0xC68D: \"ActiveArea\",\n        0xC68E: \"MaskedAreas\",\n        0xC68F: \"AsShotICCProfile\",\n        0xC690: \"AsShotPreProfileMatrix\",\n        0xC691: \"CurrentICCProfile\",\n        0xC692: \"CurrentPreProfileMatrix\",\n        0xC6BF: \"ColorimetricReference\",\n        0xC6D2: \"PanasonicTitle\",\n        0xC6D3: \"PanasonicTitle2\",\n        0xC6F3: \"CameraCalibrationSig\",\n        0xC6F4: \"ProfileCalibrationSig\",\n        0xC6F5: \"ProfileIFD\",\n        0xC6F6: \"AsShotProfileName\",\n        0xC6F7: \"NoiseReductionApplied\",\n        0xC6F8: \"ProfileName\",\n        0xC6F9: \"ProfileHueSatMapDims\",\n        0xC6FA: \"ProfileHueSatMapData1\",\n        0xC6FB: \"ProfileHueSatMapData2\",\n        0xC6FC: \"ProfileToneCurve\",\n        0xC6FD: \"ProfileEmbedPolicy\",\n        0xC6FE: \"ProfileCopyright\",\n        0xC714: \"ForwardMatrix1\",\n        0xC715: \"ForwardMatrix2\",\n        0xC716: \"PreviewApplicationName\",\n        0xC717: \"PreviewApplicationVersion\",\n        0xC718: \"PreviewSettingsName\",\n        0xC719: \"PreviewSettingsDigest\",\n        0xC71A: \"PreviewColorSpace\",\n        0xC71B: \"PreviewDateTime\",\n        0xC71C: \"RawImageDigest\",\n        0xC71D: \"OriginalRawFileDigest\",\n        0xC71E: \"SubTileBlockSize\",\n        0xC71F: \"RowInterleaveFactor\",\n        0xC725: \"ProfileLookTableDims\",\n        0xC726: \"ProfileLookTableData\",\n        0xC740: \"OpcodeList1\",\n        0xC741: \"OpcodeList2\",\n        0xC74E: \"OpcodeList3\",\n        0xC761: \"NoiseProfile\",\n        0xC763: \"TimeCodes\",\n        0xC764: \"FrameRate\",\n        0xC772: \"TStop\",\n        0xC789: \"ReelName\",\n        0xC791: \"OriginalDefaultFinalSize\",\n        0xC792: \"OriginalBestQualitySize\",\n        0xC793: \"OriginalDefaultCropSize\",\n        0xC7A1: \"CameraLabel\",\n        0xC7A3: \"ProfileHueSatMapEncoding\",\n        0xC7A4: \"ProfileLookTableEncoding\",\n        0xC7A5: \"BaselineExposureOffset\",\n        0xC7A6: \"DefaultBlackRender\",\n        0xC7A7: \"NewRawImageDigest\",\n        0xC7A8: \"RawToPreviewGain\",\n        0xC7B5: \"DefaultUserCrop\",\n        0xEA1C: \"Padding\",\n        0xEA1D: \"OffsetSchema\",\n        0xFDE8: \"OwnerName\",\n        0xFDE9: \"SerialNumber\",\n        0xFDEA: \"Lens\",\n        0xFE00: \"KDC_IFD\",\n        0xFE4C: \"RawFile\",\n        0xFE4D: \"Converter\",\n        0xFE4E: \"WhiteBalance\",\n        0xFE51: \"Exposure\",\n        0xFE52: \"Shadows\",\n        0xFE53: \"Brightness\",\n        0xFE54: \"Contrast\",\n        0xFE55: \"Saturation\",\n        0xFE56: \"Sharpness\",\n        0xFE57: \"Smoothness\",\n        0xFE58: \"MoireFilter\"\n    },\n    gps: {\n        0x0000: \"GPSVersionID\",\n        0x0001: \"GPSLatitudeRef\",\n        0x0002: \"GPSLatitude\",\n        0x0003: \"GPSLongitudeRef\",\n        0x0004: \"GPSLongitude\",\n        0x0005: \"GPSAltitudeRef\",\n        0x0006: \"GPSAltitude\",\n        0x0007: \"GPSTimeStamp\",\n        0x0008: \"GPSSatellites\",\n        0x0009: \"GPSStatus\",\n        0x000A: \"GPSMeasureMode\",\n        0x000B: \"GPSDOP\",\n        0x000C: \"GPSSpeedRef\",\n        0x000D: \"GPSSpeed\",\n        0x000E: \"GPSTrackRef\",\n        0x000F: \"GPSTrack\",\n        0x0010: \"GPSImgDirectionRef\",\n        0x0011: \"GPSImgDirection\",\n        0x0012: \"GPSMapDatum\",\n        0x0013: \"GPSDestLatitudeRef\",\n        0x0014: \"GPSDestLatitude\",\n        0x0015: \"GPSDestLongitudeRef\",\n        0x0016: \"GPSDestLongitude\",\n        0x0017: \"GPSDestBearingRef\",\n        0x0018: \"GPSDestBearing\",\n        0x0019: \"GPSDestDistanceRef\",\n        0x001A: \"GPSDestDistance\",\n        0x001B: \"GPSProcessingMethod\",\n        0x001C: \"GPSAreaInformation\",\n        0x001D: \"GPSDateStamp\",\n        0x001E: \"GPSDifferential\",\n        0x001F: \"GPSHPositioningError\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/exif-parser/lib/exif-tags.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/exif-parser/lib/exif.js":
/*!**********************************************!*\
  !*** ./node_modules/exif-parser/lib/exif.js ***!
  \**********************************************/
/***/ ((module) => {

eval("/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */ function readExifValue(format, stream) {\n    switch(format){\n        case 1:\n            return stream.nextUInt8();\n        case 3:\n            return stream.nextUInt16();\n        case 4:\n            return stream.nextUInt32();\n        case 5:\n            return [\n                stream.nextUInt32(),\n                stream.nextUInt32()\n            ];\n        case 6:\n            return stream.nextInt8();\n        case 8:\n            return stream.nextUInt16();\n        case 9:\n            return stream.nextUInt32();\n        case 10:\n            return [\n                stream.nextInt32(),\n                stream.nextInt32()\n            ];\n        case 11:\n            return stream.nextFloat();\n        case 12:\n            return stream.nextDouble();\n        default:\n            throw new Error(\"Invalid format while decoding: \" + format);\n    }\n}\nfunction getBytesPerComponent(format) {\n    switch(format){\n        case 1:\n        case 2:\n        case 6:\n        case 7:\n            return 1;\n        case 3:\n        case 8:\n            return 2;\n        case 4:\n        case 9:\n        case 11:\n            return 4;\n        case 5:\n        case 10:\n        case 12:\n            return 8;\n        default:\n            return 0;\n    }\n}\nfunction readExifTag(tiffMarker, stream) {\n    var tagType = stream.nextUInt16(), format = stream.nextUInt16(), bytesPerComponent = getBytesPerComponent(format), components = stream.nextUInt32(), valueBytes = bytesPerComponent * components, values, value, c;\n    /* if the value is bigger then 4 bytes, the value is in the data section of the IFD\n\tand the value present in the tag is the offset starting from the tiff header. So we replace the stream\n\twith a stream that is located at the given offset in the data section. s*/ if (valueBytes > 4) {\n        stream = tiffMarker.openWithOffset(stream.nextUInt32());\n    }\n    //we don't want to read strings as arrays\n    if (format === 2) {\n        values = stream.nextString(components);\n        //cut off \\0 characters\n        var lastNull = values.indexOf(\"\\x00\");\n        if (lastNull !== -1) {\n            values = values.substr(0, lastNull);\n        }\n    } else if (format === 7) {\n        values = stream.nextBuffer(components);\n    } else if (format !== 0) {\n        values = [];\n        for(c = 0; c < components; ++c){\n            values.push(readExifValue(format, stream));\n        }\n    }\n    //since our stream is a stateful object, we need to skip remaining bytes\n    //so our offset stays correct\n    if (valueBytes < 4) {\n        stream.skip(4 - valueBytes);\n    }\n    return [\n        tagType,\n        values,\n        format\n    ];\n}\nfunction readIFDSection(tiffMarker, stream, iterator) {\n    var numberOfEntries = stream.nextUInt16(), tag, i;\n    for(i = 0; i < numberOfEntries; ++i){\n        tag = readExifTag(tiffMarker, stream);\n        iterator(tag[0], tag[1], tag[2]);\n    }\n}\nfunction readHeader(stream) {\n    var exifHeader = stream.nextString(6);\n    if (exifHeader !== \"Exif\\x00\\x00\") {\n        throw new Error(\"Invalid EXIF header\");\n    }\n    var tiffMarker = stream.mark();\n    var tiffHeader = stream.nextUInt16();\n    if (tiffHeader === 0x4949) {\n        stream.setBigEndian(false);\n    } else if (tiffHeader === 0x4D4D) {\n        stream.setBigEndian(true);\n    } else {\n        throw new Error(\"Invalid TIFF header\");\n    }\n    if (stream.nextUInt16() !== 0x002A) {\n        throw new Error(\"Invalid TIFF data\");\n    }\n    return tiffMarker;\n}\nmodule.exports = {\n    IFD0: 1,\n    IFD1: 2,\n    GPSIFD: 3,\n    SubIFD: 4,\n    InteropIFD: 5,\n    parseTags: function(stream, iterator) {\n        var tiffMarker;\n        try {\n            tiffMarker = readHeader(stream);\n        } catch (e) {\n            return false; //ignore APP1 sections with invalid headers\n        }\n        var subIfdOffset, gpsOffset, interopOffset;\n        var ifd0Stream = tiffMarker.openWithOffset(stream.nextUInt32()), IFD0 = this.IFD0;\n        readIFDSection(tiffMarker, ifd0Stream, function(tagType, value, format) {\n            switch(tagType){\n                case 0x8825:\n                    gpsOffset = value[0];\n                    break;\n                case 0x8769:\n                    subIfdOffset = value[0];\n                    break;\n                default:\n                    iterator(IFD0, tagType, value, format);\n                    break;\n            }\n        });\n        var ifd1Offset = ifd0Stream.nextUInt32();\n        if (ifd1Offset !== 0) {\n            var ifd1Stream = tiffMarker.openWithOffset(ifd1Offset);\n            readIFDSection(tiffMarker, ifd1Stream, iterator.bind(null, this.IFD1));\n        }\n        if (gpsOffset) {\n            var gpsStream = tiffMarker.openWithOffset(gpsOffset);\n            readIFDSection(tiffMarker, gpsStream, iterator.bind(null, this.GPSIFD));\n        }\n        if (subIfdOffset) {\n            var subIfdStream = tiffMarker.openWithOffset(subIfdOffset), InteropIFD = this.InteropIFD;\n            readIFDSection(tiffMarker, subIfdStream, function(tagType, value, format) {\n                if (tagType === 0xA005) {\n                    interopOffset = value[0];\n                } else {\n                    iterator(InteropIFD, tagType, value, format);\n                }\n            });\n        }\n        if (interopOffset) {\n            var interopStream = tiffMarker.openWithOffset(interopOffset);\n            readIFDSection(tiffMarker, interopStream, iterator.bind(null, this.InteropIFD));\n        }\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/exif-parser/lib/exif.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/exif-parser/lib/jpeg.js":
/*!**********************************************!*\
  !*** ./node_modules/exif-parser/lib/jpeg.js ***!
  \**********************************************/
/***/ ((module) => {

eval("/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */ module.exports = {\n    parseSections: function(stream, iterator) {\n        var len, markerType;\n        stream.setBigEndian(true);\n        //stop reading the stream at the SOS (Start of Stream) marker,\n        //because its length is not stored in the header so we can't\n        //know where to jump to. The only marker after that is just EOI (End Of Image) anyway\n        while(stream.remainingLength() > 0 && markerType !== 0xDA){\n            if (stream.nextUInt8() !== 0xFF) {\n                throw new Error(\"Invalid JPEG section offset\");\n            }\n            markerType = stream.nextUInt8();\n            //don't read size from markers that have no datas\n            if (markerType >= 0xD0 && markerType <= 0xD9 || markerType === 0xDA) {\n                len = 0;\n            } else {\n                len = stream.nextUInt16() - 2;\n            }\n            iterator(markerType, stream.branch(0, len));\n            stream.skip(len);\n        }\n    },\n    //stream should be located after SOF section size and in big endian mode, like passed to parseSections iterator\n    getSizeFromSOFSection: function(stream) {\n        stream.skip(1);\n        return {\n            height: stream.nextUInt16(),\n            width: stream.nextUInt16()\n        };\n    },\n    getSectionName: function(markerType) {\n        var name, index;\n        switch(markerType){\n            case 0xD8:\n                name = \"SOI\";\n                break;\n            case 0xC4:\n                name = \"DHT\";\n                break;\n            case 0xDB:\n                name = \"DQT\";\n                break;\n            case 0xDD:\n                name = \"DRI\";\n                break;\n            case 0xDA:\n                name = \"SOS\";\n                break;\n            case 0xFE:\n                name = \"COM\";\n                break;\n            case 0xD9:\n                name = \"EOI\";\n                break;\n            default:\n                if (markerType >= 0xE0 && markerType <= 0xEF) {\n                    name = \"APP\";\n                    index = markerType - 0xE0;\n                } else if (markerType >= 0xC0 && markerType <= 0xCF && markerType !== 0xC4 && markerType !== 0xC8 && markerType !== 0xCC) {\n                    name = \"SOF\";\n                    index = markerType - 0xC0;\n                } else if (markerType >= 0xD0 && markerType <= 0xD7) {\n                    name = \"RST\";\n                    index = markerType - 0xD0;\n                }\n                break;\n        }\n        var nameStruct = {\n            name: name\n        };\n        if (typeof index === \"number\") {\n            nameStruct.index = index;\n        }\n        return nameStruct;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbWFnZS1nYWxsZXJ5Ly4vbm9kZV9tb2R1bGVzL2V4aWYtcGFyc2VyL2xpYi9qcGVnLmpzPzI2NWIiXSwic291cmNlc0NvbnRlbnQiOlsiLypqc2xpbnQgYnJvd3NlcjogdHJ1ZSwgZGV2ZWw6IHRydWUsIGJpdHdpc2U6IGZhbHNlLCBkZWJ1ZzogdHJ1ZSwgZXFlcTogZmFsc2UsIGVzNTogdHJ1ZSwgZXZpbDogZmFsc2UsIGZvcmluOiBmYWxzZSwgbmV3Y2FwOiBmYWxzZSwgbm9tZW46IHRydWUsIHBsdXNwbHVzOiB0cnVlLCByZWdleHA6IGZhbHNlLCB1bnBhcmFtOiBmYWxzZSwgc2xvcHB5OiB0cnVlLCBzdHVwaWQ6IGZhbHNlLCBzdWI6IGZhbHNlLCB0b2RvOiB0cnVlLCB2YXJzOiB0cnVlLCB3aGl0ZTogdHJ1ZSAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0cGFyc2VTZWN0aW9uczogZnVuY3Rpb24oc3RyZWFtLCBpdGVyYXRvcikge1xuXHRcdHZhciBsZW4sIG1hcmtlclR5cGU7XG5cdFx0c3RyZWFtLnNldEJpZ0VuZGlhbih0cnVlKTtcblx0XHQvL3N0b3AgcmVhZGluZyB0aGUgc3RyZWFtIGF0IHRoZSBTT1MgKFN0YXJ0IG9mIFN0cmVhbSkgbWFya2VyLFxuXHRcdC8vYmVjYXVzZSBpdHMgbGVuZ3RoIGlzIG5vdCBzdG9yZWQgaW4gdGhlIGhlYWRlciBzbyB3ZSBjYW4ndFxuXHRcdC8va25vdyB3aGVyZSB0byBqdW1wIHRvLiBUaGUgb25seSBtYXJrZXIgYWZ0ZXIgdGhhdCBpcyBqdXN0IEVPSSAoRW5kIE9mIEltYWdlKSBhbnl3YXlcblx0XHR3aGlsZShzdHJlYW0ucmVtYWluaW5nTGVuZ3RoKCkgPiAwICYmIG1hcmtlclR5cGUgIT09IDB4REEpIHtcblx0XHRcdGlmKHN0cmVhbS5uZXh0VUludDgoKSAhPT0gMHhGRikge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgSlBFRyBzZWN0aW9uIG9mZnNldCcpO1xuXHRcdFx0fVxuXHRcdFx0bWFya2VyVHlwZSA9IHN0cmVhbS5uZXh0VUludDgoKTtcblx0XHRcdC8vZG9uJ3QgcmVhZCBzaXplIGZyb20gbWFya2VycyB0aGF0IGhhdmUgbm8gZGF0YXNcblx0XHRcdGlmKChtYXJrZXJUeXBlID49IDB4RDAgJiYgbWFya2VyVHlwZSA8PSAweEQ5KSB8fCBtYXJrZXJUeXBlID09PSAweERBKSB7XG5cdFx0XHRcdGxlbiA9IDA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsZW4gPSBzdHJlYW0ubmV4dFVJbnQxNigpIC0gMjtcblx0XHRcdH1cblx0XHRcdGl0ZXJhdG9yKG1hcmtlclR5cGUsIHN0cmVhbS5icmFuY2goMCwgbGVuKSk7XG5cdFx0XHRzdHJlYW0uc2tpcChsZW4pO1xuXHRcdH1cblx0fSxcblx0Ly9zdHJlYW0gc2hvdWxkIGJlIGxvY2F0ZWQgYWZ0ZXIgU09GIHNlY3Rpb24gc2l6ZSBhbmQgaW4gYmlnIGVuZGlhbiBtb2RlLCBsaWtlIHBhc3NlZCB0byBwYXJzZVNlY3Rpb25zIGl0ZXJhdG9yXG5cdGdldFNpemVGcm9tU09GU2VjdGlvbjogZnVuY3Rpb24oc3RyZWFtKSB7XG5cdFx0c3RyZWFtLnNraXAoMSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhlaWdodDogc3RyZWFtLm5leHRVSW50MTYoKSxcblx0XHRcdHdpZHRoOiBzdHJlYW0ubmV4dFVJbnQxNigpXG5cdFx0fTtcblx0fSxcblx0Z2V0U2VjdGlvbk5hbWU6IGZ1bmN0aW9uKG1hcmtlclR5cGUpIHtcblx0XHR2YXIgbmFtZSwgaW5kZXg7XG5cdFx0c3dpdGNoKG1hcmtlclR5cGUpIHtcblx0XHRcdGNhc2UgMHhEODogbmFtZSA9ICdTT0knOyBicmVhaztcblx0XHRcdGNhc2UgMHhDNDogbmFtZSA9ICdESFQnOyBicmVhaztcblx0XHRcdGNhc2UgMHhEQjogbmFtZSA9ICdEUVQnOyBicmVhaztcblx0XHRcdGNhc2UgMHhERDogbmFtZSA9ICdEUkknOyBicmVhaztcblx0XHRcdGNhc2UgMHhEQTogbmFtZSA9ICdTT1MnOyBicmVhaztcblx0XHRcdGNhc2UgMHhGRTogbmFtZSA9ICdDT00nOyBicmVhaztcblx0XHRcdGNhc2UgMHhEOTogbmFtZSA9ICdFT0knOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmKG1hcmtlclR5cGUgPj0gMHhFMCAmJiBtYXJrZXJUeXBlIDw9IDB4RUYpIHtcblx0XHRcdFx0XHRuYW1lID0gJ0FQUCc7XG5cdFx0XHRcdFx0aW5kZXggPSBtYXJrZXJUeXBlIC0gMHhFMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmKG1hcmtlclR5cGUgPj0gMHhDMCAmJiBtYXJrZXJUeXBlIDw9IDB4Q0YgJiYgbWFya2VyVHlwZSAhPT0gMHhDNCAmJiBtYXJrZXJUeXBlICE9PSAweEM4ICYmIG1hcmtlclR5cGUgIT09IDB4Q0MpIHtcblx0XHRcdFx0XHRuYW1lID0gJ1NPRic7XG5cdFx0XHRcdFx0aW5kZXggPSBtYXJrZXJUeXBlIC0gMHhDMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmKG1hcmtlclR5cGUgPj0gMHhEMCAmJiBtYXJrZXJUeXBlIDw9IDB4RDcpIHtcblx0XHRcdFx0XHRuYW1lID0gJ1JTVCc7XG5cdFx0XHRcdFx0aW5kZXggPSBtYXJrZXJUeXBlIC0gMHhEMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdFx0dmFyIG5hbWVTdHJ1Y3QgPSB7XG5cdFx0XHRuYW1lOiBuYW1lXG5cdFx0fTtcblx0XHRpZih0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG5cdFx0XHRuYW1lU3RydWN0LmluZGV4ID0gaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lU3RydWN0O1xuXHR9XG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VTZWN0aW9ucyIsInN0cmVhbSIsIml0ZXJhdG9yIiwibGVuIiwibWFya2VyVHlwZSIsInNldEJpZ0VuZGlhbiIsInJlbWFpbmluZ0xlbmd0aCIsIm5leHRVSW50OCIsIkVycm9yIiwibmV4dFVJbnQxNiIsImJyYW5jaCIsInNraXAiLCJnZXRTaXplRnJvbVNPRlNlY3Rpb24iLCJoZWlnaHQiLCJ3aWR0aCIsImdldFNlY3Rpb25OYW1lIiwibmFtZSIsImluZGV4IiwibmFtZVN0cnVjdCJdLCJtYXBwaW5ncyI6IkFBQUEsNlFBQTZRLEdBRTdRQSxPQUFPQyxPQUFPLEdBQUc7SUFDaEJDLGVBQWUsU0FBU0MsTUFBTSxFQUFFQyxRQUFRO1FBQ3ZDLElBQUlDLEtBQUtDO1FBQ1RILE9BQU9JLFlBQVksQ0FBQztRQUNwQiw4REFBOEQ7UUFDOUQsNERBQTREO1FBQzVELHFGQUFxRjtRQUNyRixNQUFNSixPQUFPSyxlQUFlLEtBQUssS0FBS0YsZUFBZSxLQUFNO1lBQzFELElBQUdILE9BQU9NLFNBQVMsT0FBTyxNQUFNO2dCQUMvQixNQUFNLElBQUlDLE1BQU07WUFDakI7WUFDQUosYUFBYUgsT0FBT00sU0FBUztZQUM3QixpREFBaUQ7WUFDakQsSUFBRyxBQUFDSCxjQUFjLFFBQVFBLGNBQWMsUUFBU0EsZUFBZSxNQUFNO2dCQUNyRUQsTUFBTTtZQUNQLE9BQU87Z0JBQ05BLE1BQU1GLE9BQU9RLFVBQVUsS0FBSztZQUM3QjtZQUNBUCxTQUFTRSxZQUFZSCxPQUFPUyxNQUFNLENBQUMsR0FBR1A7WUFDdENGLE9BQU9VLElBQUksQ0FBQ1I7UUFDYjtJQUNEO0lBQ0EsK0dBQStHO0lBQy9HUyx1QkFBdUIsU0FBU1gsTUFBTTtRQUNyQ0EsT0FBT1UsSUFBSSxDQUFDO1FBQ1osT0FBTztZQUNORSxRQUFRWixPQUFPUSxVQUFVO1lBQ3pCSyxPQUFPYixPQUFPUSxVQUFVO1FBQ3pCO0lBQ0Q7SUFDQU0sZ0JBQWdCLFNBQVNYLFVBQVU7UUFDbEMsSUFBSVksTUFBTUM7UUFDVixPQUFPYjtZQUNOLEtBQUs7Z0JBQU1ZLE9BQU87Z0JBQU87WUFDekIsS0FBSztnQkFBTUEsT0FBTztnQkFBTztZQUN6QixLQUFLO2dCQUFNQSxPQUFPO2dCQUFPO1lBQ3pCLEtBQUs7Z0JBQU1BLE9BQU87Z0JBQU87WUFDekIsS0FBSztnQkFBTUEsT0FBTztnQkFBTztZQUN6QixLQUFLO2dCQUFNQSxPQUFPO2dCQUFPO1lBQ3pCLEtBQUs7Z0JBQU1BLE9BQU87Z0JBQU87WUFDekI7Z0JBQ0MsSUFBR1osY0FBYyxRQUFRQSxjQUFjLE1BQU07b0JBQzVDWSxPQUFPO29CQUNQQyxRQUFRYixhQUFhO2dCQUN0QixPQUNLLElBQUdBLGNBQWMsUUFBUUEsY0FBYyxRQUFRQSxlQUFlLFFBQVFBLGVBQWUsUUFBUUEsZUFBZSxNQUFNO29CQUN0SFksT0FBTztvQkFDUEMsUUFBUWIsYUFBYTtnQkFDdEIsT0FDSyxJQUFHQSxjQUFjLFFBQVFBLGNBQWMsTUFBTTtvQkFDakRZLE9BQU87b0JBQ1BDLFFBQVFiLGFBQWE7Z0JBQ3RCO2dCQUNBO1FBQ0Y7UUFDQSxJQUFJYyxhQUFhO1lBQ2hCRixNQUFNQTtRQUNQO1FBQ0EsSUFBRyxPQUFPQyxVQUFVLFVBQVU7WUFDN0JDLFdBQVdELEtBQUssR0FBR0E7UUFDcEI7UUFDQSxPQUFPQztJQUNSO0FBQ0QiLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXhpZi1wYXJzZXIvbGliL2pwZWcuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/exif-parser/lib/jpeg.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/exif-parser/lib/parser.js":
/*!************************************************!*\
  !*** ./node_modules/exif-parser/lib/parser.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */ var jpeg = __webpack_require__(/*! ./jpeg */ \"(rsc)/./node_modules/exif-parser/lib/jpeg.js\"), exif = __webpack_require__(/*! ./exif */ \"(rsc)/./node_modules/exif-parser/lib/exif.js\"), simplify = __webpack_require__(/*! ./simplify */ \"(rsc)/./node_modules/exif-parser/lib/simplify.js\");\nfunction ExifResult(startMarker, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset) {\n    this.startMarker = startMarker;\n    this.tags = tags;\n    this.imageSize = imageSize;\n    this.thumbnailOffset = thumbnailOffset;\n    this.thumbnailLength = thumbnailLength;\n    this.thumbnailType = thumbnailType;\n    this.app1Offset = app1Offset;\n}\nExifResult.prototype = {\n    hasThumbnail: function(mime) {\n        if (!this.thumbnailOffset || !this.thumbnailLength) {\n            return false;\n        }\n        if (typeof mime !== \"string\") {\n            return true;\n        }\n        if (mime.toLowerCase().trim() === \"image/jpeg\") {\n            return this.thumbnailType === 6;\n        }\n        if (mime.toLowerCase().trim() === \"image/tiff\") {\n            return this.thumbnailType === 1;\n        }\n        return false;\n    },\n    getThumbnailOffset: function() {\n        return this.app1Offset + 6 + this.thumbnailOffset;\n    },\n    getThumbnailLength: function() {\n        return this.thumbnailLength;\n    },\n    getThumbnailBuffer: function() {\n        return this._getThumbnailStream().nextBuffer(this.thumbnailLength);\n    },\n    _getThumbnailStream: function() {\n        return this.startMarker.openWithOffset(this.getThumbnailOffset());\n    },\n    getImageSize: function() {\n        return this.imageSize;\n    },\n    getThumbnailSize: function() {\n        var stream = this._getThumbnailStream(), size;\n        jpeg.parseSections(stream, function(sectionType, sectionStream) {\n            if (jpeg.getSectionName(sectionType).name === \"SOF\") {\n                size = jpeg.getSizeFromSOFSection(sectionStream);\n            }\n        });\n        return size;\n    }\n};\nfunction Parser(stream) {\n    this.stream = stream;\n    this.flags = {\n        readBinaryTags: false,\n        resolveTagNames: true,\n        simplifyValues: true,\n        imageSize: true,\n        hidePointers: true,\n        returnTags: true\n    };\n}\nParser.prototype = {\n    enableBinaryFields: function(enable) {\n        this.flags.readBinaryTags = !!enable;\n        return this;\n    },\n    enablePointers: function(enable) {\n        this.flags.hidePointers = !enable;\n        return this;\n    },\n    enableTagNames: function(enable) {\n        this.flags.resolveTagNames = !!enable;\n        return this;\n    },\n    enableImageSize: function(enable) {\n        this.flags.imageSize = !!enable;\n        return this;\n    },\n    enableReturnTags: function(enable) {\n        this.flags.returnTags = !!enable;\n        return this;\n    },\n    enableSimpleValues: function(enable) {\n        this.flags.simplifyValues = !!enable;\n        return this;\n    },\n    parse: function() {\n        var start = this.stream.mark(), stream = start.openWithOffset(0), flags = this.flags, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset, tagNames, getTagValue, setTagValue;\n        if (flags.resolveTagNames) {\n            tagNames = __webpack_require__(/*! ./exif-tags */ \"(rsc)/./node_modules/exif-parser/lib/exif-tags.js\");\n        }\n        if (flags.resolveTagNames) {\n            tags = {};\n            getTagValue = function(t) {\n                return tags[t.name];\n            };\n            setTagValue = function(t, value) {\n                tags[t.name] = value;\n            };\n        } else {\n            tags = [];\n            getTagValue = function(t) {\n                var i;\n                for(i = 0; i < tags.length; ++i){\n                    if (tags[i].type === t.type && tags[i].section === t.section) {\n                        return tags.value;\n                    }\n                }\n            };\n            setTagValue = function(t, value) {\n                var i;\n                for(i = 0; i < tags.length; ++i){\n                    if (tags[i].type === t.type && tags[i].section === t.section) {\n                        tags.value = value;\n                        return;\n                    }\n                }\n            };\n        }\n        jpeg.parseSections(stream, function(sectionType, sectionStream) {\n            var validExifHeaders, sectionOffset = sectionStream.offsetFrom(start);\n            if (sectionType === 0xE1) {\n                validExifHeaders = exif.parseTags(sectionStream, function(ifdSection, tagType, value, format) {\n                    //ignore binary fields if disabled\n                    if (!flags.readBinaryTags && format === 7) {\n                        return;\n                    }\n                    if (tagType === 0x0201) {\n                        thumbnailOffset = value[0];\n                        if (flags.hidePointers) {\n                            return;\n                        }\n                    } else if (tagType === 0x0202) {\n                        thumbnailLength = value[0];\n                        if (flags.hidePointers) {\n                            return;\n                        }\n                    } else if (tagType === 0x0103) {\n                        thumbnailType = value[0];\n                        if (flags.hidePointers) {\n                            return;\n                        }\n                    }\n                    //if flag is set to not store tags, return here after storing pointers\n                    if (!flags.returnTags) {\n                        return;\n                    }\n                    if (flags.simplifyValues) {\n                        value = simplify.simplifyValue(value, format);\n                    }\n                    if (flags.resolveTagNames) {\n                        var sectionTagNames = ifdSection === exif.GPSIFD ? tagNames.gps : tagNames.exif;\n                        var name = sectionTagNames[tagType];\n                        if (!name) {\n                            name = tagNames.exif[tagType];\n                        }\n                        if (!tags.hasOwnProperty(name)) {\n                            tags[name] = value;\n                        }\n                    } else {\n                        tags.push({\n                            section: ifdSection,\n                            type: tagType,\n                            value: value\n                        });\n                    }\n                });\n                if (validExifHeaders) {\n                    app1Offset = sectionOffset;\n                }\n            } else if (flags.imageSize && jpeg.getSectionName(sectionType).name === \"SOF\") {\n                imageSize = jpeg.getSizeFromSOFSection(sectionStream);\n            }\n        });\n        if (flags.simplifyValues) {\n            simplify.castDegreeValues(getTagValue, setTagValue);\n            simplify.castDateValues(getTagValue, setTagValue);\n        }\n        return new ExifResult(start, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset);\n    }\n};\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/exif-parser/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/exif-parser/lib/simplify.js":
/*!**************************************************!*\
  !*** ./node_modules/exif-parser/lib/simplify.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var exif = __webpack_require__(/*! ./exif */ \"(rsc)/./node_modules/exif-parser/lib/exif.js\");\nvar date = __webpack_require__(/*! ./date */ \"(rsc)/./node_modules/exif-parser/lib/date.js\");\nvar degreeTags = [\n    {\n        section: exif.GPSIFD,\n        type: 0x0002,\n        name: \"GPSLatitude\",\n        refType: 0x0001,\n        refName: \"GPSLatitudeRef\",\n        posVal: \"N\"\n    },\n    {\n        section: exif.GPSIFD,\n        type: 0x0004,\n        name: \"GPSLongitude\",\n        refType: 0x0003,\n        refName: \"GPSLongitudeRef\",\n        posVal: \"E\"\n    }\n];\nvar dateTags = [\n    {\n        section: exif.SubIFD,\n        type: 0x0132,\n        name: \"ModifyDate\"\n    },\n    {\n        section: exif.SubIFD,\n        type: 0x9003,\n        name: \"DateTimeOriginal\"\n    },\n    {\n        section: exif.SubIFD,\n        type: 0x9004,\n        name: \"CreateDate\"\n    },\n    {\n        section: exif.SubIFD,\n        type: 0x0132,\n        name: \"ModifyDate\"\n    }\n];\nmodule.exports = {\n    castDegreeValues: function(getTagValue, setTagValue) {\n        degreeTags.forEach(function(t) {\n            var degreeVal = getTagValue(t);\n            if (degreeVal) {\n                var degreeRef = getTagValue({\n                    section: t.section,\n                    type: t.refType,\n                    name: t.refName\n                });\n                var degreeNumRef = degreeRef === t.posVal ? 1 : -1;\n                var degree = (degreeVal[0] + degreeVal[1] / 60 + degreeVal[2] / 3600) * degreeNumRef;\n                setTagValue(t, degree);\n            }\n        });\n    },\n    castDateValues: function(getTagValue, setTagValue) {\n        dateTags.forEach(function(t) {\n            var dateStrVal = getTagValue(t);\n            if (dateStrVal) {\n                //some easy checks to determine two common date formats\n                var timestamp = date.parseExifDate(dateStrVal);\n                if (typeof timestamp !== \"undefined\") {\n                    setTagValue(t, timestamp);\n                }\n            }\n        });\n    },\n    simplifyValue: function(values, format) {\n        if (Array.isArray(values)) {\n            values = values.map(function(value) {\n                if (format === 10 || format === 5) {\n                    return value[0] / value[1];\n                }\n                return value;\n            });\n            if (values.length === 1) {\n                values = values[0];\n            }\n        }\n        return values;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZXhpZi1wYXJzZXIvbGliL3NpbXBsaWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5CLElBQUlFLGFBQWE7SUFBQztRQUNqQkMsU0FBU0osS0FBS0ssTUFBTTtRQUNwQkMsTUFBTTtRQUNOQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsU0FBUztRQUNUQyxRQUFRO0lBQ1Q7SUFDQTtRQUNDTixTQUFTSixLQUFLSyxNQUFNO1FBQ3BCQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsU0FBUztRQUNUQyxTQUFTO1FBQ1RDLFFBQVE7SUFDVDtDQUFFO0FBQ0YsSUFBSUMsV0FBVztJQUFDO1FBQ2ZQLFNBQVNKLEtBQUtZLE1BQU07UUFDcEJOLE1BQU07UUFDTkMsTUFBTTtJQUNQO0lBQ0E7UUFDQ0gsU0FBU0osS0FBS1ksTUFBTTtRQUNwQk4sTUFBTTtRQUNOQyxNQUFNO0lBQ1A7SUFDQTtRQUNDSCxTQUFTSixLQUFLWSxNQUFNO1FBQ3BCTixNQUFNO1FBQ05DLE1BQU07SUFDUDtJQUNBO1FBQ0NILFNBQVNKLEtBQUtZLE1BQU07UUFDcEJOLE1BQU07UUFDTkMsTUFBTztJQUNSO0NBQUU7QUFFRk0sT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxrQkFBa0IsU0FBU0MsV0FBVyxFQUFFQyxXQUFXO1FBQ2xEZCxXQUFXZSxPQUFPLENBQUMsU0FBU0MsQ0FBQztZQUM1QixJQUFJQyxZQUFZSixZQUFZRztZQUM1QixJQUFHQyxXQUFXO2dCQUNiLElBQUlDLFlBQVlMLFlBQVk7b0JBQUNaLFNBQVNlLEVBQUVmLE9BQU87b0JBQUVFLE1BQU1hLEVBQUVYLE9BQU87b0JBQUVELE1BQU1ZLEVBQUVWLE9BQU87Z0JBQUE7Z0JBQ2pGLElBQUlhLGVBQWVELGNBQWNGLEVBQUVULE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQ2pELElBQUlhLFNBQVMsQ0FBQ0gsU0FBUyxDQUFDLEVBQUUsR0FBSUEsU0FBUyxDQUFDLEVBQUUsR0FBRyxLQUFPQSxTQUFTLENBQUMsRUFBRSxHQUFHLElBQUksSUFBS0U7Z0JBQzVFTCxZQUFZRSxHQUFHSTtZQUNoQjtRQUNEO0lBQ0Q7SUFDQUMsZ0JBQWdCLFNBQVNSLFdBQVcsRUFBRUMsV0FBVztRQUNoRE4sU0FBU08sT0FBTyxDQUFDLFNBQVNDLENBQUM7WUFDMUIsSUFBSU0sYUFBYVQsWUFBWUc7WUFDN0IsSUFBR00sWUFBWTtnQkFDZCx1REFBdUQ7Z0JBQ3ZELElBQUlDLFlBQVl4QixLQUFLeUIsYUFBYSxDQUFDRjtnQkFDbkMsSUFBRyxPQUFPQyxjQUFjLGFBQWE7b0JBQ3BDVCxZQUFZRSxHQUFHTztnQkFDaEI7WUFDRDtRQUNEO0lBQ0Q7SUFDQUUsZUFBZSxTQUFTQyxNQUFNLEVBQUVDLE1BQU07UUFDckMsSUFBR0MsTUFBTUMsT0FBTyxDQUFDSCxTQUFTO1lBQ3pCQSxTQUFTQSxPQUFPSSxHQUFHLENBQUMsU0FBU0MsS0FBSztnQkFDakMsSUFBR0osV0FBVyxNQUFNQSxXQUFXLEdBQUc7b0JBQ2pDLE9BQU9JLEtBQUssQ0FBQyxFQUFFLEdBQUdBLEtBQUssQ0FBQyxFQUFFO2dCQUMzQjtnQkFDQSxPQUFPQTtZQUNSO1lBQ0EsSUFBR0wsT0FBT00sTUFBTSxLQUFLLEdBQUc7Z0JBQ3ZCTixTQUFTQSxNQUFNLENBQUMsRUFBRTtZQUNuQjtRQUNEO1FBQ0EsT0FBT0E7SUFDUjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW1hZ2UtZ2FsbGVyeS8uL25vZGVfbW9kdWxlcy9leGlmLXBhcnNlci9saWIvc2ltcGxpZnkuanM/YTJmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXhpZiA9IHJlcXVpcmUoJy4vZXhpZicpO1xudmFyIGRhdGUgPSByZXF1aXJlKCcuL2RhdGUnKTtcblxudmFyIGRlZ3JlZVRhZ3MgPSBbe1xuXHRzZWN0aW9uOiBleGlmLkdQU0lGRCxcblx0dHlwZTogMHgwMDAyLFxuXHRuYW1lOiAnR1BTTGF0aXR1ZGUnLFxuXHRyZWZUeXBlOiAweDAwMDEsXG5cdHJlZk5hbWU6ICdHUFNMYXRpdHVkZVJlZicsXG5cdHBvc1ZhbDogJ04nXG59LFxue1xuXHRzZWN0aW9uOiBleGlmLkdQU0lGRCxcblx0dHlwZTogMHgwMDA0LFxuXHRuYW1lOiAnR1BTTG9uZ2l0dWRlJyxcblx0cmVmVHlwZTogMHgwMDAzLFxuXHRyZWZOYW1lOiAnR1BTTG9uZ2l0dWRlUmVmJyxcblx0cG9zVmFsOiAnRSdcbn1dO1xudmFyIGRhdGVUYWdzID0gW3tcblx0c2VjdGlvbjogZXhpZi5TdWJJRkQsXG5cdHR5cGU6IDB4MDEzMixcblx0bmFtZTogJ01vZGlmeURhdGUnXG59LFxue1xuXHRzZWN0aW9uOiBleGlmLlN1YklGRCxcblx0dHlwZTogMHg5MDAzLFxuXHRuYW1lOiAnRGF0ZVRpbWVPcmlnaW5hbCdcbn0sXG57XG5cdHNlY3Rpb246IGV4aWYuU3ViSUZELFxuXHR0eXBlOiAweDkwMDQsXG5cdG5hbWU6ICdDcmVhdGVEYXRlJ1xufSxcbntcblx0c2VjdGlvbjogZXhpZi5TdWJJRkQsXG5cdHR5cGU6IDB4MDEzMixcblx0bmFtZSA6ICdNb2RpZnlEYXRlJyxcbn1dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Y2FzdERlZ3JlZVZhbHVlczogZnVuY3Rpb24oZ2V0VGFnVmFsdWUsIHNldFRhZ1ZhbHVlKSB7XG5cdFx0ZGVncmVlVGFncy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcblx0XHRcdHZhciBkZWdyZWVWYWwgPSBnZXRUYWdWYWx1ZSh0KTtcblx0XHRcdGlmKGRlZ3JlZVZhbCkge1xuXHRcdFx0XHR2YXIgZGVncmVlUmVmID0gZ2V0VGFnVmFsdWUoe3NlY3Rpb246IHQuc2VjdGlvbiwgdHlwZTogdC5yZWZUeXBlLCBuYW1lOiB0LnJlZk5hbWV9KTtcblx0XHRcdFx0dmFyIGRlZ3JlZU51bVJlZiA9IGRlZ3JlZVJlZiA9PT0gdC5wb3NWYWwgPyAxIDogLTE7XG5cdFx0XHRcdHZhciBkZWdyZWUgPSAoZGVncmVlVmFsWzBdICsgKGRlZ3JlZVZhbFsxXSAvIDYwKSArIChkZWdyZWVWYWxbMl0gLyAzNjAwKSkgKiBkZWdyZWVOdW1SZWY7XG5cdFx0XHRcdHNldFRhZ1ZhbHVlKHQsIGRlZ3JlZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdGNhc3REYXRlVmFsdWVzOiBmdW5jdGlvbihnZXRUYWdWYWx1ZSwgc2V0VGFnVmFsdWUpIHtcblx0XHRkYXRlVGFncy5mb3JFYWNoKGZ1bmN0aW9uKHQpIHtcblx0XHRcdHZhciBkYXRlU3RyVmFsID0gZ2V0VGFnVmFsdWUodCk7XG5cdFx0XHRpZihkYXRlU3RyVmFsKSB7XG5cdFx0XHRcdC8vc29tZSBlYXN5IGNoZWNrcyB0byBkZXRlcm1pbmUgdHdvIGNvbW1vbiBkYXRlIGZvcm1hdHNcblx0XHRcdFx0dmFyIHRpbWVzdGFtcCA9IGRhdGUucGFyc2VFeGlmRGF0ZShkYXRlU3RyVmFsKTtcblx0XHRcdFx0aWYodHlwZW9mIHRpbWVzdGFtcCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRzZXRUYWdWYWx1ZSh0LCB0aW1lc3RhbXApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdHNpbXBsaWZ5VmFsdWU6IGZ1bmN0aW9uKHZhbHVlcywgZm9ybWF0KSB7XG5cdFx0aWYoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG5cdFx0XHR2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdGlmKGZvcm1hdCA9PT0gMTAgfHwgZm9ybWF0ID09PSA1KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlWzBdIC8gdmFsdWVbMV07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0XHRpZih2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdHZhbHVlcyA9IHZhbHVlc1swXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fVxufTtcbiJdLCJuYW1lcyI6WyJleGlmIiwicmVxdWlyZSIsImRhdGUiLCJkZWdyZWVUYWdzIiwic2VjdGlvbiIsIkdQU0lGRCIsInR5cGUiLCJuYW1lIiwicmVmVHlwZSIsInJlZk5hbWUiLCJwb3NWYWwiLCJkYXRlVGFncyIsIlN1YklGRCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjYXN0RGVncmVlVmFsdWVzIiwiZ2V0VGFnVmFsdWUiLCJzZXRUYWdWYWx1ZSIsImZvckVhY2giLCJ0IiwiZGVncmVlVmFsIiwiZGVncmVlUmVmIiwiZGVncmVlTnVtUmVmIiwiZGVncmVlIiwiY2FzdERhdGVWYWx1ZXMiLCJkYXRlU3RyVmFsIiwidGltZXN0YW1wIiwicGFyc2VFeGlmRGF0ZSIsInNpbXBsaWZ5VmFsdWUiLCJ2YWx1ZXMiLCJmb3JtYXQiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJ2YWx1ZSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/exif-parser/lib/simplify.js\n");

/***/ })

};
;